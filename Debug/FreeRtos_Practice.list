
FreeRtos_Practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a70  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08009c50  08009c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a094  0800a094  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a09c  0800a09c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0a0  0800a0a0  0001a0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013320  2000008c  0800a130  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200133ac  0800a130  000233ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e1b  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004464  00000000  00000000  00043ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00048340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00049ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260f1  00000000  00000000  0004b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5c1  00000000  00000000  00071189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b5d  00000000  00000000  0008e74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd8  00000000  00000000  0016f2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009c38 	.word	0x08009c38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	08009c38 	.word	0x08009c38

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <led_effect_stop>:
void turn_on_even_leds(void);
void turn_on_odd_leds(void);

// Stops any active led effect and if no timer is active
// then nothing happens
void led_effect_stop(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
	for(int i = 0; i < 3; i++){
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	e00e      	b.n	8000612 <led_effect_stop+0x2a>
		xTimerStop(handle_led_timers[i], portMAX_DELAY);
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <led_effect_stop+0x58>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2200      	movs	r2, #0
 8000606:	2103      	movs	r1, #3
 8000608:	f007 faae 	bl	8007b68 <xTimerGenericCommand>
	for(int i = 0; i < 3; i++){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3301      	adds	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b02      	cmp	r3, #2
 8000616:	dded      	ble.n	80005f4 <led_effect_stop+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2101      	movs	r1, #1
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <led_effect_stop+0x5c>)
 800061e:	f001 ff2d 	bl	800247c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <led_effect_stop+0x5c>)
 8000628:	f001 ff28 	bl	800247c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <led_effect_stop+0x5c>)
 8000634:	f001 ff22 	bl	800247c <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20013304 	.word	0x20013304
 8000644:	40020400 	.word	0x40020400

08000648 <led_effect>:

// Starts the software timers that implement the led effects
void led_effect(int n){
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af02      	add	r7, sp, #8
 800064e:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000650:	f7ff ffca 	bl	80005e8 <led_effect_stop>
	xTimerStart(handle_led_timers[n-1], portMAX_DELAY);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b01      	subs	r3, #1
 8000658:	4a08      	ldr	r2, [pc, #32]	; (800067c <led_effect+0x34>)
 800065a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800065e:	f006 f9af 	bl	80069c0 <xTaskGetTickCount>
 8000662:	4602      	mov	r2, r0
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2101      	movs	r1, #1
 800066e:	4620      	mov	r0, r4
 8000670:	f007 fa7a 	bl	8007b68 <xTimerGenericCommand>
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	20013304 	.word	0x20013304

08000680 <LED_Effect1>:

// LED Effect 1 -- Toggles all 3 LEDs
void LED_Effect1(void){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000684:	2101      	movs	r1, #1
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <LED_Effect1+0x24>)
 8000688:	f001 ff11 	bl	80024ae <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <LED_Effect1+0x24>)
 8000690:	f001 ff0d 	bl	80024ae <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <LED_Effect1+0x24>)
 800069a:	f001 ff08 	bl	80024ae <HAL_GPIO_TogglePin>
//	static int flag = 1;
//	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020400 	.word	0x40020400

080006a8 <LED_Effect2>:
//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
//}

// LED Effect 2 -- Alternatively toggles even and odd LEDs
void LED_Effect2(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <LED_Effect2+0x28>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <LED_Effect2+0x28>)
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <LED_Effect2+0x28>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <LED_Effect2+0x1e>
 80006c0:	f000 f808 	bl	80006d4 <turn_on_even_leds>
}
 80006c4:	e001      	b.n	80006ca <LED_Effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80006c6:	f000 f81b 	bl	8000700 <turn_on_odd_leds>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000000 	.word	0x20000000

080006d4 <turn_on_even_leds>:

// Turns on even LEDs (i.e. LD2)
void turn_on_even_leds(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2101      	movs	r1, #1
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <turn_on_even_leds+0x28>)
 80006de:	f001 fecd 	bl	800247c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <turn_on_even_leds+0x28>)
 80006e8:	f001 fec8 	bl	800247c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4802      	ldr	r0, [pc, #8]	; (80006fc <turn_on_even_leds+0x28>)
 80006f4:	f001 fec2 	bl	800247c <HAL_GPIO_WritePin>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020400 	.word	0x40020400

08000700 <turn_on_odd_leds>:

// Turns on odd LEDs (i.e. LD1 and LD3)
void turn_on_odd_leds(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <turn_on_odd_leds+0x28>)
 800070a:	f001 feb7 	bl	800247c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <turn_on_odd_leds+0x28>)
 8000714:	f001 feb2 	bl	800247c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071e:	4802      	ldr	r0, [pc, #8]	; (8000728 <turn_on_odd_leds+0x28>)
 8000720:	f001 feac 	bl	800247c <HAL_GPIO_WritePin>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020400 	.word	0x40020400

0800072c <LED_Effect3>:

// LED Effect 3
void LED_Effect3(void){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	static int i = 1;
	if (i%3 == 1){
 8000730:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <LED_Effect3+0xf4>)
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <LED_Effect3+0xf8>)
 8000736:	fb83 3201 	smull	r3, r2, r3, r1
 800073a:	17cb      	asrs	r3, r1, #31
 800073c:	1ad2      	subs	r2, r2, r3
 800073e:	4613      	mov	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	1aca      	subs	r2, r1, r3
 8000746:	2a01      	cmp	r2, #1
 8000748:	d110      	bne.n	800076c <LED_Effect3+0x40>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2101      	movs	r1, #1
 800074e:	4836      	ldr	r0, [pc, #216]	; (8000828 <LED_Effect3+0xfc>)
 8000750:	f001 fe94 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	4833      	ldr	r0, [pc, #204]	; (8000828 <LED_Effect3+0xfc>)
 800075a:	f001 fe8f 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000764:	4830      	ldr	r0, [pc, #192]	; (8000828 <LED_Effect3+0xfc>)
 8000766:	f001 fe89 	bl	800247c <HAL_GPIO_WritePin>
 800076a:	e052      	b.n	8000812 <LED_Effect3+0xe6>
	}
	else if (i%3 == 2){
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <LED_Effect3+0xf4>)
 800076e:	6819      	ldr	r1, [r3, #0]
 8000770:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <LED_Effect3+0xf8>)
 8000772:	fb83 3201 	smull	r3, r2, r3, r1
 8000776:	17cb      	asrs	r3, r1, #31
 8000778:	1ad2      	subs	r2, r2, r3
 800077a:	4613      	mov	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	1aca      	subs	r2, r1, r3
 8000782:	2a02      	cmp	r2, #2
 8000784:	d110      	bne.n	80007a8 <LED_Effect3+0x7c>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2101      	movs	r1, #1
 800078a:	4827      	ldr	r0, [pc, #156]	; (8000828 <LED_Effect3+0xfc>)
 800078c:	f001 fe76 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	4824      	ldr	r0, [pc, #144]	; (8000828 <LED_Effect3+0xfc>)
 8000796:	f001 fe71 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a0:	4821      	ldr	r0, [pc, #132]	; (8000828 <LED_Effect3+0xfc>)
 80007a2:	f001 fe6b 	bl	800247c <HAL_GPIO_WritePin>
 80007a6:	e034      	b.n	8000812 <LED_Effect3+0xe6>
	}
	else if (i%3 == 0){
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <LED_Effect3+0xf4>)
 80007aa:	6819      	ldr	r1, [r3, #0]
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <LED_Effect3+0xf8>)
 80007ae:	fb83 3201 	smull	r3, r2, r3, r1
 80007b2:	17cb      	asrs	r3, r1, #31
 80007b4:	1ad2      	subs	r2, r2, r3
 80007b6:	4613      	mov	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4413      	add	r3, r2
 80007bc:	1aca      	subs	r2, r1, r3
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d110      	bne.n	80007e4 <LED_Effect3+0xb8>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2101      	movs	r1, #1
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <LED_Effect3+0xfc>)
 80007c8:	f001 fe58 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	4815      	ldr	r0, [pc, #84]	; (8000828 <LED_Effect3+0xfc>)
 80007d2:	f001 fe53 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	4812      	ldr	r0, [pc, #72]	; (8000828 <LED_Effect3+0xfc>)
 80007de:	f001 fe4d 	bl	800247c <HAL_GPIO_WritePin>
 80007e2:	e016      	b.n	8000812 <LED_Effect3+0xe6>
	}
	else if (i > 3){
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <LED_Effect3+0xf4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	dd12      	ble.n	8000812 <LED_Effect3+0xe6>
		i = 1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <LED_Effect3+0xf4>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2101      	movs	r1, #1
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <LED_Effect3+0xfc>)
 80007f8:	f001 fe40 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <LED_Effect3+0xfc>)
 8000802:	f001 fe3b 	bl	800247c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	4806      	ldr	r0, [pc, #24]	; (8000828 <LED_Effect3+0xfc>)
 800080e:	f001 fe35 	bl	800247c <HAL_GPIO_WritePin>
	}
	i = i+1;
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <LED_Effect3+0xf4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a01      	ldr	r2, [pc, #4]	; (8000820 <LED_Effect3+0xf4>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000004 	.word	0x20000004
 8000824:	55555556 	.word	0x55555556
 8000828:	40020400 	.word	0x40020400

0800082c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af02      	add	r7, sp, #8
 8000832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(huart);
  uint8_t delete_last_byte;

  // Checks whether queue is full or not
  if (!xQueueIsQueueFullFromISR(q_data_input)){
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <HAL_UART_RxCpltCallback+0x84>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fd52 	bl	80062e2 <xQueueIsQueueFullFromISR>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d107      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x28>
	  // Enqueue when queue is not full
	  xQueueSendFromISR(q_data_input, (void*)&user_data, NULL);
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <HAL_UART_RxCpltCallback+0x84>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	2300      	movs	r3, #0
 800084a:	2200      	movs	r2, #0
 800084c:	4919      	ldr	r1, [pc, #100]	; (80008b4 <HAL_UART_RxCpltCallback+0x88>)
 800084e:	f005 f9f1 	bl	8005c34 <xQueueGenericSendFromISR>
 8000852:	e013      	b.n	800087c <HAL_UART_RxCpltCallback+0x50>
  }
  else {
	  if (user_data == '\r'){
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_RxCpltCallback+0x88>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b0d      	cmp	r3, #13
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x50>
		  // Ensures that the last byte of the queue is '\r' if the queue is full
		  xQueueReceiveFromISR(q_data_input, (void*)&delete_last_byte, NULL);
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_UART_RxCpltCallback+0x84>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f107 010f 	add.w	r1, r7, #15
 8000866:	2200      	movs	r2, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f005 fb75 	bl	8005f58 <xQueueReceiveFromISR>
		  xQueueSendFromISR(q_data_input, (void*)&user_data, NULL);
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_UART_RxCpltCallback+0x84>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	2200      	movs	r2, #0
 8000876:	490f      	ldr	r1, [pc, #60]	; (80008b4 <HAL_UART_RxCpltCallback+0x88>)
 8000878:	f005 f9dc 	bl	8005c34 <xQueueGenericSendFromISR>
	  }
  }

  // Send notification to command handling task if user_data = '\r'
  if (user_data == '\r'){
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_UART_RxCpltCallback+0x88>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b0d      	cmp	r3, #13
 8000884:	d10a      	bne.n	800089c <HAL_UART_RxCpltCallback+0x70>
	  xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_UART_RxCpltCallback+0x8c>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	2300      	movs	r3, #0
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2300      	movs	r3, #0
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	f006 fefe 	bl	8007698 <xTaskGenericNotifyFromISR>
  }

  // Enable UART reception in IT mode
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&user_data, sizeof(char));
 800089c:	2201      	movs	r2, #1
 800089e:	4905      	ldr	r1, [pc, #20]	; (80008b4 <HAL_UART_RxCpltCallback+0x88>)
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <HAL_UART_RxCpltCallback+0x90>)
 80008a2:	f003 fd64 	bl	800436e <HAL_UART_Receive_IT>

}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20012e7c 	.word	0x20012e7c
 80008b4:	200132fc 	.word	0x200132fc
 80008b8:	20012ec4 	.word	0x20012ec4
 80008bc:	20012e80 	.word	0x20012e80

080008c0 <led_effect_callback>:

// LED effect callback
void led_effect_callback(TimerHandle_t xTimer){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f007 fc16 	bl	80080fa <pvTimerGetTimerID>
 80008ce:	4603      	mov	r3, r0
 80008d0:	60fb      	str	r3, [r7, #12]

	switch(id){
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d00f      	beq.n	80008f8 <led_effect_callback+0x38>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b03      	cmp	r3, #3
 80008dc:	dc0f      	bgt.n	80008fe <led_effect_callback+0x3e>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d003      	beq.n	80008ec <led_effect_callback+0x2c>
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d003      	beq.n	80008f2 <led_effect_callback+0x32>
			break;
		case 3:
			LED_Effect3();
			break;
	}
}
 80008ea:	e008      	b.n	80008fe <led_effect_callback+0x3e>
			LED_Effect1();
 80008ec:	f7ff fec8 	bl	8000680 <LED_Effect1>
			break;
 80008f0:	e005      	b.n	80008fe <led_effect_callback+0x3e>
			LED_Effect2();
 80008f2:	f7ff fed9 	bl	80006a8 <LED_Effect2>
			break;
 80008f6:	e002      	b.n	80008fe <led_effect_callback+0x3e>
			LED_Effect3();
 80008f8:	f7ff ff18 	bl	800072c <LED_Effect3>
			break;
 80008fc:	bf00      	nop
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <rtc_report_callback>:

// RTC report callback function
void rtc_report_callback(TimerHandle_t xTimer){
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	show_date_time_itm();
 800090e:	f000 fad1 	bl	8000eb4 <show_date_time_itm>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f001 fa3d 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f911 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f000 f9fd 	bl	8000d28 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800092e:	f000 f9a1 	bl	8000c74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000932:	f000 f9c9 	bl	8000cc8 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8000936:	f000 f977 	bl	8000c28 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Create application tasks
  status = xTaskCreate(menu_task_handler, "menu_task", 250, NULL, 2, &handle_menu_task);
 800093a:	4b6b      	ldr	r3, [pc, #428]	; (8000ae8 <main+0x1cc>)
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	2302      	movs	r3, #2
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2300      	movs	r3, #0
 8000944:	22fa      	movs	r2, #250	; 0xfa
 8000946:	4969      	ldr	r1, [pc, #420]	; (8000aec <main+0x1d0>)
 8000948:	4869      	ldr	r0, [pc, #420]	; (8000af0 <main+0x1d4>)
 800094a:	f005 fd73 	bl	8006434 <xTaskCreate>
 800094e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d00a      	beq.n	800096c <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800095a:	f383 8811 	msr	BASEPRI, r3
 800095e:	f3bf 8f6f 	isb	sy
 8000962:	f3bf 8f4f 	dsb	sy
 8000966:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000968:	bf00      	nop
 800096a:	e7fe      	b.n	800096a <main+0x4e>

  status = xTaskCreate(cmd_task_handler, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 800096c:	4b61      	ldr	r3, [pc, #388]	; (8000af4 <main+0x1d8>)
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	2302      	movs	r3, #2
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2300      	movs	r3, #0
 8000976:	22fa      	movs	r2, #250	; 0xfa
 8000978:	495f      	ldr	r1, [pc, #380]	; (8000af8 <main+0x1dc>)
 800097a:	4860      	ldr	r0, [pc, #384]	; (8000afc <main+0x1e0>)
 800097c:	f005 fd5a 	bl	8006434 <xTaskCreate>
 8000980:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d00a      	beq.n	800099e <main+0x82>
        __asm volatile
 8000988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800098c:	f383 8811 	msr	BASEPRI, r3
 8000990:	f3bf 8f6f 	isb	sy
 8000994:	f3bf 8f4f 	dsb	sy
 8000998:	61bb      	str	r3, [r7, #24]
    }
 800099a:	bf00      	nop
 800099c:	e7fe      	b.n	800099c <main+0x80>

  status = xTaskCreate(print_task_handler, "print_task", 250, NULL, 2, &handle_print_task);
 800099e:	4b58      	ldr	r3, [pc, #352]	; (8000b00 <main+0x1e4>)
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	2302      	movs	r3, #2
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2300      	movs	r3, #0
 80009a8:	22fa      	movs	r2, #250	; 0xfa
 80009aa:	4956      	ldr	r1, [pc, #344]	; (8000b04 <main+0x1e8>)
 80009ac:	4856      	ldr	r0, [pc, #344]	; (8000b08 <main+0x1ec>)
 80009ae:	f005 fd41 	bl	8006434 <xTaskCreate>
 80009b2:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d00a      	beq.n	80009d0 <main+0xb4>
        __asm volatile
 80009ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009be:	f383 8811 	msr	BASEPRI, r3
 80009c2:	f3bf 8f6f 	isb	sy
 80009c6:	f3bf 8f4f 	dsb	sy
 80009ca:	617b      	str	r3, [r7, #20]
    }
 80009cc:	bf00      	nop
 80009ce:	e7fe      	b.n	80009ce <main+0xb2>

  status = xTaskCreate(led_task_handler, "led_task", 250, NULL, 2, &handle_led_task);
 80009d0:	4b4e      	ldr	r3, [pc, #312]	; (8000b0c <main+0x1f0>)
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	2302      	movs	r3, #2
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2300      	movs	r3, #0
 80009da:	22fa      	movs	r2, #250	; 0xfa
 80009dc:	494c      	ldr	r1, [pc, #304]	; (8000b10 <main+0x1f4>)
 80009de:	484d      	ldr	r0, [pc, #308]	; (8000b14 <main+0x1f8>)
 80009e0:	f005 fd28 	bl	8006434 <xTaskCreate>
 80009e4:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d00a      	beq.n	8000a02 <main+0xe6>
        __asm volatile
 80009ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f0:	f383 8811 	msr	BASEPRI, r3
 80009f4:	f3bf 8f6f 	isb	sy
 80009f8:	f3bf 8f4f 	dsb	sy
 80009fc:	613b      	str	r3, [r7, #16]
    }
 80009fe:	bf00      	nop
 8000a00:	e7fe      	b.n	8000a00 <main+0xe4>

  status = xTaskCreate(rtc_task_handler, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8000a02:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <main+0x1fc>)
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	2302      	movs	r3, #2
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	22fa      	movs	r2, #250	; 0xfa
 8000a0e:	4943      	ldr	r1, [pc, #268]	; (8000b1c <main+0x200>)
 8000a10:	4843      	ldr	r0, [pc, #268]	; (8000b20 <main+0x204>)
 8000a12:	f005 fd0f 	bl	8006434 <xTaskCreate>
 8000a16:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d00a      	beq.n	8000a34 <main+0x118>
        __asm volatile
 8000a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a22:	f383 8811 	msr	BASEPRI, r3
 8000a26:	f3bf 8f6f 	isb	sy
 8000a2a:	f3bf 8f4f 	dsb	sy
 8000a2e:	60fb      	str	r3, [r7, #12]
    }
 8000a30:	bf00      	nop
 8000a32:	e7fe      	b.n	8000a32 <main+0x116>

  q_data_input = xQueueCreate(10, sizeof(char));
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f004 ff8b 	bl	8005954 <xQueueGenericCreate>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a38      	ldr	r2, [pc, #224]	; (8000b24 <main+0x208>)
 8000a42:	6013      	str	r3, [r2, #0]
  configASSERT(q_data_input != NULL);
 8000a44:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <main+0x208>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10a      	bne.n	8000a62 <main+0x146>
        __asm volatile
 8000a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a50:	f383 8811 	msr	BASEPRI, r3
 8000a54:	f3bf 8f6f 	isb	sy
 8000a58:	f3bf 8f4f 	dsb	sy
 8000a5c:	60bb      	str	r3, [r7, #8]
    }
 8000a5e:	bf00      	nop
 8000a60:	e7fe      	b.n	8000a60 <main+0x144>

  q_data_print = xQueueCreate(10, sizeof(size_t));	// size_t because it enqueues pointer to the data that is to be printed
 8000a62:	2200      	movs	r2, #0
 8000a64:	2104      	movs	r1, #4
 8000a66:	200a      	movs	r0, #10
 8000a68:	f004 ff74 	bl	8005954 <xQueueGenericCreate>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <main+0x20c>)
 8000a70:	6013      	str	r3, [r2, #0]
  configASSERT(q_data_print != NULL);
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <main+0x20c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10a      	bne.n	8000a90 <main+0x174>
        __asm volatile
 8000a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a7e:	f383 8811 	msr	BASEPRI, r3
 8000a82:	f3bf 8f6f 	isb	sy
 8000a86:	f3bf 8f4f 	dsb	sy
 8000a8a:	607b      	str	r3, [r7, #4]
    }
 8000a8c:	bf00      	nop
 8000a8e:	e7fe      	b.n	8000a8e <main+0x172>

  // Create 3 timers for 3 led effects
  for (int i = 0; i < 3; i++){
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
 8000a94:	e012      	b.n	8000abc <main+0x1a0>
	 handle_led_timers[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500),
			 pdTRUE, (void*)(i+1), led_effect_callback);
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	3301      	adds	r3, #1
	 handle_led_timers[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500),
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <main+0x210>)
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2105      	movs	r1, #5
 8000aa6:	4822      	ldr	r0, [pc, #136]	; (8000b30 <main+0x214>)
 8000aa8:	f007 f804 	bl	8007ab4 <xTimerCreate>
 8000aac:	4602      	mov	r2, r0
 8000aae:	4921      	ldr	r1, [pc, #132]	; (8000b34 <main+0x218>)
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < 3; i++){
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	3301      	adds	r3, #1
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	dde9      	ble.n	8000a96 <main+0x17a>
  }

  // Create RTC timer for reporting
  rtc_timer = xTimerCreate("rtc_timer", pdMS_TO_TICKS(500), pdTRUE, NULL, rtc_report_callback);
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <main+0x21c>)
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2105      	movs	r1, #5
 8000acc:	481b      	ldr	r0, [pc, #108]	; (8000b3c <main+0x220>)
 8000ace:	f006 fff1 	bl	8007ab4 <xTimerCreate>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <main+0x224>)
 8000ad6:	6013      	str	r3, [r2, #0]

  // Enable UART3 in interrupt mode
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&user_data, sizeof(char));
 8000ad8:	2201      	movs	r2, #1
 8000ada:	491a      	ldr	r1, [pc, #104]	; (8000b44 <main+0x228>)
 8000adc:	481a      	ldr	r0, [pc, #104]	; (8000b48 <main+0x22c>)
 8000ade:	f003 fc46 	bl	800436e <HAL_UART_Receive_IT>

  // Start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000ae2:	f005 fe11 	bl	8006708 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <main+0x1ca>
 8000ae8:	200132d0 	.word	0x200132d0
 8000aec:	08009c50 	.word	0x08009c50
 8000af0:	080014f5 	.word	0x080014f5
 8000af4:	20012ec4 	.word	0x20012ec4
 8000af8:	08009c5c 	.word	0x08009c5c
 8000afc:	080015d5 	.word	0x080015d5
 8000b00:	200132f4 	.word	0x200132f4
 8000b04:	08009c68 	.word	0x08009c68
 8000b08:	08001d0d 	.word	0x08001d0d
 8000b0c:	200132f8 	.word	0x200132f8
 8000b10:	08009c74 	.word	0x08009c74
 8000b14:	08001705 	.word	0x08001705
 8000b18:	20012e78 	.word	0x20012e78
 8000b1c:	08009c80 	.word	0x08009c80
 8000b20:	08001861 	.word	0x08001861
 8000b24:	20012e7c 	.word	0x20012e7c
 8000b28:	20013300 	.word	0x20013300
 8000b2c:	080008c1 	.word	0x080008c1
 8000b30:	08009c8c 	.word	0x08009c8c
 8000b34:	20013304 	.word	0x20013304
 8000b38:	08000907 	.word	0x08000907
 8000b3c:	08009c98 	.word	0x08009c98
 8000b40:	20012e74 	.word	0x20012e74
 8000b44:	200132fc 	.word	0x200132fc
 8000b48:	20012e80 	.word	0x20012e80

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2234      	movs	r2, #52	; 0x34
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f007 ff3c 	bl	80089d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <SystemClock_Config+0xd4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a29      	ldr	r2, [pc, #164]	; (8000c20 <SystemClock_Config+0xd4>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <SystemClock_Config+0xd4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <SystemClock_Config+0xd8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a23      	ldr	r2, [pc, #140]	; (8000c24 <SystemClock_Config+0xd8>)
 8000b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <SystemClock_Config+0xd8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ba8:	2309      	movs	r3, #9
 8000baa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000bc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fa84 	bl	80030e8 <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000be6:	f000 f95f 	bl	8000ea8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	2103      	movs	r1, #3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fdb4 	bl	8002774 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c12:	f000 f949 	bl	8000ea8 <Error_Handler>
  }
}
 8000c16:	bf00      	nop
 8000c18:	3750      	adds	r7, #80	; 0x50
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40007000 	.word	0x40007000

08000c28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_RTC_Init+0x44>)
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_RTC_Init+0x44>)
 8000c34:	2240      	movs	r2, #64	; 0x40
 8000c36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_RTC_Init+0x44>)
 8000c3a:	227f      	movs	r2, #127	; 0x7f
 8000c3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_RTC_Init+0x44>)
 8000c40:	22ff      	movs	r2, #255	; 0xff
 8000c42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_RTC_Init+0x44>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_RTC_Init+0x44>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_RTC_Init+0x44>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_RTC_Init+0x44>)
 8000c58:	f002 fcca 	bl	80035f0 <HAL_RTC_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c62:	f000 f921 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200132d4 	.word	0x200132d4
 8000c70:	40002800 	.word	0x40002800

08000c74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_USART3_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART3_UART_Init+0x4c>)
 8000cac:	f003 fa80 	bl	80041b0 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 f8f7 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20012e80 	.word	0x20012e80
 8000cc4:	40004800 	.word	0x40004800

08000cc8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cdc:	2202      	movs	r2, #2
 8000cde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d12:	f001 fbe6 	bl	80024e2 <HAL_PCD_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000d1c:	f000 f8c4 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20012ec8 	.word	0x20012ec8

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	4b4c      	ldr	r3, [pc, #304]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a4b      	ldr	r2, [pc, #300]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b49      	ldr	r3, [pc, #292]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a44      	ldr	r2, [pc, #272]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a3d      	ldr	r2, [pc, #244]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a36      	ldr	r2, [pc, #216]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <MX_GPIO_Init+0x14c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000dec:	4822      	ldr	r0, [pc, #136]	; (8000e78 <MX_GPIO_Init+0x150>)
 8000dee:	f001 fb45 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2140      	movs	r1, #64	; 0x40
 8000df6:	4821      	ldr	r0, [pc, #132]	; (8000e7c <MX_GPIO_Init+0x154>)
 8000df8:	f001 fb40 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	481b      	ldr	r0, [pc, #108]	; (8000e80 <MX_GPIO_Init+0x158>)
 8000e14:	f001 f99e 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e18:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4811      	ldr	r0, [pc, #68]	; (8000e78 <MX_GPIO_Init+0x150>)
 8000e32:	f001 f98f 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <MX_GPIO_Init+0x154>)
 8000e4e:	f001 f981 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_GPIO_Init+0x154>)
 8000e66:	f001 f975 	bl	8002154 <HAL_GPIO_Init>

}
 8000e6a:	bf00      	nop
 8000e6c:	3730      	adds	r7, #48	; 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40021800 	.word	0x40021800
 8000e80:	40020800 	.word	0x40020800

08000e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e96:	f000 ffa5 	bl	8001de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40001000 	.word	0x40001000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <show_date_time_itm>:
#include "main.h"

// Prints the time and date in ITM (SWV console)
void show_date_time_itm(){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 fd88 	bl	80089d8 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2214      	movs	r2, #20
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f007 fd82 	bl	80089d8 <memset>

	// Gets the time from the microcontroller's RTC
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4817      	ldr	r0, [pc, #92]	; (8000f38 <show_date_time_itm+0x84>)
 8000edc:	f002 fcd6 	bl	800388c <HAL_RTC_GetTime>
	// Gets the date from the microcontroller's RTC
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <show_date_time_itm+0x84>)
 8000eea:	f002 fdd4 	bl	8003a96 <HAL_RTC_GetDate>

	// Extracts the time format
	char* timeFormat;
	timeFormat = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <show_date_time_itm+0x44>
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <show_date_time_itm+0x88>)
 8000ef6:	e000      	b.n	8000efa <show_date_time_itm+0x46>
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <show_date_time_itm+0x8c>)
 8000efa:	61fb      	str	r3, [r7, #28]

	// Displays the time in hh:mm:ss (AM/PM) by sending to queue
	printf("%s: \t%02d:%02d:%02d %s", "\nCurrent Time&Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, timeFormat);
 8000efc:	793b      	ldrb	r3, [r7, #4]
 8000efe:	4619      	mov	r1, r3
 8000f00:	797b      	ldrb	r3, [r7, #5]
 8000f02:	4618      	mov	r0, r3
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	461a      	mov	r2, r3
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	9200      	str	r2, [sp, #0]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	490c      	ldr	r1, [pc, #48]	; (8000f44 <show_date_time_itm+0x90>)
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <show_date_time_itm+0x94>)
 8000f16:	f007 fd67 	bl	80089e8 <iprintf>

	// Displays the date in dd/mm/yyyy
	printf("\t%02d/%02d/%02d", rtc_date.Date, rtc_date.Month, 2000+rtc_date.Year);
 8000f1a:	7ebb      	ldrb	r3, [r7, #26]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	7e7b      	ldrb	r3, [r7, #25]
 8000f20:	461a      	mov	r2, r3
 8000f22:	7efb      	ldrb	r3, [r7, #27]
 8000f24:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <show_date_time_itm+0x98>)
 8000f2a:	f007 fd5d 	bl	80089e8 <iprintf>
}
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200132d4 	.word	0x200132d4
 8000f3c:	08009ca4 	.word	0x08009ca4
 8000f40:	08009ca8 	.word	0x08009ca8
 8000f44:	08009cac 	.word	0x08009cac
 8000f48:	08009cc0 	.word	0x08009cc0
 8000f4c:	08009cd8 	.word	0x08009cd8

08000f50 <show_date_time>:

// Prints the time and date in UART
void show_date_time(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char* time = showTime;
	static char* date = showDate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 fd3a 	bl	80089d8 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2214      	movs	r2, #20
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f007 fd34 	bl	80089d8 <memset>

	// Gets the time from the microcontroller's RTC
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	4619      	mov	r1, r3
 8000f76:	4821      	ldr	r0, [pc, #132]	; (8000ffc <show_date_time+0xac>)
 8000f78:	f002 fc88 	bl	800388c <HAL_RTC_GetTime>
	// Gets the date from the microcontroller's RTC
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	2200      	movs	r2, #0
 8000f82:	4619      	mov	r1, r3
 8000f84:	481d      	ldr	r0, [pc, #116]	; (8000ffc <show_date_time+0xac>)
 8000f86:	f002 fd86 	bl	8003a96 <HAL_RTC_GetDate>

	// Extracts the time format
	char* timeFormat;
	timeFormat = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <show_date_time+0x44>
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <show_date_time+0xb0>)
 8000f92:	e000      	b.n	8000f96 <show_date_time+0x46>
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <show_date_time+0xb4>)
 8000f96:	61fb      	str	r3, [r7, #28]

	// Displays the time in hh:mm:ss (AM/PM) by sending to queue
	sprintf((char*)showTime, "%s: \t%02d:%02d:%02d %s", "\nCurrent Time&Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, timeFormat);
 8000f98:	793b      	ldrb	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	797b      	ldrb	r3, [r7, #5]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	9101      	str	r1, [sp, #4]
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a16      	ldr	r2, [pc, #88]	; (8001008 <show_date_time+0xb8>)
 8000fb0:	4916      	ldr	r1, [pc, #88]	; (800100c <show_date_time+0xbc>)
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <show_date_time+0xc0>)
 8000fb4:	f007 fd30 	bl	8008a18 <siprintf>
	xQueueSend(q_data_print, (void*)&time, portMAX_DELAY);
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <show_date_time+0xc4>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc2:	4915      	ldr	r1, [pc, #84]	; (8001018 <show_date_time+0xc8>)
 8000fc4:	f004 fd38 	bl	8005a38 <xQueueGenericSend>

	// Displays the date in dd/mm/yyyy
	sprintf((char*)showDate, "\t%02d/%02d/%02d", rtc_date.Date, rtc_date.Month, 2000+rtc_date.Year);
 8000fc8:	7ebb      	ldrb	r3, [r7, #26]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7e7b      	ldrb	r3, [r7, #25]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	7efb      	ldrb	r3, [r7, #27]
 8000fd2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4910      	ldr	r1, [pc, #64]	; (800101c <show_date_time+0xcc>)
 8000fdc:	4810      	ldr	r0, [pc, #64]	; (8001020 <show_date_time+0xd0>)
 8000fde:	f007 fd1b 	bl	8008a18 <siprintf>
	xQueueSend(q_data_print, (void*)&date, portMAX_DELAY);
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <show_date_time+0xc4>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fec:	490d      	ldr	r1, [pc, #52]	; (8001024 <show_date_time+0xd4>)
 8000fee:	f004 fd23 	bl	8005a38 <xQueueGenericSend>

}
 8000ff2:	bf00      	nop
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200132d4 	.word	0x200132d4
 8001000:	08009ca4 	.word	0x08009ca4
 8001004:	08009ca8 	.word	0x08009ca8
 8001008:	08009cac 	.word	0x08009cac
 800100c:	08009cc0 	.word	0x08009cc0
 8001010:	200000ac 	.word	0x200000ac
 8001014:	20013300 	.word	0x20013300
 8001018:	20000008 	.word	0x20000008
 800101c:	08009cd8 	.word	0x08009cd8
 8001020:	200000d4 	.word	0x200000d4
 8001024:	2000000c 	.word	0x2000000c

08001028 <rtc_config_time>:

// Sets the time
void rtc_config_time(RTC_TimeTypeDef* time){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
//	time->TimeFormat = RTC_HOURFORMAT12_AM;
	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <rtc_config_time+0x1c>)
 8001036:	f002 fb6c 	bl	8003712 <HAL_RTC_SetTime>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200132d4 	.word	0x200132d4

08001048 <rtc_config_date>:

// Sets the date
void rtc_config_date(RTC_DateTypeDef* date){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <rtc_config_date+0x1c>)
 8001056:	f002 fc77 	bl	8003948 <HAL_RTC_SetDate>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200132d4 	.word	0x200132d4

08001068 <validate_rtc>:

// Validates the RTC information received from the user
int validate_rtc(RTC_TimeTypeDef* time, RTC_DateTypeDef* date){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	if (time){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00d      	beq.n	8001094 <validate_rtc+0x2c>
		if ((time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59)){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d807      	bhi.n	8001090 <validate_rtc+0x28>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	785b      	ldrb	r3, [r3, #1]
 8001084:	2b3b      	cmp	r3, #59	; 0x3b
 8001086:	d803      	bhi.n	8001090 <validate_rtc+0x28>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	789b      	ldrb	r3, [r3, #2]
 800108c:	2b3b      	cmp	r3, #59	; 0x3b
 800108e:	d901      	bls.n	8001094 <validate_rtc+0x2c>
			return 1;
 8001090:	2301      	movs	r3, #1
 8001092:	e015      	b.n	80010c0 <validate_rtc+0x58>
		}
	}
	if (date){
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d011      	beq.n	80010be <validate_rtc+0x56>
		if ((date->Date > 31) || (date->Month > 12) || (date->Year > 99) || (date->WeekDay > 7)){
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	789b      	ldrb	r3, [r3, #2]
 800109e:	2b1f      	cmp	r3, #31
 80010a0:	d80b      	bhi.n	80010ba <validate_rtc+0x52>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b0c      	cmp	r3, #12
 80010a8:	d807      	bhi.n	80010ba <validate_rtc+0x52>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	78db      	ldrb	r3, [r3, #3]
 80010ae:	2b63      	cmp	r3, #99	; 0x63
 80010b0:	d803      	bhi.n	80010ba <validate_rtc+0x52>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b07      	cmp	r3, #7
 80010b8:	d901      	bls.n	80010be <validate_rtc+0x56>
			return 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <validate_rtc+0x58>
		}
	}
	return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b098      	sub	sp, #96	; 0x60
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2258      	movs	r2, #88	; 0x58
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f007 fc53 	bl	80089d8 <memset>
  if(hrtc->Instance==RTC)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <HAL_RTC_MspInit+0x4c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d111      	bne.n	8001160 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800113c:	2308      	movs	r3, #8
 800113e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fd40 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001156:	f7ff fea7 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <HAL_RTC_MspInit+0x50>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3760      	adds	r7, #96	; 0x60
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40002800 	.word	0x40002800
 800116c:	42470e3c 	.word	0x42470e3c

08001170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_UART_MspInit+0x94>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d134      	bne.n	80011fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_UART_MspInit+0x98>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_UART_MspInit+0x98>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_UART_MspInit+0x98>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_UART_MspInit+0x98>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_UART_MspInit+0x98>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_UART_MspInit+0x98>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011dc:	2307      	movs	r3, #7
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4809      	ldr	r0, [pc, #36]	; (800120c <HAL_UART_MspInit+0x9c>)
 80011e8:	f000 ffb4 	bl	8002154 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2106      	movs	r1, #6
 80011f0:	2027      	movs	r0, #39	; 0x27
 80011f2:	f000 fef3 	bl	8001fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011f6:	2027      	movs	r0, #39	; 0x27
 80011f8:	f000 ff0c 	bl	8002014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40004800 	.word	0x40004800
 8001208:	40023800 	.word	0x40023800
 800120c:	40020c00 	.word	0x40020c00

08001210 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0a0      	sub	sp, #128	; 0x80
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2258      	movs	r2, #88	; 0x58
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f007 fbd1 	bl	80089d8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800123e:	d14d      	bne.n	80012dc <HAL_PCD_MspInit+0xcc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001240:	2320      	movs	r3, #32
 8001242:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001244:	2300      	movs	r3, #0
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fcbf 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8001258:	f7ff fe26 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_PCD_MspInit+0xd4>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <HAL_PCD_MspInit+0xd4>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_PCD_MspInit+0xd4>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001278:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800127c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800128a:	230a      	movs	r3, #10
 800128c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001292:	4619      	mov	r1, r3
 8001294:	4814      	ldr	r0, [pc, #80]	; (80012e8 <HAL_PCD_MspInit+0xd8>)
 8001296:	f000 ff5d 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800129a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012ac:	4619      	mov	r1, r3
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <HAL_PCD_MspInit+0xd8>)
 80012b0:	f000 ff50 	bl	8002154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_PCD_MspInit+0xd4>)
 80012b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_PCD_MspInit+0xd4>)
 80012ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012be:	6353      	str	r3, [r2, #52]	; 0x34
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_PCD_MspInit+0xd4>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_PCD_MspInit+0xd4>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ce:	6453      	str	r3, [r2, #68]	; 0x44
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_PCD_MspInit+0xd4>)
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3780      	adds	r7, #128	; 0x80
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	2036      	movs	r0, #54	; 0x36
 8001302:	f000 fe6b 	bl	8001fdc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001306:	2036      	movs	r0, #54	; 0x36
 8001308:	f000 fe84 	bl	8002014 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_InitTick+0xa4>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_InitTick+0xa4>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_InitTick+0xa4>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001328:	f107 0210 	add.w	r2, r7, #16
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fc1a 	bl	8002b6c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001338:	f001 fbf0 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 800133c:	4603      	mov	r3, r0
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_InitTick+0xa8>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9b      	lsrs	r3, r3, #18
 800134c:	3b01      	subs	r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_InitTick+0xac>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <HAL_InitTick+0xb0>)
 8001354:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_InitTick+0xac>)
 8001358:	f240 32e7 	movw	r2, #999	; 0x3e7
 800135c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_InitTick+0xac>)
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_InitTick+0xac>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_InitTick+0xac>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <HAL_InitTick+0xac>)
 8001372:	f002 fc6f 	bl	8003c54 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d104      	bne.n	8001386 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <HAL_InitTick+0xac>)
 800137e:	f002 fcc3 	bl	8003d08 <HAL_TIM_Base_Start_IT>
 8001382:	4603      	mov	r3, r0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3730      	adds	r7, #48	; 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	431bde83 	.word	0x431bde83
 8001398:	20013310 	.word	0x20013310
 800139c:	40001000 	.word	0x40001000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <USART3_IRQHandler+0x10>)
 80013d2:	f002 fffd 	bl	80043d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20012e80 	.word	0x20012e80

080013e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM6_DAC_IRQHandler+0x10>)
 80013e6:	f002 fcff 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20013310 	.word	0x20013310

080013f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00a      	b.n	800141c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001406:	f3af 8000 	nop.w
 800140a:	4601      	mov	r1, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf0      	blt.n	8001406 <_read+0x12>
	}

return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e009      	b.n	8001454 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	60ba      	str	r2, [r7, #8]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf1      	blt.n	8001440 <_write+0x12>
	}
	return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_close>:

int _close(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148e:	605a      	str	r2, [r3, #4]
	return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_isatty>:

int _isatty(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
	return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <menu_task_handler>:
int extract_command(command_t* cmd);
uint8_t getnumber(uint8_t*, uint8_t);

const char* invalid_msg = "\n//// Invalid Option ////\n";

void menu_task_handler(void* parameters){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t* cmd;
	uint8_t option;

	const char* main_menu_msg = "\n==================\n"
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <menu_task_handler+0xc8>)
 80014fe:	60bb      	str	r3, [r7, #8]
									"Date and Time ----> 1\n"
									"Exit ----> 2\n"
									"Enter your choice here: ";

	while(1){
		xQueueSend(q_data_print, &main_menu_msg, portMAX_DELAY);
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <menu_task_handler+0xcc>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	f107 0108 	add.w	r1, r7, #8
 8001508:	2300      	movs	r3, #0
 800150a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800150e:	f004 fa93 	bl	8005a38 <xQueueGenericSend>

		// Waits to receive notification from cmd_task_handler
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800151a:	9200      	str	r2, [sp, #0]
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2000      	movs	r0, #0
 8001522:	f005 ff17 	bl	8007354 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	617b      	str	r3, [r7, #20]
		if (cmd->length == 1){
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	7a9b      	ldrb	r3, [r3, #10]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d130      	bne.n	8001594 <menu_task_handler+0xa0>
			option = cmd->payload[0] - 48;	// ASCII to integer
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	3b30      	subs	r3, #48	; 0x30
 8001538:	74fb      	strb	r3, [r7, #19]

			switch(option){
 800153a:	7cfb      	ldrb	r3, [r7, #19]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d032      	beq.n	80015a6 <menu_task_handler+0xb2>
 8001540:	2b02      	cmp	r3, #2
 8001542:	dc1e      	bgt.n	8001582 <menu_task_handler+0x8e>
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <menu_task_handler+0x5a>
 8001548:	2b01      	cmp	r3, #1
 800154a:	d00d      	beq.n	8001568 <menu_task_handler+0x74>
 800154c:	e019      	b.n	8001582 <menu_task_handler+0x8e>
				case 0:
					current_state = state_LedEffect;
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <menu_task_handler+0xd0>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <menu_task_handler+0xd4>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	2300      	movs	r3, #0
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2300      	movs	r3, #0
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	f005 ff77 	bl	8007454 <xTaskGenericNotify>
					break;
 8001566:	e01f      	b.n	80015a8 <menu_task_handler+0xb4>

				case 1:
					current_state = state_RtcMenu;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <menu_task_handler+0xd0>)
 800156a:	2202      	movs	r2, #2
 800156c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <menu_task_handler+0xd8>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	2300      	movs	r3, #0
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	f005 ff6a 	bl	8007454 <xTaskGenericNotify>
					break;
 8001580:	e012      	b.n	80015a8 <menu_task_handler+0xb4>
				case 2:
					// Breaks to exit implementation
					break;

				default:
					xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <menu_task_handler+0xcc>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800158c:	4910      	ldr	r1, [pc, #64]	; (80015d0 <menu_task_handler+0xdc>)
 800158e:	f004 fa53 	bl	8005a38 <xQueueGenericSend>
					continue;//			else if (!strcmp((char*)cmd->payload, "exit")){
 8001592:	e012      	b.n	80015ba <menu_task_handler+0xc6>
					//			}
			}
		}
		else{
			// Invalid entry
			xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <menu_task_handler+0xcc>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159e:	490c      	ldr	r1, [pc, #48]	; (80015d0 <menu_task_handler+0xdc>)
 80015a0:	f004 fa4a 	bl	8005a38 <xQueueGenericSend>
 80015a4:	e000      	b.n	80015a8 <menu_task_handler+0xb4>
					break;
 80015a6:	bf00      	nop
		}

		// Exit implementation of main menu is to wait and go back to while loop
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2000      	movs	r0, #0
 80015b6:	f005 fecd 	bl	8007354 <xTaskGenericNotifyWait>
		xQueueSend(q_data_print, &main_menu_msg, portMAX_DELAY);
 80015ba:	e7a1      	b.n	8001500 <menu_task_handler+0xc>
 80015bc:	08009d04 	.word	0x08009d04
 80015c0:	20013300 	.word	0x20013300
 80015c4:	200000a8 	.word	0x200000a8
 80015c8:	200132f8 	.word	0x200132f8
 80015cc:	20012e78 	.word	0x20012e78
 80015d0:	20000014 	.word	0x20000014

080015d4 <cmd_task_handler>:
	}
}

void cmd_task_handler(void* parameters){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af02      	add	r7, sp, #8
 80015da:	6078      	str	r0, [r7, #4]
	command_t cmd;


	while(1){
		// Waits for the notification from UART
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2300      	movs	r3, #0
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f005 feb3 	bl	8007354 <xTaskGenericNotifyWait>
 80015ee:	6178      	str	r0, [r7, #20]

		// Processes the received user data (command for other tasks) stored in the data_input_queue
		if (ret == pdTRUE){
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d1f2      	bne.n	80015dc <cmd_task_handler+0x8>
			process_command(&cmd);
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f802 	bl	8001604 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001600:	e7ec      	b.n	80015dc <cmd_task_handler+0x8>
	...

08001604 <process_command>:
		}

	}
}

void process_command(command_t* cmd){
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af02      	add	r7, sp, #8
 800160a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f83f 	bl	8001690 <extract_command>

	switch(current_state){
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <process_command+0x7c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d82c      	bhi.n	8001674 <process_command+0x70>
 800161a:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <process_command+0x1c>)
 800161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001620:	08001639 	.word	0x08001639
 8001624:	0800164d 	.word	0x0800164d
 8001628:	08001661 	.word	0x08001661
 800162c:	08001661 	.word	0x08001661
 8001630:	08001675 	.word	0x08001675
 8001634:	08001661 	.word	0x08001661
		// Sends notification to relevant task
		case state_MainMenu:
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <process_command+0x80>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	2300      	movs	r3, #0
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2303      	movs	r3, #3
 8001644:	2100      	movs	r1, #0
 8001646:	f005 ff05 	bl	8007454 <xTaskGenericNotify>
			break;
 800164a:	e014      	b.n	8001676 <process_command+0x72>

		case state_LedEffect:
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <process_command+0x84>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	2300      	movs	r3, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2303      	movs	r3, #3
 8001658:	2100      	movs	r1, #0
 800165a:	f005 fefb 	bl	8007454 <xTaskGenericNotify>
			break;
 800165e:	e00a      	b.n	8001676 <process_command+0x72>

		case state_RtcMenu:
		case state_RtcTimeConfig:
		case state_RtcReport:
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <process_command+0x88>)
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	2300      	movs	r3, #0
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2303      	movs	r3, #3
 800166c:	2100      	movs	r1, #0
 800166e:	f005 fef1 	bl	8007454 <xTaskGenericNotify>
			break;
 8001672:	e000      	b.n	8001676 <process_command+0x72>
		default:
			// do nothing
			break;
 8001674:	bf00      	nop
	}
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000a8 	.word	0x200000a8
 8001684:	200132d0 	.word	0x200132d0
 8001688:	200132f8 	.word	0x200132f8
 800168c:	20012e78 	.word	0x20012e78

08001690 <extract_command>:

int extract_command(command_t* cmd){
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	// Checks whether queue has any messages or not
	status = uxQueueMessagesWaiting(q_data_input);
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <extract_command+0x70>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fcf2 	bl	8006086 <uxQueueMessagesWaiting>
 80016a2:	4603      	mov	r3, r0
 80016a4:	613b      	str	r3, [r7, #16]
	if (!status){
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <extract_command+0x22>
		// Queue is empty
		return -1;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b0:	e022      	b.n	80016f8 <extract_command+0x68>
	}

	// Stores the received data as command in payload
	uint8_t i = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]
	do{
		status = xQueueReceive(q_data_input, &item, 0);
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <extract_command+0x70>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f107 010f 	add.w	r1, r7, #15
 80016be:	2200      	movs	r2, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fb69 	bl	8005d98 <xQueueReceive>
 80016c6:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE){
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d106      	bne.n	80016dc <extract_command+0x4c>
			cmd->payload[i++] = item;
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	75fa      	strb	r2, [r7, #23]
 80016d4:	461a      	mov	r2, r3
 80016d6:	7bf9      	ldrb	r1, [r7, #15]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\r');
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	2b0d      	cmp	r3, #13
 80016e0:	d1e9      	bne.n	80016b6 <extract_command+0x26>

	// Replace '\r' with '\0' and stores the length without '\r'
	cmd->payload[i-1] = '\0';
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	2100      	movs	r1, #0
 80016ea:	54d1      	strb	r1, [r2, r3]
	cmd->length = i-1;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	729a      	strb	r2, [r3, #10]

	return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20012e7c 	.word	0x20012e7c

08001704 <led_task_handler>:


void led_task_handler(void* parameters){
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af02      	add	r7, sp, #8
 800170a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t* cmd;

	const char* led_menu_msg = "==================\n"
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <led_task_handler+0xec>)
 800170e:	60fb      	str	r3, [r7, #12]
	// Waits for notification from main menu task initially
//	xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);

	while(1){
		// Waits for notification from main menu task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2000      	movs	r0, #0
 800171e:	f005 fe19 	bl	8007354 <xTaskGenericNotifyWait>

		// Print LED menu
		xQueueSend(q_data_print, &led_menu_msg, portMAX_DELAY);
 8001722:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <led_task_handler+0xf0>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	f107 010c 	add.w	r1, r7, #12
 800172a:	2300      	movs	r3, #0
 800172c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001730:	f004 f982 	bl	8005a38 <xQueueGenericSend>

		// Wait for LED command from user
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800173c:	9200      	str	r2, [sp, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2000      	movs	r0, #0
 8001744:	f005 fe06 	bl	8007354 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	617b      	str	r3, [r7, #20]

		if(cmd->length <= 4){
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	7a9b      	ldrb	r3, [r3, #10]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d837      	bhi.n	80017c4 <led_task_handler+0xc0>
			// Max length of user input characters can only be length of "none"
			if(!strcmp((char*)cmd->payload, "none")) {
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	4928      	ldr	r1, [pc, #160]	; (80017f8 <led_task_handler+0xf4>)
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fd61 	bl	8000220 <strcmp>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <led_task_handler+0x66>
				led_effect_stop();
 8001764:	f7fe ff40 	bl	80005e8 <led_effect_stop>
 8001768:	e034      	b.n	80017d4 <led_task_handler+0xd0>
			}
			else if(!strcmp((char*)cmd->payload, "e1")){
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	4923      	ldr	r1, [pc, #140]	; (80017fc <led_task_handler+0xf8>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fd56 	bl	8000220 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <led_task_handler+0x7e>
				led_effect(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f7fe ff64 	bl	8000648 <led_effect>
 8001780:	e028      	b.n	80017d4 <led_task_handler+0xd0>
			}
			else if(!strcmp((char*)cmd->payload, "e2")){
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	491e      	ldr	r1, [pc, #120]	; (8001800 <led_task_handler+0xfc>)
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fd4a 	bl	8000220 <strcmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <led_task_handler+0x96>
				led_effect(2);
 8001792:	2002      	movs	r0, #2
 8001794:	f7fe ff58 	bl	8000648 <led_effect>
 8001798:	e01c      	b.n	80017d4 <led_task_handler+0xd0>
			}
			else if(!strcmp((char*)cmd->payload, "e3")){
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	4919      	ldr	r1, [pc, #100]	; (8001804 <led_task_handler+0x100>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fd3e 	bl	8000220 <strcmp>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <led_task_handler+0xae>
				led_effect(3);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f7fe ff4c 	bl	8000648 <led_effect>
 80017b0:	e010      	b.n	80017d4 <led_task_handler+0xd0>
			}
			else{
				// Else print invalid message
				xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <led_task_handler+0xf0>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017bc:	4912      	ldr	r1, [pc, #72]	; (8001808 <led_task_handler+0x104>)
 80017be:	f004 f93b 	bl	8005a38 <xQueueGenericSend>
 80017c2:	e007      	b.n	80017d4 <led_task_handler+0xd0>
			}
		}
		else {
			// Print invalid message when user input length > 4
			xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <led_task_handler+0xf0>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	2300      	movs	r3, #0
 80017ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <led_task_handler+0x104>)
 80017d0:	f004 f932 	bl	8005a38 <xQueueGenericSend>
		}
		// Update the state variable
		current_state = state_MainMenu;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <led_task_handler+0x108>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]

		// Notify main menu task
		xTaskNotify(handle_menu_task, 0, eNoAction);
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <led_task_handler+0x10c>)
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	f005 fe34 	bl	8007454 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80017ec:	e790      	b.n	8001710 <led_task_handler+0xc>
 80017ee:	bf00      	nop
 80017f0:	08009d90 	.word	0x08009d90
 80017f4:	20013300 	.word	0x20013300
 80017f8:	08009df8 	.word	0x08009df8
 80017fc:	08009e00 	.word	0x08009e00
 8001800:	08009e04 	.word	0x08009e04
 8001804:	08009e08 	.word	0x08009e08
 8001808:	20000014 	.word	0x20000014
 800180c:	200000a8 	.word	0x200000a8
 8001810:	200132d0 	.word	0x200132d0

08001814 <getnumber>:
	}

}

// Converts the received number from ASCII to decimal
uint8_t getnumber(uint8_t* p, uint8_t len){
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
	if (len > 1){
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d90e      	bls.n	8001848 <getnumber+0x34>
		value = (p[0]-48)*10 + p[1]-48;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3301      	adds	r3, #1
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	b2db      	uxtb	r3, r3
 8001842:	3b10      	subs	r3, #16
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e003      	b.n	8001850 <getnumber+0x3c>
	}
	else{
		value = p[0]-48;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	3b30      	subs	r3, #48	; 0x30
 800184e:	73fb      	strb	r3, [r7, #15]
	}
	return value;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <rtc_task_handler>:

void rtc_task_handler(void* parameters){
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b09b      	sub	sp, #108	; 0x6c
 8001864:	af02      	add	r7, sp, #8
 8001866:	6078      	str	r0, [r7, #4]
	const char* rtc_msg = "==================\n"
 8001868:	4bb2      	ldr	r3, [pc, #712]	; (8001b34 <rtc_task_handler+0x2d4>)
 800186a:	657b      	str	r3, [r7, #84]	; 0x54
								"|       RTC       |\n"
								"===================\n";

	const char* rtc_menu_msg =	"\nConfigure Time    ------> 0\n"
 800186c:	4bb2      	ldr	r3, [pc, #712]	; (8001b38 <rtc_task_handler+0x2d8>)
 800186e:	653b      	str	r3, [r7, #80]	; 0x50
								"Configure Date    ------> 1\n"
								"Enable Reporting  ------> 2\n"
								"Exit              ------> 3\n"
								"Enter your choice here: ";

	const char* rtc_hour_msg = "Enter hour(1-12): ";
 8001870:	4bb2      	ldr	r3, [pc, #712]	; (8001b3c <rtc_task_handler+0x2dc>)
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* rtc_min_msg = "Enter minutes(0-59): ";
 8001874:	4bb2      	ldr	r3, [pc, #712]	; (8001b40 <rtc_task_handler+0x2e0>)
 8001876:	64bb      	str	r3, [r7, #72]	; 0x48
	const char* rtc_sec_msg = "Enter seconds(0-59): ";
 8001878:	4bb2      	ldr	r3, [pc, #712]	; (8001b44 <rtc_task_handler+0x2e4>)
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
	const char* rtc_timeFormat_msg = "Enter AM/PM: ";
 800187c:	4bb2      	ldr	r3, [pc, #712]	; (8001b48 <rtc_task_handler+0x2e8>)
 800187e:	643b      	str	r3, [r7, #64]	; 0x40

	const char* rtc_date_msg = "Enter date(1-31): ";
 8001880:	4bb2      	ldr	r3, [pc, #712]	; (8001b4c <rtc_task_handler+0x2ec>)
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
	const char* rtc_month_msg = "Enter month(1-12): ";
 8001884:	4bb2      	ldr	r3, [pc, #712]	; (8001b50 <rtc_task_handler+0x2f0>)
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38
	const char* rtc_dow_msg = "Enter day of week(1-7 Sun=1): ";
 8001888:	4bb2      	ldr	r3, [pc, #712]	; (8001b54 <rtc_task_handler+0x2f4>)
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
	const char* rtc_year_msg = "Enter year(0-99): ";
 800188c:	4bb2      	ldr	r3, [pc, #712]	; (8001b58 <rtc_task_handler+0x2f8>)
 800188e:	633b      	str	r3, [r7, #48]	; 0x30

	const char* rtc_msg_config = "Configuration Successful";
 8001890:	4bb2      	ldr	r3, [pc, #712]	; (8001b5c <rtc_task_handler+0x2fc>)
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char* rtc_msg_report = "Enable time&date reporting(y/n)? ";
 8001894:	4bb2      	ldr	r3, [pc, #712]	; (8001b60 <rtc_task_handler+0x300>)
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_DateTypeDef rtc_date;
//	char* str = "dummy";

	while(1){
		// Waits for notification from main menu task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2300      	movs	r3, #0
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	2000      	movs	r0, #0
 80018a6:	f005 fd55 	bl	8007354 <xTaskGenericNotifyWait>

		// Print RTC menu and show current time and date information
		xQueueSend(q_data_print, &rtc_msg, portMAX_DELAY);
 80018aa:	4bae      	ldr	r3, [pc, #696]	; (8001b64 <rtc_task_handler+0x304>)
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80018b2:	2300      	movs	r3, #0
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b8:	f004 f8be 	bl	8005a38 <xQueueGenericSend>
		show_date_time();
 80018bc:	f7ff fb48 	bl	8000f50 <show_date_time>
		xQueueSend(q_data_print, &rtc_menu_msg, portMAX_DELAY);
 80018c0:	4ba8      	ldr	r3, [pc, #672]	; (8001b64 <rtc_task_handler+0x304>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80018c8:	2300      	movs	r3, #0
 80018ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ce:	f004 f8b3 	bl	8005a38 <xQueueGenericSend>

		while (current_state != state_MainMenu){
 80018d2:	e1fd      	b.n	8001cd0 <rtc_task_handler+0x470>
			// Wait for RTC command from user
			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018dc:	9200      	str	r2, [sp, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2000      	movs	r0, #0
 80018e4:	f005 fd36 	bl	8007354 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(current_state){
 80018ec:	4b9e      	ldr	r3, [pc, #632]	; (8001b68 <rtc_task_handler+0x308>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	3b02      	subs	r3, #2
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	f200 81eb 	bhi.w	8001cce <rtc_task_handler+0x46e>
 80018f8:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <rtc_task_handler+0xa0>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001911 	.word	0x08001911
 8001904:	080019c3 	.word	0x080019c3
 8001908:	08001ae9 	.word	0x08001ae9
 800190c:	08001c41 	.word	0x08001c41
				case state_RtcMenu:
					// Sets the current_state to RTC menu options based on user input
					// Takes care of invalid inputs from the user
					if (cmd->length == 1){
 8001910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001912:	7a9b      	ldrb	r3, [r3, #10]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d148      	bne.n	80019aa <rtc_task_handler+0x14a>
						menu_code = cmd->payload[0] - 48;
 8001918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	3b30      	subs	r3, #48	; 0x30
 800191e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001922:	2b03      	cmp	r3, #3
 8001924:	d835      	bhi.n	8001992 <rtc_task_handler+0x132>
 8001926:	a201      	add	r2, pc, #4	; (adr r2, 800192c <rtc_task_handler+0xcc>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	0800193d 	.word	0x0800193d
 8001930:	08001957 	.word	0x08001957
 8001934:	08001971 	.word	0x08001971
 8001938:	0800198b 	.word	0x0800198b
						switch(menu_code){
							case 0:
								current_state = state_RtcTimeConfig;
 800193c:	4b8a      	ldr	r3, [pc, #552]	; (8001b68 <rtc_task_handler+0x308>)
 800193e:	2203      	movs	r2, #3
 8001940:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_data_print, &rtc_hour_msg, portMAX_DELAY);
 8001942:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <rtc_task_handler+0x304>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800194a:	2300      	movs	r3, #0
 800194c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001950:	f004 f872 	bl	8005a38 <xQueueGenericSend>
								break;
 8001954:	e034      	b.n	80019c0 <rtc_task_handler+0x160>
							case 1:
								current_state = state_RtcDateConfig;
 8001956:	4b84      	ldr	r3, [pc, #528]	; (8001b68 <rtc_task_handler+0x308>)
 8001958:	2204      	movs	r2, #4
 800195a:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_data_print, &rtc_date_msg, portMAX_DELAY);
 800195c:	4b81      	ldr	r3, [pc, #516]	; (8001b64 <rtc_task_handler+0x304>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001964:	2300      	movs	r3, #0
 8001966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800196a:	f004 f865 	bl	8005a38 <xQueueGenericSend>
								break;
 800196e:	e027      	b.n	80019c0 <rtc_task_handler+0x160>
							case 2:
								current_state = state_RtcReport;
 8001970:	4b7d      	ldr	r3, [pc, #500]	; (8001b68 <rtc_task_handler+0x308>)
 8001972:	2205      	movs	r2, #5
 8001974:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_data_print, &rtc_msg_report, portMAX_DELAY);
 8001976:	4b7b      	ldr	r3, [pc, #492]	; (8001b64 <rtc_task_handler+0x304>)
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800197e:	2300      	movs	r3, #0
 8001980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001984:	f004 f858 	bl	8005a38 <xQueueGenericSend>
								break;
 8001988:	e01a      	b.n	80019c0 <rtc_task_handler+0x160>
							case 3:
								current_state = state_MainMenu;
 800198a:	4b77      	ldr	r3, [pc, #476]	; (8001b68 <rtc_task_handler+0x308>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
								break;
 8001990:	e016      	b.n	80019c0 <rtc_task_handler+0x160>
							default:
								current_state = state_MainMenu;
 8001992:	4b75      	ldr	r3, [pc, #468]	; (8001b68 <rtc_task_handler+0x308>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 8001998:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <rtc_task_handler+0x304>)
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	2300      	movs	r3, #0
 800199e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019a2:	4972      	ldr	r1, [pc, #456]	; (8001b6c <rtc_task_handler+0x30c>)
 80019a4:	f004 f848 	bl	8005a38 <xQueueGenericSend>
								break;
 80019a8:	e00a      	b.n	80019c0 <rtc_task_handler+0x160>
						}
					}
					else {
						current_state = state_MainMenu;
 80019aa:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <rtc_task_handler+0x308>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 80019b0:	4b6c      	ldr	r3, [pc, #432]	; (8001b64 <rtc_task_handler+0x304>)
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	2300      	movs	r3, #0
 80019b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ba:	496c      	ldr	r1, [pc, #432]	; (8001b6c <rtc_task_handler+0x30c>)
 80019bc:	f004 f83c 	bl	8005a38 <xQueueGenericSend>
					}
					break;
 80019c0:	e186      	b.n	8001cd0 <rtc_task_handler+0x470>

				case state_RtcTimeConfig:
					switch (rtc_time_state){
 80019c2:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <rtc_task_handler+0x310>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	f200 808c 	bhi.w	8001ae4 <rtc_task_handler+0x284>
 80019cc:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <rtc_task_handler+0x174>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	08001a11 	.word	0x08001a11
 80019dc:	08001a3d 	.word	0x08001a3d
 80019e0:	08001a69 	.word	0x08001a69
					// Gets the previously asked hh input from the user
					// Gets min and ss input from the user
					// Invalid cases are considered
						case HH_CONFIG:
							rtc_time.Hours = getnumber(cmd->payload, cmd->length);
 80019e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e8:	7a9b      	ldrb	r3, [r3, #10]
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f7ff ff11 	bl	8001814 <getnumber>
 80019f2:	4603      	mov	r3, r0
 80019f4:	743b      	strb	r3, [r7, #16]
							rtc_time_state = MM_CONFIG;
 80019f6:	4b5e      	ldr	r3, [pc, #376]	; (8001b70 <rtc_task_handler+0x310>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
							xQueueSend(q_data_print, &rtc_min_msg, portMAX_DELAY);
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <rtc_task_handler+0x304>)
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001a04:	2300      	movs	r3, #0
 8001a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a0a:	f004 f815 	bl	8005a38 <xQueueGenericSend>
							break;
 8001a0e:	e06a      	b.n	8001ae6 <rtc_task_handler+0x286>

						case MM_CONFIG:
							rtc_time.Minutes = getnumber(cmd->payload, cmd->length);
 8001a10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a14:	7a9b      	ldrb	r3, [r3, #10]
 8001a16:	4619      	mov	r1, r3
 8001a18:	4610      	mov	r0, r2
 8001a1a:	f7ff fefb 	bl	8001814 <getnumber>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	747b      	strb	r3, [r7, #17]
							rtc_time_state = SS_CONFIG;
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <rtc_task_handler+0x310>)
 8001a24:	2202      	movs	r2, #2
 8001a26:	601a      	str	r2, [r3, #0]
							xQueueSend(q_data_print, &rtc_sec_msg, portMAX_DELAY);
 8001a28:	4b4e      	ldr	r3, [pc, #312]	; (8001b64 <rtc_task_handler+0x304>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001a30:	2300      	movs	r3, #0
 8001a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a36:	f003 ffff 	bl	8005a38 <xQueueGenericSend>
							break;
 8001a3a:	e054      	b.n	8001ae6 <rtc_task_handler+0x286>

						case SS_CONFIG:
							rtc_time.Seconds = getnumber(cmd->payload, cmd->length);
 8001a3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a40:	7a9b      	ldrb	r3, [r3, #10]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4610      	mov	r0, r2
 8001a46:	f7ff fee5 	bl	8001814 <getnumber>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	74bb      	strb	r3, [r7, #18]
							rtc_time_state = TIME_FORMAT_CONFIG;
 8001a4e:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <rtc_task_handler+0x310>)
 8001a50:	2203      	movs	r2, #3
 8001a52:	601a      	str	r2, [r3, #0]
							xQueueSend(q_data_print, &rtc_timeFormat_msg, portMAX_DELAY);
 8001a54:	4b43      	ldr	r3, [pc, #268]	; (8001b64 <rtc_task_handler+0x304>)
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a62:	f003 ffe9 	bl	8005a38 <xQueueGenericSend>
							break;
 8001a66:	e03e      	b.n	8001ae6 <rtc_task_handler+0x286>

						case TIME_FORMAT_CONFIG:
							if (!strcmp((char*)cmd->payload, "AM")){
 8001a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6a:	4942      	ldr	r1, [pc, #264]	; (8001b74 <rtc_task_handler+0x314>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fbd7 	bl	8000220 <strcmp>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <rtc_task_handler+0x21e>
								rtc_time.TimeFormat = RTC_HOURFORMAT12_AM;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	74fb      	strb	r3, [r7, #19]
 8001a7c:	e009      	b.n	8001a92 <rtc_task_handler+0x232>
							}
							else if (!strcmp((char*)cmd->payload, "PM")){
 8001a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a80:	493d      	ldr	r1, [pc, #244]	; (8001b78 <rtc_task_handler+0x318>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fbcc 	bl	8000220 <strcmp>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <rtc_task_handler+0x232>
								rtc_time.TimeFormat = RTC_HOURFORMAT12_PM;
 8001a8e:	2340      	movs	r3, #64	; 0x40
 8001a90:	74fb      	strb	r3, [r7, #19]
							}
							if (!validate_rtc(&rtc_time, NULL)){
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fae5 	bl	8001068 <validate_rtc>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d110      	bne.n	8001ac6 <rtc_task_handler+0x266>
								rtc_config_time(&rtc_time);
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fabd 	bl	8001028 <rtc_config_time>
								xQueueSend(q_data_print, &rtc_msg_config, portMAX_DELAY);
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <rtc_task_handler+0x304>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001abc:	f003 ffbc 	bl	8005a38 <xQueueGenericSend>
								show_date_time();
 8001ac0:	f7ff fa46 	bl	8000f50 <show_date_time>
 8001ac4:	e00a      	b.n	8001adc <rtc_task_handler+0x27c>
							}
							else {
								xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 8001ac6:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <rtc_task_handler+0x304>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	2300      	movs	r3, #0
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad0:	4926      	ldr	r1, [pc, #152]	; (8001b6c <rtc_task_handler+0x30c>)
 8001ad2:	f003 ffb1 	bl	8005a38 <xQueueGenericSend>
								rtc_time_state = 0;
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <rtc_task_handler+0x310>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
							}
							current_state = state_MainMenu;
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <rtc_task_handler+0x308>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
							break;
 8001ae2:	e000      	b.n	8001ae6 <rtc_task_handler+0x286>

						default:
							// do nothing
							break;
 8001ae4:	bf00      	nop
					}
					break;
 8001ae6:	e0f3      	b.n	8001cd0 <rtc_task_handler+0x470>

				case state_RtcDateConfig:
					switch (rtc_date_state){
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <rtc_task_handler+0x31c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	f200 80a5 	bhi.w	8001c3c <rtc_task_handler+0x3dc>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <rtc_task_handler+0x298>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b81 	.word	0x08001b81
 8001b00:	08001bd9 	.word	0x08001bd9
 8001b04:	08001bad 	.word	0x08001bad
					// Gets the previously asked date input from the user
					// Gets mm and yy input from the user
					// Invalid cases are considered
						case DATE_CONFIG:
							rtc_date.Date = getnumber(cmd->payload, cmd->length);
 8001b08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0c:	7a9b      	ldrb	r3, [r3, #10]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4610      	mov	r0, r2
 8001b12:	f7ff fe7f 	bl	8001814 <getnumber>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73bb      	strb	r3, [r7, #14]
							rtc_date_state = MONTH_CONFIG;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <rtc_task_handler+0x31c>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
							xQueueSend(q_data_print, &rtc_month_msg, portMAX_DELAY);
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <rtc_task_handler+0x304>)
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b2e:	f003 ff83 	bl	8005a38 <xQueueGenericSend>
							break;
 8001b32:	e084      	b.n	8001c3e <rtc_task_handler+0x3de>
 8001b34:	08009e0c 	.word	0x08009e0c
 8001b38:	08009e48 	.word	0x08009e48
 8001b3c:	08009ed4 	.word	0x08009ed4
 8001b40:	08009ee8 	.word	0x08009ee8
 8001b44:	08009f00 	.word	0x08009f00
 8001b48:	08009f18 	.word	0x08009f18
 8001b4c:	08009f28 	.word	0x08009f28
 8001b50:	08009f3c 	.word	0x08009f3c
 8001b54:	08009f50 	.word	0x08009f50
 8001b58:	08009f70 	.word	0x08009f70
 8001b5c:	08009f84 	.word	0x08009f84
 8001b60:	08009fa0 	.word	0x08009fa0
 8001b64:	20013300 	.word	0x20013300
 8001b68:	200000a8 	.word	0x200000a8
 8001b6c:	20000014 	.word	0x20000014
 8001b70:	200000fc 	.word	0x200000fc
 8001b74:	08009fc4 	.word	0x08009fc4
 8001b78:	08009fc8 	.word	0x08009fc8
 8001b7c:	20000100 	.word	0x20000100

						case MONTH_CONFIG:
							rtc_date.Month = getnumber(cmd->payload, cmd->length);
 8001b80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b84:	7a9b      	ldrb	r3, [r3, #10]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4610      	mov	r0, r2
 8001b8a:	f7ff fe43 	bl	8001814 <getnumber>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	737b      	strb	r3, [r7, #13]
							rtc_date_state = DAY_CONFIG;
 8001b92:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <rtc_task_handler+0x490>)
 8001b94:	2203      	movs	r2, #3
 8001b96:	601a      	str	r2, [r3, #0]
							xQueueSend(q_data_print, &rtc_dow_msg, portMAX_DELAY);
 8001b98:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <rtc_task_handler+0x494>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba6:	f003 ff47 	bl	8005a38 <xQueueGenericSend>
							break;
 8001baa:	e048      	b.n	8001c3e <rtc_task_handler+0x3de>

						case DAY_CONFIG:
							rtc_date.WeekDay = getnumber(cmd->payload, cmd->length);
 8001bac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb0:	7a9b      	ldrb	r3, [r3, #10]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	f7ff fe2d 	bl	8001814 <getnumber>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	733b      	strb	r3, [r7, #12]
							rtc_date_state = YEAR_CONFIG;
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <rtc_task_handler+0x490>)
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	601a      	str	r2, [r3, #0]
							xQueueSend(q_data_print, &rtc_year_msg, portMAX_DELAY);
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <rtc_task_handler+0x494>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bd2:	f003 ff31 	bl	8005a38 <xQueueGenericSend>
							break;
 8001bd6:	e032      	b.n	8001c3e <rtc_task_handler+0x3de>

						case YEAR_CONFIG:
							rtc_date.Year = getnumber(cmd->payload, cmd->length);
 8001bd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bdc:	7a9b      	ldrb	r3, [r3, #10]
 8001bde:	4619      	mov	r1, r3
 8001be0:	4610      	mov	r0, r2
 8001be2:	f7ff fe17 	bl	8001814 <getnumber>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
							if (!validate_rtc(NULL, &rtc_date)){
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	4619      	mov	r1, r3
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fa39 	bl	8001068 <validate_rtc>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d110      	bne.n	8001c1e <rtc_task_handler+0x3be>
								rtc_config_date(&rtc_date);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fa21 	bl	8001048 <rtc_config_date>
								xQueueSend(q_data_print, &rtc_msg_config, portMAX_DELAY);
 8001c06:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <rtc_task_handler+0x494>)
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c14:	f003 ff10 	bl	8005a38 <xQueueGenericSend>
								show_date_time();
 8001c18:	f7ff f99a 	bl	8000f50 <show_date_time>
 8001c1c:	e00a      	b.n	8001c34 <rtc_task_handler+0x3d4>
							}
							else {
								xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 8001c1e:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <rtc_task_handler+0x494>)
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c28:	4933      	ldr	r1, [pc, #204]	; (8001cf8 <rtc_task_handler+0x498>)
 8001c2a:	f003 ff05 	bl	8005a38 <xQueueGenericSend>
								rtc_date_state = 0;
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <rtc_task_handler+0x490>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
							}
							current_state = state_MainMenu;
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <rtc_task_handler+0x49c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
							break;
 8001c3a:	e000      	b.n	8001c3e <rtc_task_handler+0x3de>

						default:
							// do nothing
							break;
 8001c3c:	bf00      	nop
					}
					break;
 8001c3e:	e047      	b.n	8001cd0 <rtc_task_handler+0x470>

				case state_RtcReport:
					// Start rtc_timer when user input is 'y' else stop
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	482e      	ldr	r0, [pc, #184]	; (8001d00 <rtc_task_handler+0x4a0>)
 8001c46:	f000 fc19 	bl	800247c <HAL_GPIO_WritePin>
					if (cmd->length == 1){
 8001c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c4c:	7a9b      	ldrb	r3, [r3, #10]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d131      	bne.n	8001cb6 <rtc_task_handler+0x456>
						if (cmd->payload[0] == 'y'){
 8001c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b79      	cmp	r3, #121	; 0x79
 8001c58:	d135      	bne.n	8001cc6 <rtc_task_handler+0x466>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE){
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <rtc_task_handler+0x4a4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 fa22 	bl	80080a8 <xTimerIsTimerActive>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <rtc_task_handler+0x426>
								xTimerStart(rtc_timer, portMAX_DELAY);
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <rtc_task_handler+0x4a4>)
 8001c6c:	681c      	ldr	r4, [r3, #0]
 8001c6e:	f004 fea7 	bl	80069c0 <xTaskGetTickCount>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f005 ff72 	bl	8007b68 <xTimerGenericCommand>
 8001c84:	e01f      	b.n	8001cc6 <rtc_task_handler+0x466>
							}
							else if(cmd->payload[0] == 'n'){
 8001c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b6e      	cmp	r3, #110	; 0x6e
 8001c8c:	d10a      	bne.n	8001ca4 <rtc_task_handler+0x444>
								xTimerStop(rtc_timer, portMAX_DELAY);
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <rtc_task_handler+0x4a4>)
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	f005 ff63 	bl	8007b68 <xTimerGenericCommand>
 8001ca2:	e010      	b.n	8001cc6 <rtc_task_handler+0x466>
							}
							else {
								xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <rtc_task_handler+0x494>)
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cae:	4912      	ldr	r1, [pc, #72]	; (8001cf8 <rtc_task_handler+0x498>)
 8001cb0:	f003 fec2 	bl	8005a38 <xQueueGenericSend>
 8001cb4:	e007      	b.n	8001cc6 <rtc_task_handler+0x466>
							}
						}
					}
					else{
						xQueueSend(q_data_print, &invalid_msg, portMAX_DELAY);
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <rtc_task_handler+0x494>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc0:	490d      	ldr	r1, [pc, #52]	; (8001cf8 <rtc_task_handler+0x498>)
 8001cc2:	f003 feb9 	bl	8005a38 <xQueueGenericSend>
					}
					current_state = state_MainMenu;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <rtc_task_handler+0x49c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
					break;
 8001ccc:	e000      	b.n	8001cd0 <rtc_task_handler+0x470>

				default:
					// do nothing
					break;
 8001cce:	bf00      	nop
		while (current_state != state_MainMenu){
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <rtc_task_handler+0x49c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f47f adfd 	bne.w	80018d4 <rtc_task_handler+0x74>
			} // main switch ends

		} // current_state while loop ends

		// Notifies main menu task
		xTaskNotify(handle_menu_task, 0, eNoAction);
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <rtc_task_handler+0x4a8>)
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f005 fbb4 	bl	8007454 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001cec:	e5d4      	b.n	8001898 <rtc_task_handler+0x38>
 8001cee:	bf00      	nop
 8001cf0:	20000100 	.word	0x20000100
 8001cf4:	20013300 	.word	0x20013300
 8001cf8:	20000014 	.word	0x20000014
 8001cfc:	200000a8 	.word	0x200000a8
 8001d00:	40020400 	.word	0x40020400
 8001d04:	20012e74 	.word	0x20012e74
 8001d08:	200132d0 	.word	0x200132d0

08001d0c <print_task_handler>:

	} // main while loop ends
}

void print_task_handler(void* parameters){
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	uint32_t* msg;
	while(1){
		xQueueReceive(q_data_print, &msg, portMAX_DELAY);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <print_task_handler+0x38>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f107 010c 	add.w	r1, r7, #12
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 f839 	bl	8005d98 <xQueueReceive>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001d26:	68fc      	ldr	r4, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fa82 	bl	8000234 <strlen>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d38:	4621      	mov	r1, r4
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <print_task_handler+0x3c>)
 8001d3c:	f002 fa85 	bl	800424a <HAL_UART_Transmit>
		xQueueReceive(q_data_print, &msg, portMAX_DELAY);
 8001d40:	e7e8      	b.n	8001d14 <print_task_handler+0x8>
 8001d42:	bf00      	nop
 8001d44:	20013300 	.word	0x20013300
 8001d48:	20012e80 	.word	0x20012e80

08001d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d52:	490e      	ldr	r1, [pc, #56]	; (8001d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d66:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d68:	4c0b      	ldr	r4, [pc, #44]	; (8001d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d76:	f7ff fbab 	bl	80014d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f006 fdfb 	bl	8008974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7e:	f7fe fdcd 	bl	800091c <main>
  bx  lr    
 8001d82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d84:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001d90:	0800a0a4 	.word	0x0800a0a4
  ldr r2, =_sbss
 8001d94:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001d98:	200133ac 	.word	0x200133ac

08001d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_Init+0x40>)
 8001daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_Init+0x40>)
 8001db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_Init+0x40>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 f8fc 	bl	8001fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dce:	200f      	movs	r0, #15
 8001dd0:	f7ff fa8c 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd4:	f7ff f97a 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023c00 	.word	0x40023c00

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	2000001c 	.word	0x2000001c
 8001e08:	20013358 	.word	0x20013358

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20013358 	.word	0x20013358

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000001c 	.word	0x2000001c

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ff4c 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fee:	f7ff ff61 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ff2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	6978      	ldr	r0, [r7, #20]
 8001ffa:	f7ff ffb1 	bl	8001f60 <NVIC_EncodePriority>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff80 	bl	8001f0c <__NVIC_SetPriority>
}
 800200c:	bf00      	nop
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff54 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800203e:	f7ff fee5 	bl	8001e0c <HAL_GetTick>
 8002042:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d008      	beq.n	8002062 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e052      	b.n	8002108 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0216 	bic.w	r2, r2, #22
 8002070:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002080:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d103      	bne.n	8002092 <HAL_DMA_Abort+0x62>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0208 	bic.w	r2, r2, #8
 80020a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b2:	e013      	b.n	80020dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020b4:	f7ff feaa 	bl	8001e0c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d90c      	bls.n	80020dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e015      	b.n	8002108 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1e4      	bne.n	80020b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	223f      	movs	r2, #63	; 0x3f
 80020f0:	409a      	lsls	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d004      	beq.n	800212e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00c      	b.n	8002148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2205      	movs	r2, #5
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e165      	b.n	800243c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002170:	2201      	movs	r2, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	f040 8154 	bne.w	8002436 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d005      	beq.n	80021a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d130      	bne.n	8002208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0201 	and.w	r2, r3, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b03      	cmp	r3, #3
 8002212:	d017      	beq.n	8002244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d123      	bne.n	8002298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	08da      	lsrs	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3208      	adds	r2, #8
 8002258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	69b9      	ldr	r1, [r7, #24]
 8002294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0203 	and.w	r2, r3, #3
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80ae 	beq.w	8002436 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b5d      	ldr	r3, [pc, #372]	; (8002454 <HAL_GPIO_Init+0x300>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a5c      	ldr	r2, [pc, #368]	; (8002454 <HAL_GPIO_Init+0x300>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <HAL_GPIO_Init+0x300>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f6:	4a58      	ldr	r2, [pc, #352]	; (8002458 <HAL_GPIO_Init+0x304>)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3302      	adds	r3, #2
 80022fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4f      	ldr	r2, [pc, #316]	; (800245c <HAL_GPIO_Init+0x308>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d025      	beq.n	800236e <HAL_GPIO_Init+0x21a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4e      	ldr	r2, [pc, #312]	; (8002460 <HAL_GPIO_Init+0x30c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01f      	beq.n	800236a <HAL_GPIO_Init+0x216>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4d      	ldr	r2, [pc, #308]	; (8002464 <HAL_GPIO_Init+0x310>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d019      	beq.n	8002366 <HAL_GPIO_Init+0x212>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4c      	ldr	r2, [pc, #304]	; (8002468 <HAL_GPIO_Init+0x314>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_GPIO_Init+0x20e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4b      	ldr	r2, [pc, #300]	; (800246c <HAL_GPIO_Init+0x318>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00d      	beq.n	800235e <HAL_GPIO_Init+0x20a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4a      	ldr	r2, [pc, #296]	; (8002470 <HAL_GPIO_Init+0x31c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <HAL_GPIO_Init+0x206>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a49      	ldr	r2, [pc, #292]	; (8002474 <HAL_GPIO_Init+0x320>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_GPIO_Init+0x202>
 8002352:	2306      	movs	r3, #6
 8002354:	e00c      	b.n	8002370 <HAL_GPIO_Init+0x21c>
 8002356:	2307      	movs	r3, #7
 8002358:	e00a      	b.n	8002370 <HAL_GPIO_Init+0x21c>
 800235a:	2305      	movs	r3, #5
 800235c:	e008      	b.n	8002370 <HAL_GPIO_Init+0x21c>
 800235e:	2304      	movs	r3, #4
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x21c>
 8002362:	2303      	movs	r3, #3
 8002364:	e004      	b.n	8002370 <HAL_GPIO_Init+0x21c>
 8002366:	2302      	movs	r3, #2
 8002368:	e002      	b.n	8002370 <HAL_GPIO_Init+0x21c>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x21c>
 800236e:	2300      	movs	r3, #0
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f002 0203 	and.w	r2, r2, #3
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	4093      	lsls	r3, r2
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002380:	4935      	ldr	r1, [pc, #212]	; (8002458 <HAL_GPIO_Init+0x304>)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238e:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_GPIO_Init+0x324>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b2:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_GPIO_Init+0x324>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023b8:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_GPIO_Init+0x324>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <HAL_GPIO_Init+0x324>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e2:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_GPIO_Init+0x324>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_GPIO_Init+0x324>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_GPIO_Init+0x324>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002430:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_GPIO_Init+0x324>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	f67f ae96 	bls.w	8002170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40013800 	.word	0x40013800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020400 	.word	0x40020400
 8002464:	40020800 	.word	0x40020800
 8002468:	40020c00 	.word	0x40020c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40021400 	.word	0x40021400
 8002474:	40021800 	.word	0x40021800
 8002478:	40013c00 	.word	0x40013c00

0800247c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002498:	e003      	b.n	80024a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800249a:	887b      	ldrh	r3, [r7, #2]
 800249c:	041a      	lsls	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	619a      	str	r2, [r3, #24]
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024c0:	887a      	ldrh	r2, [r7, #2]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4013      	ands	r3, r2
 80024c6:	041a      	lsls	r2, r3, #16
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	400b      	ands	r3, r1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	619a      	str	r2, [r3, #24]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e4:	b08f      	sub	sp, #60	; 0x3c
 80024e6:	af0a      	add	r7, sp, #40	; 0x28
 80024e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e116      	b.n	8002722 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fe7e 	bl	8001210 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2203      	movs	r2, #3
 8002518:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fe75 	bl	8005222 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	687e      	ldr	r6, [r7, #4]
 8002540:	466d      	mov	r5, sp
 8002542:	f106 0410 	add.w	r4, r6, #16
 8002546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002552:	e885 0003 	stmia.w	r5, {r0, r1}
 8002556:	1d33      	adds	r3, r6, #4
 8002558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255a:	6838      	ldr	r0, [r7, #0]
 800255c:	f002 fe00 	bl	8005160 <USB_CoreInit>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2202      	movs	r2, #2
 800256a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0d7      	b.n	8002722 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f002 fe63 	bl	8005244 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	e04a      	b.n	800261a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	333d      	adds	r3, #61	; 0x3d
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	333c      	adds	r3, #60	; 0x3c
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	b298      	uxth	r0, r3
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3342      	adds	r3, #66	; 0x42
 80025c0:	4602      	mov	r2, r0
 80025c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	333f      	adds	r3, #63	; 0x3f
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3344      	adds	r3, #68	; 0x44
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3348      	adds	r3, #72	; 0x48
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3350      	adds	r3, #80	; 0x50
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	3301      	adds	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	d3af      	bcc.n	8002584 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e044      	b.n	80026b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	3301      	adds	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d3b5      	bcc.n	800262a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	687e      	ldr	r6, [r7, #4]
 80026c6:	466d      	mov	r5, sp
 80026c8:	f106 0410 	add.w	r4, r6, #16
 80026cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026dc:	1d33      	adds	r3, r6, #4
 80026de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026e0:	6838      	ldr	r0, [r7, #0]
 80026e2:	f002 fdfb 	bl	80052dc <USB_DevInit>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e014      	b.n	8002722 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2b01      	cmp	r3, #1
 800270e:	d102      	bne.n	8002716 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f80a 	bl	800272a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f002 ff99 	bl	8005652 <USB_DevDisconnect>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800272a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	f043 0303 	orr.w	r3, r3, #3
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0cc      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b68      	ldr	r3, [pc, #416]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d90c      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b65      	ldr	r3, [pc, #404]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0b8      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a58      	ldr	r2, [pc, #352]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a52      	ldr	r2, [pc, #328]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ec:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d044      	beq.n	8002894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d119      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e07f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d003      	beq.n	8002832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282e:	2b03      	cmp	r3, #3
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	4b3f      	ldr	r3, [pc, #252]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e06f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002842:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e067      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002852:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f023 0203 	bic.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4934      	ldr	r1, [pc, #208]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002864:	f7ff fad2 	bl	8001e0c <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	e00a      	b.n	8002882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7ff face 	bl	8001e0c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e04f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 020c 	and.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	d1eb      	bne.n	800286c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d20c      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e032      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4916      	ldr	r1, [pc, #88]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028fa:	f000 f821 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fce6 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023c00 	.word	0x40023c00
 8002930:	40023800 	.word	0x40023800
 8002934:	08009fe4 	.word	0x08009fe4
 8002938:	20000010 	.word	0x20000010
 800293c:	20000018 	.word	0x20000018

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	2300      	movs	r3, #0
 8002952:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002958:	4b67      	ldr	r3, [pc, #412]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d00d      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x40>
 8002964:	2b08      	cmp	r3, #8
 8002966:	f200 80bd 	bhi.w	8002ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x34>
 800296e:	2b04      	cmp	r3, #4
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x3a>
 8002972:	e0b7      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002976:	60bb      	str	r3, [r7, #8]
       break;
 8002978:	e0b7      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800297a:	4b61      	ldr	r3, [pc, #388]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800297c:	60bb      	str	r3, [r7, #8]
      break;
 800297e:	e0b4      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002980:	4b5d      	ldr	r3, [pc, #372]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002988:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298a:	4b5b      	ldr	r3, [pc, #364]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d04d      	beq.n	8002a32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002996:	4b58      	ldr	r3, [pc, #352]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	461a      	mov	r2, r3
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	ea02 0800 	and.w	r8, r2, r0
 80029ae:	ea03 0901 	and.w	r9, r3, r1
 80029b2:	4640      	mov	r0, r8
 80029b4:	4649      	mov	r1, r9
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	014b      	lsls	r3, r1, #5
 80029c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029c4:	0142      	lsls	r2, r0, #5
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	ebb0 0008 	subs.w	r0, r0, r8
 80029ce:	eb61 0109 	sbc.w	r1, r1, r9
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	018b      	lsls	r3, r1, #6
 80029dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029e0:	0182      	lsls	r2, r0, #6
 80029e2:	1a12      	subs	r2, r2, r0
 80029e4:	eb63 0301 	sbc.w	r3, r3, r1
 80029e8:	f04f 0000 	mov.w	r0, #0
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	00d9      	lsls	r1, r3, #3
 80029f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029f6:	00d0      	lsls	r0, r2, #3
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	eb12 0208 	adds.w	r2, r2, r8
 8002a00:	eb43 0309 	adc.w	r3, r3, r9
 8002a04:	f04f 0000 	mov.w	r0, #0
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	0259      	lsls	r1, r3, #9
 8002a0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a12:	0250      	lsls	r0, r2, #9
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	f7fd fc64 	bl	80002f0 <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e04a      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	ea02 0400 	and.w	r4, r2, r0
 8002a4a:	ea03 0501 	and.w	r5, r3, r1
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	014b      	lsls	r3, r1, #5
 8002a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a60:	0142      	lsls	r2, r0, #5
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	1b00      	subs	r0, r0, r4
 8002a68:	eb61 0105 	sbc.w	r1, r1, r5
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	018b      	lsls	r3, r1, #6
 8002a76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a7a:	0182      	lsls	r2, r0, #6
 8002a7c:	1a12      	subs	r2, r2, r0
 8002a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	00d9      	lsls	r1, r3, #3
 8002a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a90:	00d0      	lsls	r0, r2, #3
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	1912      	adds	r2, r2, r4
 8002a98:	eb45 0303 	adc.w	r3, r5, r3
 8002a9c:	f04f 0000 	mov.w	r0, #0
 8002aa0:	f04f 0100 	mov.w	r1, #0
 8002aa4:	0299      	lsls	r1, r3, #10
 8002aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aaa:	0290      	lsls	r0, r2, #10
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	f7fd fc18 	bl	80002f0 <__aeabi_uldivmod>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	60bb      	str	r3, [r7, #8]
      break;
 8002ae2:	e002      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ae6:	60bb      	str	r3, [r7, #8]
      break;
 8002ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aea:	68bb      	ldr	r3, [r7, #8]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	00f42400 	.word	0x00f42400
 8002b00:	007a1200 	.word	0x007a1200

08002b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000010 	.word	0x20000010

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b20:	f7ff fff0 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0a9b      	lsrs	r3, r3, #10
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4903      	ldr	r1, [pc, #12]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	08009ff4 	.word	0x08009ff4

08002b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b48:	f7ff ffdc 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	0b5b      	lsrs	r3, r3, #13
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	08009ff4 	.word	0x08009ff4

08002b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	220f      	movs	r2, #15
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_RCC_GetClockConfig+0x60>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0207 	and.w	r2, r3, #7
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40023c00 	.word	0x40023c00

08002bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002bf4:	4b7a      	ldr	r3, [pc, #488]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	4977      	ldr	r1, [pc, #476]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d010      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c22:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c28:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	496b      	ldr	r1, [pc, #428]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8002c40:	2301      	movs	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d022      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8002c50:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	4960      	ldr	r1, [pc, #384]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002c7c:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	4954      	ldr	r1, [pc, #336]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d022      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002ca2:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	494b      	ldr	r1, [pc, #300]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002cce:	4b44      	ldr	r3, [pc, #272]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	493f      	ldr	r1, [pc, #252]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 808a 	beq.w	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a38      	ldr	r2, [pc, #224]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
 8002d06:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d12:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d1e:	f7ff f875 	bl	8001e0c <HAL_GetTick>
 8002d22:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7ff f871 	bl	8001e0c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1d1      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02f      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d028      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d78:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d114      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7ff f83f 	bl	8001e0c <HAL_GetTick>
 8002d8e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7ff f83b 	bl	8001e0c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e199      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ee      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc0:	d114      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd6:	4902      	ldr	r1, [pc, #8]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]
 8002ddc:	e00c      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40007000 	.word	0x40007000
 8002de8:	42470e40 	.word	0x42470e40
 8002dec:	4b89      	ldr	r3, [pc, #548]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a88      	ldr	r2, [pc, #544]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002df2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002df6:	6093      	str	r3, [r2, #8]
 8002df8:	4b86      	ldr	r3, [pc, #536]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	4983      	ldr	r1, [pc, #524]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002e1c:	4b7e      	ldr	r3, [pc, #504]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002e1e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e2c:	4b79      	ldr	r3, [pc, #484]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	4976      	ldr	r1, [pc, #472]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d011      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e4e:	4b71      	ldr	r3, [pc, #452]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	496d      	ldr	r1, [pc, #436]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002e7e:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	4961      	ldr	r1, [pc, #388]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d004      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	f040 80c6 	bne.w	8003030 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ea4:	4b5d      	ldr	r3, [pc, #372]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eaa:	f7fe ffaf 	bl	8001e0c <HAL_GetTick>
 8002eae:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002eb2:	f7fe ffab 	bl	8001e0c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e10b      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ec4:	4b53      	ldr	r3, [pc, #332]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002ed0:	4a53      	ldr	r2, [pc, #332]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d019      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f14:	d00e      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d115      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f32:	d110      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	4931      	ldr	r1, [pc, #196]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d026      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d122      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f7e:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f84:	0e1b      	lsrs	r3, r3, #24
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	431a      	orrs	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	061b      	lsls	r3, r3, #24
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	071b      	lsls	r3, r3, #28
 8002fa4:	491b      	ldr	r1, [pc, #108]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb2:	f023 021f 	bic.w	r2, r3, #31
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	4915      	ldr	r1, [pc, #84]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	490a      	ldr	r1, [pc, #40]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe ff08 	bl	8001e0c <HAL_GetTick>
 8002ffc:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ffe:	e011      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003000:	f7fe ff04 	bl	8001e0c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d90a      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e064      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	424711e0 	.word	0x424711e0
 800301c:	42470068 	.word	0x42470068
 8003020:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003024:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0e7      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800303e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003042:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	4926      	ldr	r1, [pc, #152]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003064:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	491d      	ldr	r1, [pc, #116]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003086:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308e:	4915      	ldr	r1, [pc, #84]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	490c      	ldr	r1, [pc, #48]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80030c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4904      	ldr	r1, [pc, #16]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e270      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d075      	beq.n	80031f2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003106:	4ba3      	ldr	r3, [pc, #652]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b04      	cmp	r3, #4
 8003110:	d00c      	beq.n	800312c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003112:	4ba0      	ldr	r3, [pc, #640]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800311a:	2b08      	cmp	r3, #8
 800311c:	d112      	bne.n	8003144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800311e:	4b9d      	ldr	r3, [pc, #628]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800312a:	d10b      	bne.n	8003144 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	4b99      	ldr	r3, [pc, #612]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d05b      	beq.n	80031f0 <HAL_RCC_OscConfig+0x108>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d157      	bne.n	80031f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e24b      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d106      	bne.n	800315c <HAL_RCC_OscConfig+0x74>
 800314e:	4b91      	ldr	r3, [pc, #580]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a90      	ldr	r2, [pc, #576]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e01d      	b.n	8003198 <HAL_RCC_OscConfig+0xb0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x98>
 8003166:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a8a      	ldr	r2, [pc, #552]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a87      	ldr	r2, [pc, #540]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e00b      	b.n	8003198 <HAL_RCC_OscConfig+0xb0>
 8003180:	4b84      	ldr	r3, [pc, #528]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a83      	ldr	r2, [pc, #524]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b81      	ldr	r3, [pc, #516]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a80      	ldr	r2, [pc, #512]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fe34 	bl	8001e0c <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fe fe30 	bl	8001e0c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e210      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	4b76      	ldr	r3, [pc, #472]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0xc0>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe fe20 	bl	8001e0c <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe fe1c 	bl	8001e0c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e1fc      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	4b6c      	ldr	r3, [pc, #432]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0xe8>
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d063      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320a:	4b62      	ldr	r3, [pc, #392]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003212:	2b08      	cmp	r3, #8
 8003214:	d11c      	bne.n	8003250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003216:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d116      	bne.n	8003250 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003222:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_RCC_OscConfig+0x152>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e1d0      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b56      	ldr	r3, [pc, #344]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4952      	ldr	r1, [pc, #328]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324e:	e03a      	b.n	80032c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d020      	beq.n	800329a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003258:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <HAL_RCC_OscConfig+0x2b0>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fe fdd5 	bl	8001e0c <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003266:	f7fe fdd1 	bl	8001e0c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1b1      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	4b46      	ldr	r3, [pc, #280]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003284:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4940      	ldr	r1, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]
 8003298:	e015      	b.n	80032c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_OscConfig+0x2b0>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe fdb4 	bl	8001e0c <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a8:	f7fe fdb0 	bl	8001e0c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e190      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d030      	beq.n	8003334 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_OscConfig+0x2b4>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe fd94 	bl	8001e0c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fe fd90 	bl	8001e0c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e170      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x200>
 8003306:	e015      	b.n	8003334 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_RCC_OscConfig+0x2b4>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fd7d 	bl	8001e0c <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003316:	f7fe fd79 	bl	8001e0c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e159      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a0 	beq.w	8003482 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_OscConfig+0x2b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d121      	bne.n	80033c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <HAL_RCC_OscConfig+0x2b8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <HAL_RCC_OscConfig+0x2b8>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338a:	f7fe fd3f 	bl	8001e0c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e011      	b.n	80033b6 <HAL_RCC_OscConfig+0x2ce>
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	42470000 	.word	0x42470000
 800339c:	42470e80 	.word	0x42470e80
 80033a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a4:	f7fe fd32 	bl	8001e0c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e112      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b8b      	ldr	r3, [pc, #556]	; (80035e4 <HAL_RCC_OscConfig+0x4fc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d106      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
 80033ca:	4b87      	ldr	r3, [pc, #540]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a86      	ldr	r2, [pc, #536]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	e01c      	b.n	8003412 <HAL_RCC_OscConfig+0x32a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d10c      	bne.n	80033fa <HAL_RCC_OscConfig+0x312>
 80033e0:	4b81      	ldr	r3, [pc, #516]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a80      	ldr	r2, [pc, #512]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	4b7e      	ldr	r3, [pc, #504]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a7d      	ldr	r2, [pc, #500]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	e00b      	b.n	8003412 <HAL_RCC_OscConfig+0x32a>
 80033fa:	4b7b      	ldr	r3, [pc, #492]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a7a      	ldr	r2, [pc, #488]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	4b78      	ldr	r3, [pc, #480]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a77      	ldr	r2, [pc, #476]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 800340c:	f023 0304 	bic.w	r3, r3, #4
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d015      	beq.n	8003446 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fe fcf7 	bl	8001e0c <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003420:	e00a      	b.n	8003438 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003422:	f7fe fcf3 	bl	8001e0c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003430:	4293      	cmp	r3, r2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e0d1      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003438:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ee      	beq.n	8003422 <HAL_RCC_OscConfig+0x33a>
 8003444:	e014      	b.n	8003470 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fe fce1 	bl	8001e0c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fe fcdd 	bl	8001e0c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0bb      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003464:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1ee      	bne.n	800344e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003476:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a5b      	ldr	r2, [pc, #364]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 800347c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80a7 	beq.w	80035da <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800348c:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b08      	cmp	r3, #8
 8003496:	d060      	beq.n	800355a <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d145      	bne.n	800352c <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a0:	4b52      	ldr	r3, [pc, #328]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fe fcb1 	bl	8001e0c <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fcad 	bl	8001e0c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e08d      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c0:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	019b      	lsls	r3, r3, #6
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	3b01      	subs	r3, #1
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	061b      	lsls	r3, r3, #24
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	071b      	lsls	r3, r3, #28
 80034f8:	493b      	ldr	r1, [pc, #236]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fe:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe fc82 	bl	8001e0c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350c:	f7fe fc7e 	bl	8001e0c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e05e      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x424>
 800352a:	e056      	b.n	80035da <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352c:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fe fc6b 	bl	8001e0c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353a:	f7fe fc67 	bl	8001e0c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e047      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354c:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f0      	bne.n	800353a <HAL_RCC_OscConfig+0x452>
 8003558:	e03f      	b.n	80035da <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e03a      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_RCC_OscConfig+0x500>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d030      	beq.n	80035d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d129      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d122      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003596:	4013      	ands	r3, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800359c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800359e:	4293      	cmp	r3, r2
 80035a0:	d119      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	3b01      	subs	r3, #1
 80035b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d10f      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40007000 	.word	0x40007000
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470060 	.word	0x42470060

080035f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e083      	b.n	800370a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7f5b      	ldrb	r3, [r3, #29]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fd82 	bl	800111c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	22ca      	movs	r2, #202	; 0xca
 8003624:	625a      	str	r2, [r3, #36]	; 0x24
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2253      	movs	r2, #83	; 0x53
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 faa8 	bl	8003b84 <RTC_EnterInitMode>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	22ff      	movs	r2, #255	; 0xff
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2204      	movs	r2, #4
 8003646:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e05e      	b.n	800370a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800365a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68d2      	ldr	r2, [r2, #12]
 8003686:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6919      	ldr	r1, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	041a      	lsls	r2, r3, #16
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10e      	bne.n	80036d8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa3a 	bl	8003b34 <HAL_RTC_WaitForSynchro>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	22ff      	movs	r2, #255	; 0xff
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2204      	movs	r2, #4
 80036d2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e018      	b.n	800370a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	22ff      	movs	r2, #255	; 0xff
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003712:	b590      	push	{r4, r7, lr}
 8003714:	b087      	sub	sp, #28
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	7f1b      	ldrb	r3, [r3, #28]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_RTC_SetTime+0x1c>
 800372a:	2302      	movs	r3, #2
 800372c:	e0aa      	b.n	8003884 <HAL_RTC_SetTime+0x172>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2202      	movs	r2, #2
 8003738:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d126      	bne.n	800378e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2200      	movs	r2, #0
 8003752:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fa3f 	bl	8003bdc <RTC_ByteToBcd2>
 800375e:	4603      	mov	r3, r0
 8003760:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	785b      	ldrb	r3, [r3, #1]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fa38 	bl	8003bdc <RTC_ByteToBcd2>
 800376c:	4603      	mov	r3, r0
 800376e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003770:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	789b      	ldrb	r3, [r3, #2]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fa30 	bl	8003bdc <RTC_ByteToBcd2>
 800377c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800377e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	78db      	ldrb	r3, [r3, #3]
 8003786:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e018      	b.n	80037c0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2200      	movs	r2, #0
 80037a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	785b      	ldrb	r3, [r3, #1]
 80037ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037ae:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80037b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	78db      	ldrb	r3, [r3, #3]
 80037ba:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	22ca      	movs	r2, #202	; 0xca
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2253      	movs	r2, #83	; 0x53
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f9d7 	bl	8003b84 <RTC_EnterInitMode>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	22ff      	movs	r2, #255	; 0xff
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2204      	movs	r2, #4
 80037e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e047      	b.n	8003884 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003802:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003812:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6899      	ldr	r1, [r3, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	431a      	orrs	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800383a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d111      	bne.n	800386e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f972 	bl	8003b34 <HAL_RTC_WaitForSynchro>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	22ff      	movs	r2, #255	; 0xff
 800385c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2204      	movs	r2, #4
 8003862:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e00a      	b.n	8003884 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	22ff      	movs	r2, #255	; 0xff
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003882:	2300      	movs	r3, #0
  }
}
 8003884:	4618      	mov	r0, r3
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	bd90      	pop	{r4, r7, pc}

0800388c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80038be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d11a      	bne.n	800393e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f983 	bl	8003c18 <RTC_Bcd2ToByte>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f97a 	bl	8003c18 <RTC_Bcd2ToByte>
 8003924:	4603      	mov	r3, r0
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	789b      	ldrb	r3, [r3, #2]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f971 	bl	8003c18 <RTC_Bcd2ToByte>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	7f1b      	ldrb	r3, [r3, #28]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_RTC_SetDate+0x1c>
 8003960:	2302      	movs	r3, #2
 8003962:	e094      	b.n	8003a8e <HAL_RTC_SetDate+0x146>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2202      	movs	r2, #2
 800396e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10e      	bne.n	8003994 <HAL_RTC_SetDate+0x4c>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	f023 0310 	bic.w	r3, r3, #16
 800398a:	b2db      	uxtb	r3, r3
 800398c:	330a      	adds	r3, #10
 800398e:	b2da      	uxtb	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d11c      	bne.n	80039d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	78db      	ldrb	r3, [r3, #3]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f91c 	bl	8003bdc <RTC_ByteToBcd2>
 80039a4:	4603      	mov	r3, r0
 80039a6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	785b      	ldrb	r3, [r3, #1]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f915 	bl	8003bdc <RTC_ByteToBcd2>
 80039b2:	4603      	mov	r3, r0
 80039b4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80039b6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	789b      	ldrb	r3, [r3, #2]
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f90d 	bl	8003bdc <RTC_ByteToBcd2>
 80039c2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80039c4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e00e      	b.n	80039f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	78db      	ldrb	r3, [r3, #3]
 80039d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039e0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80039e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	22ca      	movs	r2, #202	; 0xca
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2253      	movs	r2, #83	; 0x53
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f8be 	bl	8003b84 <RTC_EnterInitMode>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	22ff      	movs	r2, #255	; 0xff
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2204      	movs	r2, #4
 8003a1a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e033      	b.n	8003a8e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a34:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a44:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d111      	bne.n	8003a78 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f86d 	bl	8003b34 <HAL_RTC_WaitForSynchro>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00b      	beq.n	8003a78 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	22ff      	movs	r2, #255	; 0xff
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e00a      	b.n	8003a8e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd90      	pop	{r4, r7, pc}

08003a96 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ab0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	0b5b      	lsrs	r3, r3, #13
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d11a      	bne.n	8003b2a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	78db      	ldrb	r3, [r3, #3]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 f88d 	bl	8003c18 <RTC_Bcd2ToByte>
 8003afe:	4603      	mov	r3, r0
 8003b00:	461a      	mov	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f884 	bl	8003c18 <RTC_Bcd2ToByte>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	789b      	ldrb	r3, [r3, #2]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f87b 	bl	8003c18 <RTC_Bcd2ToByte>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b50:	f7fe f95c 	bl	8001e0c <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b56:	e009      	b.n	8003b6c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b58:	f7fe f958 	bl	8001e0c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b66:	d901      	bls.n	8003b6c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e007      	b.n	8003b7c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ee      	beq.n	8003b58 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d119      	bne.n	8003bd2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ba6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba8:	f7fe f930 	bl	8001e0c <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003bae:	e009      	b.n	8003bc4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003bb0:	f7fe f92c 	bl	8001e0c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bbe:	d901      	bls.n	8003bc4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e007      	b.n	8003bd4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ee      	beq.n	8003bb0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003bea:	e005      	b.n	8003bf8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	3b0a      	subs	r3, #10
 8003bf6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	2b09      	cmp	r3, #9
 8003bfc:	d8f6      	bhi.n	8003bec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b2db      	uxtb	r3, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	b2db      	uxtb	r3, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e041      	b.n	8003cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f839 	bl	8003cf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f000 f9d8 	bl	8004048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d001      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e04e      	b.n	8003dbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a23      	ldr	r2, [pc, #140]	; (8003dcc <HAL_TIM_Base_Start_IT+0xc4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d022      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x80>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d01d      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x80>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x80>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x80>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x80>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <HAL_TIM_Base_Start_IT+0xd4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x80>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x80>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d111      	bne.n	8003dac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d010      	beq.n	8003dbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	e007      	b.n	8003dbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40010400 	.word	0x40010400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40001800 	.word	0x40001800

08003de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0202 	mvn.w	r2, #2
 8003e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8ee 	bl	800400c <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8e0 	bl	8003ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8f1 	bl	8004020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0204 	mvn.w	r2, #4
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f8c4 	bl	800400c <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f8b6 	bl	8003ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8c7 	bl	8004020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d122      	bne.n	8003eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d11b      	bne.n	8003eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0208 	mvn.w	r2, #8
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f89a 	bl	800400c <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f88c 	bl	8003ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f89d 	bl	8004020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d122      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d11b      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0210 	mvn.w	r2, #16
 8003f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2208      	movs	r2, #8
 8003f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f870 	bl	800400c <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e005      	b.n	8003f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f862 	bl	8003ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f873 	bl	8004020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10e      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d107      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0201 	mvn.w	r2, #1
 8003f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fc ff8c 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f76:	2b80      	cmp	r3, #128	; 0x80
 8003f78:	d10e      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f84:	2b80      	cmp	r3, #128	; 0x80
 8003f86:	d107      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f902 	bl	800419c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f838 	bl	8004034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d107      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0220 	mvn.w	r2, #32
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8cc 	bl	8004188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a40      	ldr	r2, [pc, #256]	; (800415c <TIM_Base_SetConfig+0x114>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d013      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004066:	d00f      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3d      	ldr	r2, [pc, #244]	; (8004160 <TIM_Base_SetConfig+0x118>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00b      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3c      	ldr	r2, [pc, #240]	; (8004164 <TIM_Base_SetConfig+0x11c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d007      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3b      	ldr	r2, [pc, #236]	; (8004168 <TIM_Base_SetConfig+0x120>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a3a      	ldr	r2, [pc, #232]	; (800416c <TIM_Base_SetConfig+0x124>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d108      	bne.n	800409a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a2f      	ldr	r2, [pc, #188]	; (800415c <TIM_Base_SetConfig+0x114>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d02b      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a8:	d027      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2c      	ldr	r2, [pc, #176]	; (8004160 <TIM_Base_SetConfig+0x118>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d023      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2b      	ldr	r2, [pc, #172]	; (8004164 <TIM_Base_SetConfig+0x11c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01f      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <TIM_Base_SetConfig+0x120>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01b      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a29      	ldr	r2, [pc, #164]	; (800416c <TIM_Base_SetConfig+0x124>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d017      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a28      	ldr	r2, [pc, #160]	; (8004170 <TIM_Base_SetConfig+0x128>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a27      	ldr	r2, [pc, #156]	; (8004174 <TIM_Base_SetConfig+0x12c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00f      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a26      	ldr	r2, [pc, #152]	; (8004178 <TIM_Base_SetConfig+0x130>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00b      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a25      	ldr	r2, [pc, #148]	; (800417c <TIM_Base_SetConfig+0x134>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a24      	ldr	r2, [pc, #144]	; (8004180 <TIM_Base_SetConfig+0x138>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a23      	ldr	r2, [pc, #140]	; (8004184 <TIM_Base_SetConfig+0x13c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d108      	bne.n	800410c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a0a      	ldr	r2, [pc, #40]	; (800415c <TIM_Base_SetConfig+0x114>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_Base_SetConfig+0xf8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a0c      	ldr	r2, [pc, #48]	; (800416c <TIM_Base_SetConfig+0x124>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d103      	bne.n	8004148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	615a      	str	r2, [r3, #20]
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40000c00 	.word	0x40000c00
 800416c:	40010400 	.word	0x40010400
 8004170:	40014000 	.word	0x40014000
 8004174:	40014400 	.word	0x40014400
 8004178:	40014800 	.word	0x40014800
 800417c:	40001800 	.word	0x40001800
 8004180:	40001c00 	.word	0x40001c00
 8004184:	40002000 	.word	0x40002000

08004188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e03f      	b.n	8004242 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fc ffca 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2224      	movs	r2, #36	; 0x24
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fddb 	bl	8004db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b08a      	sub	sp, #40	; 0x28
 800424e:	af02      	add	r7, sp, #8
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	4613      	mov	r3, r2
 8004258:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b20      	cmp	r3, #32
 8004268:	d17c      	bne.n	8004364 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_UART_Transmit+0x2c>
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e075      	b.n	8004366 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_UART_Transmit+0x3e>
 8004284:	2302      	movs	r3, #2
 8004286:	e06e      	b.n	8004366 <HAL_UART_Transmit+0x11c>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2221      	movs	r2, #33	; 0x21
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800429e:	f7fd fdb5 	bl	8001e0c <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	88fa      	ldrh	r2, [r7, #6]
 80042ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d108      	bne.n	80042cc <HAL_UART_Transmit+0x82>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d104      	bne.n	80042cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	e003      	b.n	80042d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042dc:	e02a      	b.n	8004334 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	2180      	movs	r1, #128	; 0x80
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fb1f 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e036      	b.n	8004366 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800430c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	3302      	adds	r3, #2
 8004312:	61bb      	str	r3, [r7, #24]
 8004314:	e007      	b.n	8004326 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	3301      	adds	r3, #1
 8004324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1cf      	bne.n	80042de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	2140      	movs	r1, #64	; 0x40
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 faef 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e006      	b.n	8004366 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	e000      	b.n	8004366 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004364:	2302      	movs	r3, #2
  }
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	4613      	mov	r3, r2
 800437a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b20      	cmp	r3, #32
 8004386:	d11d      	bne.n	80043c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_UART_Receive_IT+0x26>
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e016      	b.n	80043c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Receive_IT+0x38>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e00f      	b.n	80043c6 <HAL_UART_Receive_IT+0x58>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fb24 	bl	8004a08 <UART_Start_Receive_IT>
 80043c0:	4603      	mov	r3, r0
 80043c2:	e000      	b.n	80043c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b0ba      	sub	sp, #232	; 0xe8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800440e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_UART_IRQHandler+0x66>
 8004422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fc03 	bl	8004c3a <UART_Receive_IT>
      return;
 8004434:	e256      	b.n	80048e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80de 	beq.w	80045fc <HAL_UART_IRQHandler+0x22c>
 8004440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004450:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80d1 	beq.w	80045fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800445a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_UART_IRQHandler+0xae>
 8004466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f043 0201 	orr.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_UART_IRQHandler+0xd2>
 800448a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f043 0202 	orr.w	r2, r3, #2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <HAL_UART_IRQHandler+0xf6>
 80044ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f043 0204 	orr.w	r2, r3, #4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d011      	beq.n	80044f6 <HAL_UART_IRQHandler+0x126>
 80044d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d105      	bne.n	80044ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f043 0208 	orr.w	r2, r3, #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 81ed 	beq.w	80048da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_UART_IRQHandler+0x14e>
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fb8e 	bl	8004c3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <HAL_UART_IRQHandler+0x17a>
 8004542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d04f      	beq.n	80045ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fa96 	bl	8004a7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d141      	bne.n	80045e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3314      	adds	r3, #20
 8004586:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800458a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800458e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1d9      	bne.n	800455e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d013      	beq.n	80045da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	4a7d      	ldr	r2, [pc, #500]	; (80047ac <HAL_UART_IRQHandler+0x3dc>)
 80045b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fd fda6 	bl	8002110 <HAL_DMA_Abort_IT>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d016      	beq.n	80045f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d4:	4610      	mov	r0, r2
 80045d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	e00e      	b.n	80045f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f990 	bl	8004900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	e00a      	b.n	80045f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f98c 	bl	8004900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e8:	e006      	b.n	80045f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f988 	bl	8004900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045f6:	e170      	b.n	80048da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	bf00      	nop
    return;
 80045fa:	e16e      	b.n	80048da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	2b01      	cmp	r3, #1
 8004602:	f040 814a 	bne.w	800489a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8143 	beq.w	800489a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 813c 	beq.w	800489a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60bb      	str	r3, [r7, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	f040 80b4 	bne.w	80047b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004654:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8140 	beq.w	80048de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004666:	429a      	cmp	r2, r3
 8004668:	f080 8139 	bcs.w	80048de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004672:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467e:	f000 8088 	beq.w	8004792 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800469c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1d9      	bne.n	8004682 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e1      	bne.n	80046ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800471a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3314      	adds	r3, #20
 800472a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800472e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004730:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004734:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800473c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e3      	bne.n	800470a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004762:	f023 0310 	bic.w	r3, r3, #16
 8004766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004774:	65ba      	str	r2, [r7, #88]	; 0x58
 8004776:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800477a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e3      	bne.n	8004750 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	4618      	mov	r0, r3
 800478e:	f7fd fc4f 	bl	8002030 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800479a:	b29b      	uxth	r3, r3
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8b6 	bl	8004914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047a8:	e099      	b.n	80048de <HAL_UART_IRQHandler+0x50e>
 80047aa:	bf00      	nop
 80047ac:	08004b43 	.word	0x08004b43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 808b 	beq.w	80048e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8086 	beq.w	80048e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047fa:	647a      	str	r2, [r7, #68]	; 0x44
 80047fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e3      	bne.n	80047d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	623b      	str	r3, [r7, #32]
   return(result);
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004832:	633a      	str	r2, [r7, #48]	; 0x30
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e3      	bne.n	800480e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	60fb      	str	r3, [r7, #12]
   return(result);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0310 	bic.w	r3, r3, #16
 800486a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004878:	61fa      	str	r2, [r7, #28]
 800487a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	69b9      	ldr	r1, [r7, #24]
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	617b      	str	r3, [r7, #20]
   return(result);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e3      	bne.n	8004854 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800488c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f83e 	bl	8004914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004898:	e023      	b.n	80048e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_UART_IRQHandler+0x4ea>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f959 	bl	8004b6a <UART_Transmit_IT>
    return;
 80048b8:	e014      	b.n	80048e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <HAL_UART_IRQHandler+0x514>
 80048c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f999 	bl	8004c0a <UART_EndTransmit_IT>
    return;
 80048d8:	e004      	b.n	80048e4 <HAL_UART_IRQHandler+0x514>
    return;
 80048da:	bf00      	nop
 80048dc:	e002      	b.n	80048e4 <HAL_UART_IRQHandler+0x514>
      return;
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <HAL_UART_IRQHandler+0x514>
      return;
 80048e2:	bf00      	nop
  }
}
 80048e4:	37e8      	adds	r7, #232	; 0xe8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop

080048ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b090      	sub	sp, #64	; 0x40
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493c:	e050      	b.n	80049e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004944:	d04c      	beq.n	80049e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0x30>
 800494c:	f7fd fa5e 	bl	8001e0c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004958:	429a      	cmp	r2, r3
 800495a:	d241      	bcs.n	80049e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800497c:	637a      	str	r2, [r7, #52]	; 0x34
 800497e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e5      	bne.n	800495c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	613b      	str	r3, [r7, #16]
   return(result);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b0:	623a      	str	r2, [r7, #32]
 80049b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	6a3a      	ldr	r2, [r7, #32]
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e00f      	b.n	8004a00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d09f      	beq.n	800493e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3740      	adds	r7, #64	; 0x40
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2222      	movs	r2, #34	; 0x22
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a4c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0220 	orr.w	r2, r2, #32
 8004a6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b095      	sub	sp, #84	; 0x54
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aa4:	643a      	str	r2, [r7, #64]	; 0x40
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3314      	adds	r3, #20
 8004abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3314      	adds	r3, #20
 8004ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e5      	bne.n	8004ab8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d119      	bne.n	8004b28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 0310 	bic.w	r3, r3, #16
 8004b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b14:	61ba      	str	r2, [r7, #24]
 8004b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6979      	ldr	r1, [r7, #20]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	613b      	str	r3, [r7, #16]
   return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e5      	bne.n	8004af4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b36:	bf00      	nop
 8004b38:	3754      	adds	r7, #84	; 0x54
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff fecf 	bl	8004900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b21      	cmp	r3, #33	; 0x21
 8004b7c:	d13e      	bne.n	8004bfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b86:	d114      	bne.n	8004bb2 <UART_Transmit_IT+0x48>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d110      	bne.n	8004bb2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	1c9a      	adds	r2, r3, #2
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	621a      	str	r2, [r3, #32]
 8004bb0:	e008      	b.n	8004bc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	1c59      	adds	r1, r3, #1
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6211      	str	r1, [r2, #32]
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10f      	bne.n	8004bf8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e000      	b.n	8004bfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff fe5e 	bl	80048ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b08c      	sub	sp, #48	; 0x30
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b22      	cmp	r3, #34	; 0x22
 8004c4c:	f040 80ab 	bne.w	8004da6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c58:	d117      	bne.n	8004c8a <UART_Receive_IT+0x50>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d113      	bne.n	8004c8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	1c9a      	adds	r2, r3, #2
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
 8004c88:	e026      	b.n	8004cd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d007      	beq.n	8004cae <UART_Receive_IT+0x74>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <UART_Receive_IT+0x82>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e008      	b.n	8004cce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d15a      	bne.n	8004da2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0220 	bic.w	r2, r2, #32
 8004cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0201 	bic.w	r2, r2, #1
 8004d1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d135      	bne.n	8004d98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	613b      	str	r3, [r7, #16]
   return(result);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d52:	623a      	str	r2, [r7, #32]
 8004d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	69f9      	ldr	r1, [r7, #28]
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d10a      	bne.n	8004d8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fdbf 	bl	8004914 <HAL_UARTEx_RxEventCallback>
 8004d96:	e002      	b.n	8004d9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fb fd47 	bl	800082c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e002      	b.n	8004da8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e000      	b.n	8004da8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004da6:	2302      	movs	r3, #2
  }
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3730      	adds	r7, #48	; 0x30
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	b09f      	sub	sp, #124	; 0x7c
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc6:	68d9      	ldr	r1, [r3, #12]
 8004dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	ea40 0301 	orr.w	r3, r0, r1
 8004dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	431a      	orrs	r2, r3
 8004de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004df4:	f021 010c 	bic.w	r1, r1, #12
 8004df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0e:	6999      	ldr	r1, [r3, #24]
 8004e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	ea40 0301 	orr.w	r3, r0, r1
 8004e18:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b6a      	ldr	r3, [pc, #424]	; (8004fc8 <UART_SetConfig+0x218>)
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d00e      	beq.n	8004e42 <UART_SetConfig+0x92>
 8004e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b68      	ldr	r3, [pc, #416]	; (8004fcc <UART_SetConfig+0x21c>)
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d009      	beq.n	8004e42 <UART_SetConfig+0x92>
 8004e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b67      	ldr	r3, [pc, #412]	; (8004fd0 <UART_SetConfig+0x220>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d004      	beq.n	8004e42 <UART_SetConfig+0x92>
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <UART_SetConfig+0x224>)
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d103      	bne.n	8004e4a <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e42:	f7fd fe7f 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 8004e46:	6778      	str	r0, [r7, #116]	; 0x74
 8004e48:	e002      	b.n	8004e50 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e4a:	f7fd fe67 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004e4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e58:	f040 80c0 	bne.w	8004fdc <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e5e:	461c      	mov	r4, r3
 8004e60:	f04f 0500 	mov.w	r5, #0
 8004e64:	4622      	mov	r2, r4
 8004e66:	462b      	mov	r3, r5
 8004e68:	1891      	adds	r1, r2, r2
 8004e6a:	6439      	str	r1, [r7, #64]	; 0x40
 8004e6c:	415b      	adcs	r3, r3
 8004e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e74:	1912      	adds	r2, r2, r4
 8004e76:	eb45 0303 	adc.w	r3, r5, r3
 8004e7a:	f04f 0000 	mov.w	r0, #0
 8004e7e:	f04f 0100 	mov.w	r1, #0
 8004e82:	00d9      	lsls	r1, r3, #3
 8004e84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e88:	00d0      	lsls	r0, r2, #3
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	1911      	adds	r1, r2, r4
 8004e90:	6639      	str	r1, [r7, #96]	; 0x60
 8004e92:	416b      	adcs	r3, r5
 8004e94:	667b      	str	r3, [r7, #100]	; 0x64
 8004e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	1891      	adds	r1, r2, r2
 8004ea2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ea4:	415b      	adcs	r3, r3
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004eac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004eb0:	f7fb fa1e 	bl	80002f0 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <UART_SetConfig+0x228>)
 8004eba:	fba3 2302 	umull	r2, r3, r3, r2
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	011e      	lsls	r6, r3, #4
 8004ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec4:	461c      	mov	r4, r3
 8004ec6:	f04f 0500 	mov.w	r5, #0
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	1891      	adds	r1, r2, r2
 8004ed0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ed2:	415b      	adcs	r3, r3
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004eda:	1912      	adds	r2, r2, r4
 8004edc:	eb45 0303 	adc.w	r3, r5, r3
 8004ee0:	f04f 0000 	mov.w	r0, #0
 8004ee4:	f04f 0100 	mov.w	r1, #0
 8004ee8:	00d9      	lsls	r1, r3, #3
 8004eea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eee:	00d0      	lsls	r0, r2, #3
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	1911      	adds	r1, r2, r4
 8004ef6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ef8:	416b      	adcs	r3, r5
 8004efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	461a      	mov	r2, r3
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	1891      	adds	r1, r2, r2
 8004f08:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f0a:	415b      	adcs	r3, r3
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004f16:	f7fb f9eb 	bl	80002f0 <__aeabi_uldivmod>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <UART_SetConfig+0x228>)
 8004f20:	fba3 1302 	umull	r1, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	2164      	movs	r1, #100	; 0x64
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	3332      	adds	r3, #50	; 0x32
 8004f32:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <UART_SetConfig+0x228>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f40:	441e      	add	r6, r3
 8004f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f44:	4618      	mov	r0, r3
 8004f46:	f04f 0100 	mov.w	r1, #0
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	1894      	adds	r4, r2, r2
 8004f50:	623c      	str	r4, [r7, #32]
 8004f52:	415b      	adcs	r3, r3
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
 8004f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f5a:	1812      	adds	r2, r2, r0
 8004f5c:	eb41 0303 	adc.w	r3, r1, r3
 8004f60:	f04f 0400 	mov.w	r4, #0
 8004f64:	f04f 0500 	mov.w	r5, #0
 8004f68:	00dd      	lsls	r5, r3, #3
 8004f6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f6e:	00d4      	lsls	r4, r2, #3
 8004f70:	4622      	mov	r2, r4
 8004f72:	462b      	mov	r3, r5
 8004f74:	1814      	adds	r4, r2, r0
 8004f76:	653c      	str	r4, [r7, #80]	; 0x50
 8004f78:	414b      	adcs	r3, r1
 8004f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	461a      	mov	r2, r3
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	1891      	adds	r1, r2, r2
 8004f88:	61b9      	str	r1, [r7, #24]
 8004f8a:	415b      	adcs	r3, r3
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f96:	f7fb f9ab 	bl	80002f0 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <UART_SetConfig+0x228>)
 8004fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	2164      	movs	r1, #100	; 0x64
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	3332      	adds	r3, #50	; 0x32
 8004fb2:	4a09      	ldr	r2, [pc, #36]	; (8004fd8 <UART_SetConfig+0x228>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	f003 0207 	and.w	r2, r3, #7
 8004fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4432      	add	r2, r6
 8004fc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fc6:	e0c3      	b.n	8005150 <UART_SetConfig+0x3a0>
 8004fc8:	40011000 	.word	0x40011000
 8004fcc:	40011400 	.word	0x40011400
 8004fd0:	40011800 	.word	0x40011800
 8004fd4:	40011c00 	.word	0x40011c00
 8004fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fde:	461c      	mov	r4, r3
 8004fe0:	f04f 0500 	mov.w	r5, #0
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	462b      	mov	r3, r5
 8004fe8:	1891      	adds	r1, r2, r2
 8004fea:	6139      	str	r1, [r7, #16]
 8004fec:	415b      	adcs	r3, r3
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ff4:	1912      	adds	r2, r2, r4
 8004ff6:	eb45 0303 	adc.w	r3, r5, r3
 8004ffa:	f04f 0000 	mov.w	r0, #0
 8004ffe:	f04f 0100 	mov.w	r1, #0
 8005002:	00d9      	lsls	r1, r3, #3
 8005004:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005008:	00d0      	lsls	r0, r2, #3
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	eb12 0804 	adds.w	r8, r2, r4
 8005012:	eb43 0905 	adc.w	r9, r3, r5
 8005016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4618      	mov	r0, r3
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	008b      	lsls	r3, r1, #2
 800502a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800502e:	0082      	lsls	r2, r0, #2
 8005030:	4640      	mov	r0, r8
 8005032:	4649      	mov	r1, r9
 8005034:	f7fb f95c 	bl	80002f0 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4b47      	ldr	r3, [pc, #284]	; (800515c <UART_SetConfig+0x3ac>)
 800503e:	fba3 2302 	umull	r2, r3, r3, r2
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	011e      	lsls	r6, r3, #4
 8005046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005048:	4618      	mov	r0, r3
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	1894      	adds	r4, r2, r2
 8005054:	60bc      	str	r4, [r7, #8]
 8005056:	415b      	adcs	r3, r3
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800505e:	1812      	adds	r2, r2, r0
 8005060:	eb41 0303 	adc.w	r3, r1, r3
 8005064:	f04f 0400 	mov.w	r4, #0
 8005068:	f04f 0500 	mov.w	r5, #0
 800506c:	00dd      	lsls	r5, r3, #3
 800506e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005072:	00d4      	lsls	r4, r2, #3
 8005074:	4622      	mov	r2, r4
 8005076:	462b      	mov	r3, r5
 8005078:	1814      	adds	r4, r2, r0
 800507a:	64bc      	str	r4, [r7, #72]	; 0x48
 800507c:	414b      	adcs	r3, r1
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4618      	mov	r0, r3
 8005086:	f04f 0100 	mov.w	r1, #0
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	008b      	lsls	r3, r1, #2
 8005094:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005098:	0082      	lsls	r2, r0, #2
 800509a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800509e:	f7fb f927 	bl	80002f0 <__aeabi_uldivmod>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4b2d      	ldr	r3, [pc, #180]	; (800515c <UART_SetConfig+0x3ac>)
 80050a8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	2164      	movs	r1, #100	; 0x64
 80050b0:	fb01 f303 	mul.w	r3, r1, r3
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	3332      	adds	r3, #50	; 0x32
 80050ba:	4a28      	ldr	r2, [pc, #160]	; (800515c <UART_SetConfig+0x3ac>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050c6:	441e      	add	r6, r3
 80050c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ca:	4618      	mov	r0, r3
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	1894      	adds	r4, r2, r2
 80050d6:	603c      	str	r4, [r7, #0]
 80050d8:	415b      	adcs	r3, r3
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050e0:	1812      	adds	r2, r2, r0
 80050e2:	eb41 0303 	adc.w	r3, r1, r3
 80050e6:	f04f 0400 	mov.w	r4, #0
 80050ea:	f04f 0500 	mov.w	r5, #0
 80050ee:	00dd      	lsls	r5, r3, #3
 80050f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050f4:	00d4      	lsls	r4, r2, #3
 80050f6:	4622      	mov	r2, r4
 80050f8:	462b      	mov	r3, r5
 80050fa:	eb12 0a00 	adds.w	sl, r2, r0
 80050fe:	eb43 0b01 	adc.w	fp, r3, r1
 8005102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	4618      	mov	r0, r3
 8005108:	f04f 0100 	mov.w	r1, #0
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	008b      	lsls	r3, r1, #2
 8005116:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800511a:	0082      	lsls	r2, r0, #2
 800511c:	4650      	mov	r0, sl
 800511e:	4659      	mov	r1, fp
 8005120:	f7fb f8e6 	bl	80002f0 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <UART_SetConfig+0x3ac>)
 800512a:	fba3 1302 	umull	r1, r3, r3, r2
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2164      	movs	r1, #100	; 0x64
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	3332      	adds	r3, #50	; 0x32
 800513c:	4a07      	ldr	r2, [pc, #28]	; (800515c <UART_SetConfig+0x3ac>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4432      	add	r2, r6
 800514e:	609a      	str	r2, [r3, #8]
}
 8005150:	bf00      	nop
 8005152:	377c      	adds	r7, #124	; 0x7c
 8005154:	46bd      	mov	sp, r7
 8005156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515a:	bf00      	nop
 800515c:	51eb851f 	.word	0x51eb851f

08005160 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005160:	b084      	sub	sp, #16
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	f107 001c 	add.w	r0, r7, #28
 800516e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2b01      	cmp	r3, #1
 8005176:	d122      	bne.n	80051be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800518c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d105      	bne.n	80051b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa7c 	bl	80056b0 <USB_CoreReset>
 80051b8:	4603      	mov	r3, r0
 80051ba:	73fb      	strb	r3, [r7, #15]
 80051bc:	e01a      	b.n	80051f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa70 	bl	80056b0 <USB_CoreReset>
 80051d0:	4603      	mov	r3, r0
 80051d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
 80051e6:	e005      	b.n	80051f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d10b      	bne.n	8005212 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f043 0206 	orr.w	r2, r3, #6
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800521e:	b004      	add	sp, #16
 8005220:	4770      	bx	lr

08005222 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f023 0201 	bic.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d115      	bne.n	8005292 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005272:	2001      	movs	r0, #1
 8005274:	f7fc fdd6 	bl	8001e24 <HAL_Delay>
      ms++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa08 	bl	8005694 <USB_GetMode>
 8005284:	4603      	mov	r3, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	d01e      	beq.n	80052c8 <USB_SetCurrentMode+0x84>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b31      	cmp	r3, #49	; 0x31
 800528e:	d9f0      	bls.n	8005272 <USB_SetCurrentMode+0x2e>
 8005290:	e01a      	b.n	80052c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d115      	bne.n	80052c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052a4:	2001      	movs	r0, #1
 80052a6:	f7fc fdbd 	bl	8001e24 <HAL_Delay>
      ms++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3301      	adds	r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f9ef 	bl	8005694 <USB_GetMode>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <USB_SetCurrentMode+0x84>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b31      	cmp	r3, #49	; 0x31
 80052c0:	d9f0      	bls.n	80052a4 <USB_SetCurrentMode+0x60>
 80052c2:	e001      	b.n	80052c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e005      	b.n	80052d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b32      	cmp	r3, #50	; 0x32
 80052cc:	d101      	bne.n	80052d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052dc:	b084      	sub	sp, #16
 80052de:	b580      	push	{r7, lr}
 80052e0:	b086      	sub	sp, #24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e009      	b.n	8005310 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3340      	adds	r3, #64	; 0x40
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	2200      	movs	r2, #0
 8005308:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	3301      	adds	r3, #1
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b0e      	cmp	r3, #14
 8005314:	d9f2      	bls.n	80052fc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d11c      	bne.n	8005356 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e005      	b.n	8005362 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005368:	461a      	mov	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	4619      	mov	r1, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537c:	461a      	mov	r2, r3
 800537e:	680b      	ldr	r3, [r1, #0]
 8005380:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10c      	bne.n	80053a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800538e:	2100      	movs	r1, #0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f945 	bl	8005620 <USB_SetDevSpeed>
 8005396:	e008      	b.n	80053aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005398:	2101      	movs	r1, #1
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f940 	bl	8005620 <USB_SetDevSpeed>
 80053a0:	e003      	b.n	80053aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053a2:	2103      	movs	r1, #3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f93b 	bl	8005620 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053aa:	2110      	movs	r1, #16
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8f3 	bl	8005598 <USB_FlushTxFifo>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f90f 	bl	80055e0 <USB_FlushRxFifo>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	461a      	mov	r2, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	461a      	mov	r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	461a      	mov	r2, r3
 80053ec:	2300      	movs	r3, #0
 80053ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	e043      	b.n	800547e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540c:	d118      	bne.n	8005440 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e013      	b.n	8005452 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	461a      	mov	r2, r3
 8005438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e008      	b.n	8005452 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	461a      	mov	r2, r3
 800544e:	2300      	movs	r3, #0
 8005450:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545e:	461a      	mov	r2, r3
 8005460:	2300      	movs	r3, #0
 8005462:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	461a      	mov	r2, r3
 8005472:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005476:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	3301      	adds	r3, #1
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	429a      	cmp	r2, r3
 8005484:	d3b7      	bcc.n	80053f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e043      	b.n	8005514 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800549e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a2:	d118      	bne.n	80054d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e013      	b.n	80054e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	461a      	mov	r2, r3
 80054ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e008      	b.n	80054e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	2300      	movs	r3, #0
 80054e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800550c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3301      	adds	r3, #1
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	429a      	cmp	r2, r3
 800551a:	d3b7      	bcc.n	800548c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800553c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f043 0210 	orr.w	r2, r3, #16
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <USB_DevInit+0x2b8>)
 8005556:	4313      	orrs	r3, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800555c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 0208 	orr.w	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d107      	bne.n	8005584 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800557c:	f043 0304 	orr.w	r3, r3, #4
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005590:	b004      	add	sp, #16
 8005592:	4770      	bx	lr
 8005594:	803c3800 	.word	0x803c3800

08005598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	019b      	lsls	r3, r3, #6
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	4a08      	ldr	r2, [pc, #32]	; (80055dc <USB_FlushTxFifo+0x44>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d901      	bls.n	80055c2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e006      	b.n	80055d0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d0f1      	beq.n	80055b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	00030d40 	.word	0x00030d40

080055e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2210      	movs	r2, #16
 80055f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	4a08      	ldr	r2, [pc, #32]	; (800561c <USB_FlushRxFifo+0x3c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e006      	b.n	8005610 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b10      	cmp	r3, #16
 800560c:	d0f1      	beq.n	80055f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	00030d40 	.word	0x00030d40

08005620 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005640:	4313      	orrs	r3, r2
 8005642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800566c:	f023 0303 	bic.w	r3, r3, #3
 8005670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005680:	f043 0302 	orr.w	r3, r3, #2
 8005684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0301 	and.w	r3, r3, #1
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3301      	adds	r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	4a13      	ldr	r2, [pc, #76]	; (8005710 <USB_CoreReset+0x60>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d901      	bls.n	80056cc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e01a      	b.n	8005702 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	daf3      	bge.n	80056bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f043 0201 	orr.w	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	4a09      	ldr	r2, [pc, #36]	; (8005710 <USB_CoreReset+0x60>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d901      	bls.n	80056f4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e006      	b.n	8005702 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d0f1      	beq.n	80056e4 <USB_CoreReset+0x34>

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	00030d40 	.word	0x00030d40

08005714 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f103 0208 	add.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800572c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f103 0208 	add.w	r2, r3, #8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f103 0208 	add.w	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005784:	d103      	bne.n	800578e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e00c      	b.n	80057a8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3308      	adds	r3, #8
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	e002      	b.n	800579c <vListInsert+0x2e>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d2f6      	bcs.n	8005796 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6892      	ldr	r2, [r2, #8]
 80057f6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6852      	ldr	r2, [r2, #4]
 8005800:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	d103      	bne.n	8005814 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	1e5a      	subs	r2, r3, #1
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800583e:	2301      	movs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xQueueGenericReset+0x2e>
        __asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	60fb      	str	r3, [r7, #12]
    }
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d05d      	beq.n	8005924 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800586c:	2b00      	cmp	r3, #0
 800586e:	d059      	beq.n	8005924 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005878:	2100      	movs	r1, #0
 800587a:	fba3 2302 	umull	r2, r3, r3, r2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d000      	beq.n	8005884 <xQueueGenericReset+0x50>
 8005882:	2101      	movs	r1, #1
 8005884:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005886:	2b00      	cmp	r3, #0
 8005888:	d14c      	bne.n	8005924 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800588a:	f002 fd85 	bl	8008398 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	6939      	ldr	r1, [r7, #16]
 8005898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	441a      	add	r2, r3
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2200      	movs	r2, #0
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6939      	ldr	r1, [r7, #16]
 80058be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	441a      	add	r2, r3
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d114      	bne.n	800590a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01a      	beq.n	800591e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	3310      	adds	r3, #16
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 fa5f 	bl	8006db0 <xTaskRemoveFromEventList>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d012      	beq.n	800591e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80058f8:	4b15      	ldr	r3, [pc, #84]	; (8005950 <xQueueGenericReset+0x11c>)
 80058fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	e009      	b.n	800591e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	3310      	adds	r3, #16
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff ff00 	bl	8005714 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	3324      	adds	r3, #36	; 0x24
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fefb 	bl	8005714 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800591e:	f002 fd6b 	bl	80083f8 <vPortExitCritical>
 8005922:	e001      	b.n	8005928 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xQueueGenericReset+0x110>
        __asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60bb      	str	r3, [r7, #8]
    }
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005944:	697b      	ldr	r3, [r7, #20]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	e000ed04 	.word	0xe000ed04

08005954 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	; 0x28
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	4613      	mov	r3, r2
 8005960:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d02e      	beq.n	80059ca <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800596c:	2100      	movs	r1, #0
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	fba3 2302 	umull	r2, r3, r3, r2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d000      	beq.n	800597c <xQueueGenericCreate+0x28>
 800597a:	2101      	movs	r1, #1
 800597c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800597e:	2b00      	cmp	r3, #0
 8005980:	d123      	bne.n	80059ca <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800598a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800598e:	d81c      	bhi.n	80059ca <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	3350      	adds	r3, #80	; 0x50
 800599e:	4618      	mov	r0, r3
 80059a0:	f002 fe1c 	bl	80085dc <pvPortMalloc>
 80059a4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01c      	beq.n	80059e6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	3350      	adds	r3, #80	; 0x50
 80059b4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059b6:	79fa      	ldrb	r2, [r7, #7]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f814 	bl	80059f0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80059c8:	e00d      	b.n	80059e6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <xQueueGenericCreate+0x92>
        __asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	613b      	str	r3, [r7, #16]
    }
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80059e6:	69fb      	ldr	r3, [r7, #28]
    }
 80059e8:	4618      	mov	r0, r3
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e002      	b.n	8005a12 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a1e:	2101      	movs	r1, #1
 8005a20:	69b8      	ldr	r0, [r7, #24]
 8005a22:	f7ff ff07 	bl	8005834 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	78fa      	ldrb	r2, [r7, #3]
 8005a2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08e      	sub	sp, #56	; 0x38
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a46:	2300      	movs	r3, #0
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xQueueGenericSend+0x32>
        __asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <xQueueGenericSend+0x40>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <xQueueGenericSend+0x44>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <xQueueGenericSend+0x46>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <xQueueGenericSend+0x60>
        __asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d103      	bne.n	8005aa6 <xQueueGenericSend+0x6e>
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <xQueueGenericSend+0x72>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <xQueueGenericSend+0x74>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <xQueueGenericSend+0x8e>
        __asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	623b      	str	r3, [r7, #32]
    }
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ac6:	f001 fb83 	bl	80071d0 <xTaskGetSchedulerState>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <xQueueGenericSend+0x9e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <xQueueGenericSend+0xa2>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <xQueueGenericSend+0xa4>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericSend+0xbe>
        __asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	61fb      	str	r3, [r7, #28]
    }
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005af6:	f002 fc4f 	bl	8008398 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <xQueueGenericSend+0xd4>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d129      	bne.n	8005b60 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b12:	f000 fad6 	bl	80060c2 <prvCopyDataToQueue>
 8005b16:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d010      	beq.n	8005b42 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	3324      	adds	r3, #36	; 0x24
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 f943 	bl	8006db0 <xTaskRemoveFromEventList>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d013      	beq.n	8005b58 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005b30:	4b3f      	ldr	r3, [pc, #252]	; (8005c30 <xQueueGenericSend+0x1f8>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	e00a      	b.n	8005b58 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005b48:	4b39      	ldr	r3, [pc, #228]	; (8005c30 <xQueueGenericSend+0x1f8>)
 8005b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005b58:	f002 fc4e 	bl	80083f8 <vPortExitCritical>
                return pdPASS;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e063      	b.n	8005c28 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005b66:	f002 fc47 	bl	80083f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e05c      	b.n	8005c28 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005b74:	f107 0314 	add.w	r3, r7, #20
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 f9ef 	bl	8006f5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005b82:	f002 fc39 	bl	80083f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005b86:	f000 fe11 	bl	80067ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005b8a:	f002 fc05 	bl	8008398 <vPortEnterCritical>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b94:	b25b      	sxtb	r3, r3
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9a:	d103      	bne.n	8005ba4 <xQueueGenericSend+0x16c>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb0:	d103      	bne.n	8005bba <xQueueGenericSend+0x182>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bba:	f002 fc1d 	bl	80083f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bbe:	1d3a      	adds	r2, r7, #4
 8005bc0:	f107 0314 	add.w	r3, r7, #20
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f9de 	bl	8006f88 <xTaskCheckForTimeOut>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d124      	bne.n	8005c1c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bd4:	f000 fb6d 	bl	80062b2 <prvIsQueueFull>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d018      	beq.n	8005c10 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	3310      	adds	r3, #16
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 f878 	bl	8006cdc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bee:	f000 faf8 	bl	80061e2 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005bf2:	f000 fde9 	bl	80067c8 <xTaskResumeAll>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f47f af7c 	bne.w	8005af6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <xQueueGenericSend+0x1f8>)
 8005c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	e772      	b.n	8005af6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c12:	f000 fae6 	bl	80061e2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005c16:	f000 fdd7 	bl	80067c8 <xTaskResumeAll>
 8005c1a:	e76c      	b.n	8005af6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c1e:	f000 fae0 	bl	80061e2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005c22:	f000 fdd1 	bl	80067c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005c26:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3738      	adds	r7, #56	; 0x38
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b092      	sub	sp, #72	; 0x48
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8005c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <xQueueGenericSendFromISR+0x3c>
 8005c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <xQueueGenericSendFromISR+0x40>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <xQueueGenericSendFromISR+0x42>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d103      	bne.n	8005c9e <xQueueGenericSendFromISR+0x6a>
 8005c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <xQueueGenericSendFromISR+0x6e>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <xQueueGenericSendFromISR+0x70>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cbe:	f002 fc4d 	bl	800855c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	623a      	str	r2, [r7, #32]
 8005cd8:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005cda:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <xQueueGenericSendFromISR+0xbc>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d146      	bne.n	8005d7e <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005d06:	f000 f9dc 	bl	80060c2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005d0a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d12:	d112      	bne.n	8005d3a <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d02d      	beq.n	8005d78 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1e:	3324      	adds	r3, #36	; 0x24
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 f845 	bl	8006db0 <xTaskRemoveFromEventList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d025      	beq.n	8005d78 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d022      	beq.n	8005d78 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	e01e      	b.n	8005d78 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005d3a:	f000 fe51 	bl	80069e0 <uxTaskGetNumberOfTasks>
 8005d3e:	6338      	str	r0, [r7, #48]	; 0x30
 8005d40:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d916      	bls.n	8005d78 <xQueueGenericSendFromISR+0x144>
 8005d4a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d50:	d10a      	bne.n	8005d68 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	61bb      	str	r3, [r7, #24]
    }
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <xQueueGenericSendFromISR+0x132>
 8005d68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	b25a      	sxtb	r2, r3
 8005d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8005d7c:	e001      	b.n	8005d82 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
 8005d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d84:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005d8c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3748      	adds	r7, #72	; 0x48
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08c      	sub	sp, #48	; 0x30
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <xQueueReceive+0x30>
        __asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	623b      	str	r3, [r7, #32]
    }
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <xQueueReceive+0x3e>
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <xQueueReceive+0x42>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <xQueueReceive+0x44>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xQueueReceive+0x5e>
        __asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	61fb      	str	r3, [r7, #28]
    }
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005df6:	f001 f9eb 	bl	80071d0 <xTaskGetSchedulerState>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <xQueueReceive+0x6e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <xQueueReceive+0x72>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <xQueueReceive+0x74>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueReceive+0x8e>
        __asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	61bb      	str	r3, [r7, #24]
    }
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005e26:	f002 fab7 	bl	8008398 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01f      	beq.n	8005e76 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3a:	f000 f9ac 	bl	8006196 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	1e5a      	subs	r2, r3, #1
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00f      	beq.n	8005e6e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	3310      	adds	r3, #16
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 ffac 	bl	8006db0 <xTaskRemoveFromEventList>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005e5e:	4b3d      	ldr	r3, [pc, #244]	; (8005f54 <xQueueReceive+0x1bc>)
 8005e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005e6e:	f002 fac3 	bl	80083f8 <vPortExitCritical>
                return pdPASS;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e069      	b.n	8005f4a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005e7c:	f002 fabc 	bl	80083f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005e80:	2300      	movs	r3, #0
 8005e82:	e062      	b.n	8005f4a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005e8a:	f107 0310 	add.w	r3, r7, #16
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 f864 	bl	8006f5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005e98:	f002 faae 	bl	80083f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005e9c:	f000 fc86 	bl	80067ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005ea0:	f002 fa7a 	bl	8008398 <vPortEnterCritical>
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eaa:	b25b      	sxtb	r3, r3
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb0:	d103      	bne.n	8005eba <xQueueReceive+0x122>
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec0:	b25b      	sxtb	r3, r3
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec6:	d103      	bne.n	8005ed0 <xQueueReceive+0x138>
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed0:	f002 fa92 	bl	80083f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ed4:	1d3a      	adds	r2, r7, #4
 8005ed6:	f107 0310 	add.w	r3, r7, #16
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 f853 	bl	8006f88 <xTaskCheckForTimeOut>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d123      	bne.n	8005f30 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eea:	f000 f9cc 	bl	8006286 <prvIsQueueEmpty>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d017      	beq.n	8005f24 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	3324      	adds	r3, #36	; 0x24
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	4611      	mov	r1, r2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 feed 	bl	8006cdc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f04:	f000 f96d 	bl	80061e2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005f08:	f000 fc5e 	bl	80067c8 <xTaskResumeAll>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d189      	bne.n	8005e26 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005f12:	4b10      	ldr	r3, [pc, #64]	; (8005f54 <xQueueReceive+0x1bc>)
 8005f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	e780      	b.n	8005e26 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f26:	f000 f95c 	bl	80061e2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005f2a:	f000 fc4d 	bl	80067c8 <xTaskResumeAll>
 8005f2e:	e77a      	b.n	8005e26 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f32:	f000 f956 	bl	80061e2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005f36:	f000 fc47 	bl	80067c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f3c:	f000 f9a3 	bl	8006286 <prvIsQueueEmpty>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f43f af6f 	beq.w	8005e26 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005f48:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3730      	adds	r7, #48	; 0x30
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b090      	sub	sp, #64	; 0x40
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <xQueueReceiveFromISR+0x3a>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <xQueueReceiveFromISR+0x3e>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <xQueueReceiveFromISR+0x40>
 8005f96:	2300      	movs	r3, #0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	623b      	str	r3, [r7, #32]
    }
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fb2:	f002 fad3 	bl	800855c <vPortValidateInterruptPriority>
        __asm volatile
 8005fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61fa      	str	r2, [r7, #28]
 8005fcc:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8005fce:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d046      	beq.n	800606c <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fec:	f000 f8d3 	bl	8006196 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	1e5a      	subs	r2, r3, #1
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005ff8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006000:	d112      	bne.n	8006028 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d02d      	beq.n	8006066 <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	3310      	adds	r3, #16
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fece 	bl	8006db0 <xTaskRemoveFromEventList>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d025      	beq.n	8006066 <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d022      	beq.n	8006066 <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	e01e      	b.n	8006066 <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8006028:	f000 fcda 	bl	80069e0 <uxTaskGetNumberOfTasks>
 800602c:	62b8      	str	r0, [r7, #40]	; 0x28
 800602e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006034:	429a      	cmp	r2, r3
 8006036:	d916      	bls.n	8006066 <xQueueReceiveFromISR+0x10e>
 8006038:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800603c:	2b7f      	cmp	r3, #127	; 0x7f
 800603e:	d10a      	bne.n	8006056 <xQueueReceiveFromISR+0xfe>
        __asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	617b      	str	r3, [r7, #20]
    }
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xQueueReceiveFromISR+0xfc>
 8006056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800605a:	3301      	adds	r3, #1
 800605c:	b2db      	uxtb	r3, r3
 800605e:	b25a      	sxtb	r2, r3
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8006066:	2301      	movs	r3, #1
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800606a:	e001      	b.n	8006070 <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 800606c:	2300      	movs	r3, #0
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f383 8811 	msr	BASEPRI, r3
    }
 800607a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800607e:	4618      	mov	r0, r3
 8006080:	3740      	adds	r7, #64	; 0x40
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60bb      	str	r3, [r7, #8]
    }
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80060aa:	f002 f975 	bl	8008398 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80060b4:	f002 f9a0 	bl	80083f8 <vPortExitCritical>

    return uxReturn;
 80060b8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b086      	sub	sp, #24
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10d      	bne.n	80060fc <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d14d      	bne.n	8006184 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 f88d 	bl	800720c <xTaskPriorityDisinherit>
 80060f2:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	609a      	str	r2, [r3, #8]
 80060fa:	e043      	b.n	8006184 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d119      	bne.n	8006136 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6858      	ldr	r0, [r3, #4]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	461a      	mov	r2, r3
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	f002 fc55 	bl	80089bc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	441a      	add	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	d32b      	bcc.n	8006184 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	605a      	str	r2, [r3, #4]
 8006134:	e026      	b.n	8006184 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68d8      	ldr	r0, [r3, #12]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	461a      	mov	r2, r3
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	f002 fc3b 	bl	80089bc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	425b      	negs	r3, r3
 8006150:	441a      	add	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d207      	bcs.n	8006172 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	425b      	negs	r3, r3
 800616c:	441a      	add	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d105      	bne.n	8006184 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3b01      	subs	r3, #1
 8006182:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800618c:	697b      	ldr	r3, [r7, #20]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d018      	beq.n	80061da <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	441a      	add	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d303      	bcc.n	80061ca <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68d9      	ldr	r1, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	461a      	mov	r2, r3
 80061d4:	6838      	ldr	r0, [r7, #0]
 80061d6:	f002 fbf1 	bl	80089bc <memcpy>
    }
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80061ea:	f002 f8d5 	bl	8008398 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f4:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80061f6:	e011      	b.n	800621c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d012      	beq.n	8006226 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3324      	adds	r3, #36	; 0x24
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fdd3 	bl	8006db0 <xTaskRemoveFromEventList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006210:	f000 ff20 	bl	8007054 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	3b01      	subs	r3, #1
 8006218:	b2db      	uxtb	r3, r3
 800621a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800621c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006220:	2b00      	cmp	r3, #0
 8006222:	dce9      	bgt.n	80061f8 <prvUnlockQueue+0x16>
 8006224:	e000      	b.n	8006228 <prvUnlockQueue+0x46>
                    break;
 8006226:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	22ff      	movs	r2, #255	; 0xff
 800622c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006230:	f002 f8e2 	bl	80083f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006234:	f002 f8b0 	bl	8008398 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800623e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006240:	e011      	b.n	8006266 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d012      	beq.n	8006270 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3310      	adds	r3, #16
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fdae 	bl	8006db0 <xTaskRemoveFromEventList>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800625a:	f000 fefb 	bl	8007054 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800625e:	7bbb      	ldrb	r3, [r7, #14]
 8006260:	3b01      	subs	r3, #1
 8006262:	b2db      	uxtb	r3, r3
 8006264:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800626a:	2b00      	cmp	r3, #0
 800626c:	dce9      	bgt.n	8006242 <prvUnlockQueue+0x60>
 800626e:	e000      	b.n	8006272 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006270:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	22ff      	movs	r2, #255	; 0xff
 8006276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800627a:	f002 f8bd 	bl	80083f8 <vPortExitCritical>
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800628e:	f002 f883 	bl	8008398 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800629a:	2301      	movs	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	e001      	b.n	80062a4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80062a4:	f002 f8a8 	bl	80083f8 <vPortExitCritical>

    return xReturn;
 80062a8:	68fb      	ldr	r3, [r7, #12]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80062ba:	f002 f86d 	bl	8008398 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d102      	bne.n	80062d0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	e001      	b.n	80062d4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80062d4:	f002 f890 	bl	80083f8 <vPortExitCritical>

    return xReturn;
 80062d8:	68fb      	ldr	r3, [r7, #12]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80062e2:	b480      	push	{r7}
 80062e4:	b087      	sub	sp, #28
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	60fb      	str	r3, [r7, #12]
    }
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	429a      	cmp	r2, r3
 8006314:	d102      	bne.n	800631c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e001      	b.n	8006320 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006320:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006322:	4618      	mov	r0, r3
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	60fb      	str	r3, [r7, #12]
    }
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d024      	beq.n	80063aa <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	e01e      	b.n	80063a4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8006366:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <vQueueAddToRegistry+0x98>)
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4413      	add	r3, r2
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	429a      	cmp	r2, r3
 8006374:	d105      	bne.n	8006382 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <vQueueAddToRegistry+0x98>)
 800637c:	4413      	add	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
                    break;
 8006380:	e013      	b.n	80063aa <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <vQueueAddToRegistry+0x6e>
 8006388:	4a0f      	ldr	r2, [pc, #60]	; (80063c8 <vQueueAddToRegistry+0x98>)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	4a0b      	ldr	r2, [pc, #44]	; (80063c8 <vQueueAddToRegistry+0x98>)
 800639a:	4413      	add	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	3301      	adds	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b07      	cmp	r3, #7
 80063a8:	d9dd      	bls.n	8006366 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	2001335c 	.word	0x2001335c

080063cc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80063dc:	f001 ffdc 	bl	8008398 <vPortEnterCritical>
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063e6:	b25b      	sxtb	r3, r3
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ec:	d103      	bne.n	80063f6 <vQueueWaitForMessageRestricted+0x2a>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063fc:	b25b      	sxtb	r3, r3
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006402:	d103      	bne.n	800640c <vQueueWaitForMessageRestricted+0x40>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800640c:	f001 fff4 	bl	80083f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	2b00      	cmp	r3, #0
 8006416:	d106      	bne.n	8006426 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	3324      	adds	r3, #36	; 0x24
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fc7f 	bl	8006d24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006426:	6978      	ldr	r0, [r7, #20]
 8006428:	f7ff fedb 	bl	80061e2 <prvUnlockQueue>
    }
 800642c:	bf00      	nop
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006434:	b580      	push	{r7, lr}
 8006436:	b08c      	sub	sp, #48	; 0x30
 8006438:	af04      	add	r7, sp, #16
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006444:	88fb      	ldrh	r3, [r7, #6]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4618      	mov	r0, r3
 800644a:	f002 f8c7 	bl	80085dc <pvPortMalloc>
 800644e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d013      	beq.n	800647e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006456:	2058      	movs	r0, #88	; 0x58
 8006458:	f002 f8c0 	bl	80085dc <pvPortMalloc>
 800645c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006464:	2258      	movs	r2, #88	; 0x58
 8006466:	2100      	movs	r1, #0
 8006468:	69f8      	ldr	r0, [r7, #28]
 800646a:	f002 fab5 	bl	80089d8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
 8006474:	e005      	b.n	8006482 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006476:	6978      	ldr	r0, [r7, #20]
 8006478:	f002 f96a 	bl	8008750 <vPortFree>
 800647c:	e001      	b.n	8006482 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d013      	beq.n	80064b0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	2300      	movs	r3, #0
 800648c:	9303      	str	r3, [sp, #12]
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	9302      	str	r3, [sp, #8]
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f80e 	bl	80064c0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80064a4:	69f8      	ldr	r0, [r7, #28]
 80064a6:	f000 f899 	bl	80065dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80064aa:	2301      	movs	r3, #1
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e002      	b.n	80064b6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80064b6:	69bb      	ldr	r3, [r7, #24]
    }
 80064b8:	4618      	mov	r0, r3
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	461a      	mov	r2, r3
 80064d8:	21a5      	movs	r1, #165	; 0xa5
 80064da:	f002 fa7d 	bl	80089d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064e8:	3b01      	subs	r3, #1
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f023 0307 	bic.w	r3, r3, #7
 80064f6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	617b      	str	r3, [r7, #20]
    }
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01e      	beq.n	800655c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	e012      	b.n	800654a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	7819      	ldrb	r1, [r3, #0]
 800652c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4413      	add	r3, r2
 8006532:	3334      	adds	r3, #52	; 0x34
 8006534:	460a      	mov	r2, r1
 8006536:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2b09      	cmp	r3, #9
 800654e:	d9e9      	bls.n	8006524 <prvInitialiseNewTask+0x64>
 8006550:	e000      	b.n	8006554 <prvInitialiseNewTask+0x94>
            {
                break;
 8006552:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	2b04      	cmp	r3, #4
 8006560:	d90a      	bls.n	8006578 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	613b      	str	r3, [r7, #16]
    }
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	2b04      	cmp	r3, #4
 800657c:	d901      	bls.n	8006582 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800657e:	2304      	movs	r3, #4
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800658c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	3304      	adds	r3, #4
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff f8de 	bl	8005754 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	3318      	adds	r3, #24
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff f8d9 	bl	8005754 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	f1c3 0205 	rsb	r2, r3, #5
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	68f9      	ldr	r1, [r7, #12]
 80065bc:	69b8      	ldr	r0, [r7, #24]
 80065be:	f001 fdbd 	bl	800813c <pxPortInitialiseStack>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80065d4:	bf00      	nop
 80065d6:	3720      	adds	r7, #32
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80065e4:	f001 fed8 	bl	8008398 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80065e8:	4b40      	ldr	r3, [pc, #256]	; (80066ec <prvAddNewTaskToReadyList+0x110>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	4a3f      	ldr	r2, [pc, #252]	; (80066ec <prvAddNewTaskToReadyList+0x110>)
 80065f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80065f2:	4b3f      	ldr	r3, [pc, #252]	; (80066f0 <prvAddNewTaskToReadyList+0x114>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80065fa:	4a3d      	ldr	r2, [pc, #244]	; (80066f0 <prvAddNewTaskToReadyList+0x114>)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006600:	4b3a      	ldr	r3, [pc, #232]	; (80066ec <prvAddNewTaskToReadyList+0x110>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d110      	bne.n	800662a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006608:	f000 fd48 	bl	800709c <prvInitialiseTaskLists>
 800660c:	e00d      	b.n	800662a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800660e:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <prvAddNewTaskToReadyList+0x118>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006616:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <prvAddNewTaskToReadyList+0x114>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	429a      	cmp	r2, r3
 8006622:	d802      	bhi.n	800662a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006624:	4a32      	ldr	r2, [pc, #200]	; (80066f0 <prvAddNewTaskToReadyList+0x114>)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800662a:	4b33      	ldr	r3, [pc, #204]	; (80066f8 <prvAddNewTaskToReadyList+0x11c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3301      	adds	r3, #1
 8006630:	4a31      	ldr	r2, [pc, #196]	; (80066f8 <prvAddNewTaskToReadyList+0x11c>)
 8006632:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006634:	4b30      	ldr	r3, [pc, #192]	; (80066f8 <prvAddNewTaskToReadyList+0x11c>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	2201      	movs	r2, #1
 8006642:	409a      	lsls	r2, r3
 8006644:	4b2d      	ldr	r3, [pc, #180]	; (80066fc <prvAddNewTaskToReadyList+0x120>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4313      	orrs	r3, r2
 800664a:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <prvAddNewTaskToReadyList+0x120>)
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006652:	492b      	ldr	r1, [pc, #172]	; (8006700 <prvAddNewTaskToReadyList+0x124>)
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	3304      	adds	r3, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	609a      	str	r2, [r3, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	3204      	adds	r2, #4
 800667a:	605a      	str	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	1d1a      	adds	r2, r3, #4
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	609a      	str	r2, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <prvAddNewTaskToReadyList+0x124>)
 8006692:	441a      	add	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	615a      	str	r2, [r3, #20]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669c:	4918      	ldr	r1, [pc, #96]	; (8006700 <prvAddNewTaskToReadyList+0x124>)
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	4814      	ldr	r0, [pc, #80]	; (8006700 <prvAddNewTaskToReadyList+0x124>)
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4403      	add	r3, r0
 80066b8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80066ba:	f001 fe9d 	bl	80083f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80066be:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <prvAddNewTaskToReadyList+0x118>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00e      	beq.n	80066e4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066c6:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <prvAddNewTaskToReadyList+0x114>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d207      	bcs.n	80066e4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80066d4:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <prvAddNewTaskToReadyList+0x128>)
 80066d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	200001dc 	.word	0x200001dc
 80066f0:	20000104 	.word	0x20000104
 80066f4:	200001e8 	.word	0x200001e8
 80066f8:	200001f8 	.word	0x200001f8
 80066fc:	200001e4 	.word	0x200001e4
 8006700:	20000108 	.word	0x20000108
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800670e:	4b20      	ldr	r3, [pc, #128]	; (8006790 <vTaskStartScheduler+0x88>)
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	2300      	movs	r3, #0
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2300      	movs	r3, #0
 8006718:	2282      	movs	r2, #130	; 0x82
 800671a:	491e      	ldr	r1, [pc, #120]	; (8006794 <vTaskStartScheduler+0x8c>)
 800671c:	481e      	ldr	r0, [pc, #120]	; (8006798 <vTaskStartScheduler+0x90>)
 800671e:	f7ff fe89 	bl	8006434 <xTaskCreate>
 8006722:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d102      	bne.n	8006730 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800672a:	f001 f991 	bl	8007a50 <xTimerCreateTimerTask>
 800672e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d116      	bne.n	8006764 <vTaskStartScheduler+0x5c>
        __asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60bb      	str	r3, [r7, #8]
    }
 8006748:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800674a:	4b14      	ldr	r3, [pc, #80]	; (800679c <vTaskStartScheduler+0x94>)
 800674c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006750:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006752:	4b13      	ldr	r3, [pc, #76]	; (80067a0 <vTaskStartScheduler+0x98>)
 8006754:	2201      	movs	r2, #1
 8006756:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006758:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <vTaskStartScheduler+0x9c>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800675e:	f001 fd79 	bl	8008254 <xPortStartScheduler>
 8006762:	e00e      	b.n	8006782 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800676a:	d10a      	bne.n	8006782 <vTaskStartScheduler+0x7a>
        __asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	607b      	str	r3, [r7, #4]
    }
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006782:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <vTaskStartScheduler+0xa0>)
 8006784:	681b      	ldr	r3, [r3, #0]
}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000200 	.word	0x20000200
 8006794:	08009fcc 	.word	0x08009fcc
 8006798:	0800706d 	.word	0x0800706d
 800679c:	200001fc 	.word	0x200001fc
 80067a0:	200001e8 	.word	0x200001e8
 80067a4:	200001e0 	.word	0x200001e0
 80067a8:	20000020 	.word	0x20000020

080067ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80067b0:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <vTaskSuspendAll+0x18>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	4a03      	ldr	r2, [pc, #12]	; (80067c4 <vTaskSuspendAll+0x18>)
 80067b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80067ba:	bf00      	nop
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	20000204 	.word	0x20000204

080067c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80067d6:	4b71      	ldr	r3, [pc, #452]	; (800699c <xTaskResumeAll+0x1d4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
    }
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80067f4:	f001 fdd0 	bl	8008398 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80067f8:	4b68      	ldr	r3, [pc, #416]	; (800699c <xTaskResumeAll+0x1d4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	4a67      	ldr	r2, [pc, #412]	; (800699c <xTaskResumeAll+0x1d4>)
 8006800:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006802:	4b66      	ldr	r3, [pc, #408]	; (800699c <xTaskResumeAll+0x1d4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 80c0 	bne.w	800698c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800680c:	4b64      	ldr	r3, [pc, #400]	; (80069a0 <xTaskResumeAll+0x1d8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80bb 	beq.w	800698c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006816:	e08a      	b.n	800692e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006818:	4b62      	ldr	r3, [pc, #392]	; (80069a4 <xTaskResumeAll+0x1dc>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	6a12      	ldr	r2, [r2, #32]
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	69d2      	ldr	r2, [r2, #28]
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	3318      	adds	r3, #24
 8006842:	429a      	cmp	r2, r3
 8006844:	d103      	bne.n	800684e <xTaskResumeAll+0x86>
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	6a1a      	ldr	r2, [r3, #32]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	2200      	movs	r2, #0
 8006852:	629a      	str	r2, [r3, #40]	; 0x28
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	1e5a      	subs	r2, r3, #1
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	68d2      	ldr	r2, [r2, #12]
 800686c:	609a      	str	r2, [r3, #8]
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	6892      	ldr	r2, [r2, #8]
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	3304      	adds	r3, #4
 8006880:	429a      	cmp	r2, r3
 8006882:	d103      	bne.n	800688c <xTaskResumeAll+0xc4>
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	605a      	str	r2, [r3, #4]
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2200      	movs	r2, #0
 8006890:	615a      	str	r2, [r3, #20]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	1e5a      	subs	r2, r3, #1
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	2201      	movs	r2, #1
 80068a2:	409a      	lsls	r2, r3
 80068a4:	4b40      	ldr	r3, [pc, #256]	; (80069a8 <xTaskResumeAll+0x1e0>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	4a3f      	ldr	r2, [pc, #252]	; (80069a8 <xTaskResumeAll+0x1e0>)
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b2:	493e      	ldr	r1, [pc, #248]	; (80069ac <xTaskResumeAll+0x1e4>)
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	3304      	adds	r3, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60bb      	str	r3, [r7, #8]
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	609a      	str	r2, [r3, #8]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	3204      	adds	r2, #4
 80068da:	605a      	str	r2, [r3, #4]
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	1d1a      	adds	r2, r3, #4
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	609a      	str	r2, [r3, #8]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4a2e      	ldr	r2, [pc, #184]	; (80069ac <xTaskResumeAll+0x1e4>)
 80068f2:	441a      	add	r2, r3
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	615a      	str	r2, [r3, #20]
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	492b      	ldr	r1, [pc, #172]	; (80069ac <xTaskResumeAll+0x1e4>)
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	1c59      	adds	r1, r3, #1
 800690c:	4827      	ldr	r0, [pc, #156]	; (80069ac <xTaskResumeAll+0x1e4>)
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4403      	add	r3, r0
 8006918:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <xTaskResumeAll+0x1e8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8006928:	4b22      	ldr	r3, [pc, #136]	; (80069b4 <xTaskResumeAll+0x1ec>)
 800692a:	2201      	movs	r2, #1
 800692c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800692e:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <xTaskResumeAll+0x1dc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f47f af70 	bne.w	8006818 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800693e:	f000 fc2b 	bl	8007198 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <xTaskResumeAll+0x1f0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d010      	beq.n	8006970 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800694e:	f000 f853 	bl	80069f8 <xTaskIncrementTick>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8006958:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <xTaskResumeAll+0x1ec>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	3b01      	subs	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f1      	bne.n	800694e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800696a:	4b13      	ldr	r3, [pc, #76]	; (80069b8 <xTaskResumeAll+0x1f0>)
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006970:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <xTaskResumeAll+0x1ec>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d009      	beq.n	800698c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006978:	2301      	movs	r3, #1
 800697a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800697c:	4b0f      	ldr	r3, [pc, #60]	; (80069bc <xTaskResumeAll+0x1f4>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800698c:	f001 fd34 	bl	80083f8 <vPortExitCritical>

    return xAlreadyYielded;
 8006990:	69bb      	ldr	r3, [r7, #24]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000204 	.word	0x20000204
 80069a0:	200001dc 	.word	0x200001dc
 80069a4:	2000019c 	.word	0x2000019c
 80069a8:	200001e4 	.word	0x200001e4
 80069ac:	20000108 	.word	0x20000108
 80069b0:	20000104 	.word	0x20000104
 80069b4:	200001f0 	.word	0x200001f0
 80069b8:	200001ec 	.word	0x200001ec
 80069bc:	e000ed04 	.word	0xe000ed04

080069c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80069c6:	4b05      	ldr	r3, [pc, #20]	; (80069dc <xTaskGetTickCount+0x1c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80069cc:	687b      	ldr	r3, [r7, #4]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	200001e0 	.word	0x200001e0

080069e0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80069e4:	4b03      	ldr	r3, [pc, #12]	; (80069f4 <uxTaskGetNumberOfTasks+0x14>)
 80069e6:	681b      	ldr	r3, [r3, #0]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	200001dc 	.word	0x200001dc

080069f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08a      	sub	sp, #40	; 0x28
 80069fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a02:	4b7d      	ldr	r3, [pc, #500]	; (8006bf8 <xTaskIncrementTick+0x200>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f040 80ec 	bne.w	8006be4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a0c:	4b7b      	ldr	r3, [pc, #492]	; (8006bfc <xTaskIncrementTick+0x204>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3301      	adds	r3, #1
 8006a12:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006a14:	4a79      	ldr	r2, [pc, #484]	; (8006bfc <xTaskIncrementTick+0x204>)
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d120      	bne.n	8006a62 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006a20:	4b77      	ldr	r3, [pc, #476]	; (8006c00 <xTaskIncrementTick+0x208>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <xTaskIncrementTick+0x48>
        __asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	607b      	str	r3, [r7, #4]
    }
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <xTaskIncrementTick+0x46>
 8006a40:	4b6f      	ldr	r3, [pc, #444]	; (8006c00 <xTaskIncrementTick+0x208>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	4b6f      	ldr	r3, [pc, #444]	; (8006c04 <xTaskIncrementTick+0x20c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a6d      	ldr	r2, [pc, #436]	; (8006c00 <xTaskIncrementTick+0x208>)
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	4a6d      	ldr	r2, [pc, #436]	; (8006c04 <xTaskIncrementTick+0x20c>)
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	4b6c      	ldr	r3, [pc, #432]	; (8006c08 <xTaskIncrementTick+0x210>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	4a6b      	ldr	r2, [pc, #428]	; (8006c08 <xTaskIncrementTick+0x210>)
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	f000 fb9b 	bl	8007198 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006a62:	4b6a      	ldr	r3, [pc, #424]	; (8006c0c <xTaskIncrementTick+0x214>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a3a      	ldr	r2, [r7, #32]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	f0c0 80a6 	bcc.w	8006bba <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a6e:	4b64      	ldr	r3, [pc, #400]	; (8006c00 <xTaskIncrementTick+0x208>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a78:	4b64      	ldr	r3, [pc, #400]	; (8006c0c <xTaskIncrementTick+0x214>)
 8006a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a7e:	601a      	str	r2, [r3, #0]
                    break;
 8006a80:	e09b      	b.n	8006bba <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a82:	4b5f      	ldr	r3, [pc, #380]	; (8006c00 <xTaskIncrementTick+0x208>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006a92:	6a3a      	ldr	r2, [r7, #32]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d203      	bcs.n	8006aa2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006a9a:	4a5c      	ldr	r2, [pc, #368]	; (8006c0c <xTaskIncrementTick+0x214>)
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006aa0:	e08b      	b.n	8006bba <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	68d2      	ldr	r2, [r2, #12]
 8006ab0:	609a      	str	r2, [r3, #8]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	6892      	ldr	r2, [r2, #8]
 8006aba:	605a      	str	r2, [r3, #4]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d103      	bne.n	8006ad0 <xTaskIncrementTick+0xd8>
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	605a      	str	r2, [r3, #4]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	615a      	str	r2, [r3, #20]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	1e5a      	subs	r2, r3, #1
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01e      	beq.n	8006b26 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	6a12      	ldr	r2, [r2, #32]
 8006af6:	609a      	str	r2, [r3, #8]
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	69d2      	ldr	r2, [r2, #28]
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	3318      	adds	r3, #24
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d103      	bne.n	8006b16 <xTaskIncrementTick+0x11e>
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	6a1a      	ldr	r2, [r3, #32]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	1e5a      	subs	r2, r3, #1
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	4b38      	ldr	r3, [pc, #224]	; (8006c10 <xTaskIncrementTick+0x218>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	4a36      	ldr	r2, [pc, #216]	; (8006c10 <xTaskIncrementTick+0x218>)
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3c:	4935      	ldr	r1, [pc, #212]	; (8006c14 <xTaskIncrementTick+0x21c>)
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	3304      	adds	r3, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60bb      	str	r3, [r7, #8]
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	609a      	str	r2, [r3, #8]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	60da      	str	r2, [r3, #12]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	3204      	adds	r2, #4
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	1d1a      	adds	r2, r3, #4
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	609a      	str	r2, [r3, #8]
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <xTaskIncrementTick+0x21c>)
 8006b7c:	441a      	add	r2, r3
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	615a      	str	r2, [r3, #20]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4923      	ldr	r1, [pc, #140]	; (8006c14 <xTaskIncrementTick+0x21c>)
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	440b      	add	r3, r1
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	1c59      	adds	r1, r3, #1
 8006b96:	481f      	ldr	r0, [pc, #124]	; (8006c14 <xTaskIncrementTick+0x21c>)
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4403      	add	r3, r0
 8006ba2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <xTaskIncrementTick+0x220>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	f67f af5d 	bls.w	8006a6e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb8:	e759      	b.n	8006a6e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bba:	4b17      	ldr	r3, [pc, #92]	; (8006c18 <xTaskIncrementTick+0x220>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc0:	4914      	ldr	r1, [pc, #80]	; (8006c14 <xTaskIncrementTick+0x21c>)
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d901      	bls.n	8006bd6 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006bd6:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <xTaskIncrementTick+0x224>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8006bde:	2301      	movs	r3, #1
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
 8006be2:	e004      	b.n	8006bee <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006be4:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <xTaskIncrementTick+0x228>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3301      	adds	r3, #1
 8006bea:	4a0d      	ldr	r2, [pc, #52]	; (8006c20 <xTaskIncrementTick+0x228>)
 8006bec:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3728      	adds	r7, #40	; 0x28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000204 	.word	0x20000204
 8006bfc:	200001e0 	.word	0x200001e0
 8006c00:	20000194 	.word	0x20000194
 8006c04:	20000198 	.word	0x20000198
 8006c08:	200001f4 	.word	0x200001f4
 8006c0c:	200001fc 	.word	0x200001fc
 8006c10:	200001e4 	.word	0x200001e4
 8006c14:	20000108 	.word	0x20000108
 8006c18:	20000104 	.word	0x20000104
 8006c1c:	200001f0 	.word	0x200001f0
 8006c20:	200001ec 	.word	0x200001ec

08006c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c2a:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <vTaskSwitchContext+0xa4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006c32:	4b26      	ldr	r3, [pc, #152]	; (8006ccc <vTaskSwitchContext+0xa8>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006c38:	e03f      	b.n	8006cba <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8006c3a:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <vTaskSwitchContext+0xa8>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c40:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <vTaskSwitchContext+0xac>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	fab3 f383 	clz	r3, r3
 8006c4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	f1c3 031f 	rsb	r3, r3, #31
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	491f      	ldr	r1, [pc, #124]	; (8006cd4 <vTaskSwitchContext+0xb0>)
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	607b      	str	r3, [r7, #4]
    }
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <vTaskSwitchContext+0x5a>
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <vTaskSwitchContext+0xb0>)
 8006c8c:	4413      	add	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	605a      	str	r2, [r3, #4]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d104      	bne.n	8006cb0 <vTaskSwitchContext+0x8c>
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	605a      	str	r2, [r3, #4]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	4a08      	ldr	r2, [pc, #32]	; (8006cd8 <vTaskSwitchContext+0xb4>)
 8006cb8:	6013      	str	r3, [r2, #0]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	20000204 	.word	0x20000204
 8006ccc:	200001f0 	.word	0x200001f0
 8006cd0:	200001e4 	.word	0x200001e4
 8006cd4:	20000108 	.word	0x20000108
 8006cd8:	20000104 	.word	0x20000104

08006cdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	60fb      	str	r3, [r7, #12]
    }
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d02:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <vTaskPlaceOnEventList+0x44>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3318      	adds	r3, #24
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fe fd2f 	bl	800576e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d10:	2101      	movs	r1, #1
 8006d12:	6838      	ldr	r0, [r7, #0]
 8006d14:	f000 fe1c 	bl	8007950 <prvAddCurrentTaskToDelayedList>
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000104 	.word	0x20000104

08006d24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	613b      	str	r3, [r7, #16]
    }
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	4b16      	ldr	r3, [pc, #88]	; (8006dac <vTaskPlaceOnEventListRestricted+0x88>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	61da      	str	r2, [r3, #28]
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <vTaskPlaceOnEventListRestricted+0x88>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	6892      	ldr	r2, [r2, #8]
 8006d62:	621a      	str	r2, [r3, #32]
 8006d64:	4b11      	ldr	r3, [pc, #68]	; (8006dac <vTaskPlaceOnEventListRestricted+0x88>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	3218      	adds	r2, #24
 8006d6e:	605a      	str	r2, [r3, #4]
 8006d70:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <vTaskPlaceOnEventListRestricted+0x88>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f103 0218 	add.w	r2, r3, #24
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	609a      	str	r2, [r3, #8]
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <vTaskPlaceOnEventListRestricted+0x88>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	629a      	str	r2, [r3, #40]	; 0x28
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d98:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	68b8      	ldr	r0, [r7, #8]
 8006d9e:	f000 fdd7 	bl	8007950 <prvAddCurrentTaskToDelayedList>
    }
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000104 	.word	0x20000104

08006db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b08b      	sub	sp, #44	; 0x2c
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60fb      	str	r3, [r7, #12]
    }
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	61fb      	str	r3, [r7, #28]
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	6a3a      	ldr	r2, [r7, #32]
 8006de8:	6a12      	ldr	r2, [r2, #32]
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	6a3a      	ldr	r2, [r7, #32]
 8006df2:	69d2      	ldr	r2, [r2, #28]
 8006df4:	605a      	str	r2, [r3, #4]
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	3318      	adds	r3, #24
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d103      	bne.n	8006e0a <xTaskRemoveFromEventList+0x5a>
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	6a1a      	ldr	r2, [r3, #32]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e1a:	4b4a      	ldr	r3, [pc, #296]	; (8006f44 <xTaskRemoveFromEventList+0x194>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d15e      	bne.n	8006ee0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	6a3a      	ldr	r2, [r7, #32]
 8006e2e:	68d2      	ldr	r2, [r2, #12]
 8006e30:	609a      	str	r2, [r3, #8]
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	6a3a      	ldr	r2, [r7, #32]
 8006e38:	6892      	ldr	r2, [r2, #8]
 8006e3a:	605a      	str	r2, [r3, #4]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	3304      	adds	r3, #4
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d103      	bne.n	8006e50 <xTaskRemoveFromEventList+0xa0>
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	605a      	str	r2, [r3, #4]
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	2200      	movs	r2, #0
 8006e54:	615a      	str	r2, [r3, #20]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	1e5a      	subs	r2, r3, #1
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	2201      	movs	r2, #1
 8006e66:	409a      	lsls	r2, r3
 8006e68:	4b37      	ldr	r3, [pc, #220]	; (8006f48 <xTaskRemoveFromEventList+0x198>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	4a36      	ldr	r2, [pc, #216]	; (8006f48 <xTaskRemoveFromEventList+0x198>)
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e76:	4935      	ldr	r1, [pc, #212]	; (8006f4c <xTaskRemoveFromEventList+0x19c>)
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	3304      	adds	r3, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	609a      	str	r2, [r3, #8]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	60da      	str	r2, [r3, #12]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	6a3a      	ldr	r2, [r7, #32]
 8006e9c:	3204      	adds	r2, #4
 8006e9e:	605a      	str	r2, [r3, #4]
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	609a      	str	r2, [r3, #8]
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4a25      	ldr	r2, [pc, #148]	; (8006f4c <xTaskRemoveFromEventList+0x19c>)
 8006eb6:	441a      	add	r2, r3
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	615a      	str	r2, [r3, #20]
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	4922      	ldr	r1, [pc, #136]	; (8006f4c <xTaskRemoveFromEventList+0x19c>)
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	1c59      	adds	r1, r3, #1
 8006ed0:	481e      	ldr	r0, [pc, #120]	; (8006f4c <xTaskRemoveFromEventList+0x19c>)
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4403      	add	r3, r0
 8006edc:	6019      	str	r1, [r3, #0]
 8006ede:	e01b      	b.n	8006f18 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ee0:	4b1b      	ldr	r3, [pc, #108]	; (8006f50 <xTaskRemoveFromEventList+0x1a0>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	61da      	str	r2, [r3, #28]
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	621a      	str	r2, [r3, #32]
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	6a3a      	ldr	r2, [r7, #32]
 8006efa:	3218      	adds	r2, #24
 8006efc:	605a      	str	r2, [r3, #4]
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	f103 0218 	add.w	r2, r3, #24
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	609a      	str	r2, [r3, #8]
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	4a11      	ldr	r2, [pc, #68]	; (8006f50 <xTaskRemoveFromEventList+0x1a0>)
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28
 8006f0e:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <xTaskRemoveFromEventList+0x1a0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	4a0e      	ldr	r2, [pc, #56]	; (8006f50 <xTaskRemoveFromEventList+0x1a0>)
 8006f16:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <xTaskRemoveFromEventList+0x1a4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d905      	bls.n	8006f32 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006f26:	2301      	movs	r3, #1
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <xTaskRemoveFromEventList+0x1a8>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	e001      	b.n	8006f36 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	372c      	adds	r7, #44	; 0x2c
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	20000204 	.word	0x20000204
 8006f48:	200001e4 	.word	0x200001e4
 8006f4c:	20000108 	.word	0x20000108
 8006f50:	2000019c 	.word	0x2000019c
 8006f54:	20000104 	.word	0x20000104
 8006f58:	200001f0 	.word	0x200001f0

08006f5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <vTaskInternalSetTimeOutState+0x24>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <vTaskInternalSetTimeOutState+0x28>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	605a      	str	r2, [r3, #4]
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	200001f4 	.word	0x200001f4
 8006f84:	200001e0 	.word	0x200001e0

08006f88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	613b      	str	r3, [r7, #16]
    }
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	60fb      	str	r3, [r7, #12]
    }
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006fca:	f001 f9e5 	bl	8008398 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006fce:	4b1f      	ldr	r3, [pc, #124]	; (800704c <xTaskCheckForTimeOut+0xc4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe6:	d102      	bne.n	8006fee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	61fb      	str	r3, [r7, #28]
 8006fec:	e026      	b.n	800703c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <xTaskCheckForTimeOut+0xc8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d00a      	beq.n	8007010 <xTaskCheckForTimeOut+0x88>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	429a      	cmp	r2, r3
 8007002:	d305      	bcc.n	8007010 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e015      	b.n	800703c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	429a      	cmp	r2, r3
 8007018:	d20b      	bcs.n	8007032 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	1ad2      	subs	r2, r2, r3
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff ff98 	bl	8006f5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800702c:	2300      	movs	r3, #0
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	e004      	b.n	800703c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800703c:	f001 f9dc 	bl	80083f8 <vPortExitCritical>

    return xReturn;
 8007040:	69fb      	ldr	r3, [r7, #28]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	200001e0 	.word	0x200001e0
 8007050:	200001f4 	.word	0x200001f4

08007054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007058:	4b03      	ldr	r3, [pc, #12]	; (8007068 <vTaskMissedYield+0x14>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]
}
 800705e:	bf00      	nop
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	200001f0 	.word	0x200001f0

0800706c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007074:	f000 f852 	bl	800711c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007078:	4b06      	ldr	r3, [pc, #24]	; (8007094 <prvIdleTask+0x28>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d9f9      	bls.n	8007074 <prvIdleTask+0x8>
            {
                taskYIELD();
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <prvIdleTask+0x2c>)
 8007082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007090:	e7f0      	b.n	8007074 <prvIdleTask+0x8>
 8007092:	bf00      	nop
 8007094:	20000108 	.word	0x20000108
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070a2:	2300      	movs	r3, #0
 80070a4:	607b      	str	r3, [r7, #4]
 80070a6:	e00c      	b.n	80070c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4a12      	ldr	r2, [pc, #72]	; (80070fc <prvInitialiseTaskLists+0x60>)
 80070b4:	4413      	add	r3, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fb2c 	bl	8005714 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3301      	adds	r3, #1
 80070c0:	607b      	str	r3, [r7, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d9ef      	bls.n	80070a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80070c8:	480d      	ldr	r0, [pc, #52]	; (8007100 <prvInitialiseTaskLists+0x64>)
 80070ca:	f7fe fb23 	bl	8005714 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80070ce:	480d      	ldr	r0, [pc, #52]	; (8007104 <prvInitialiseTaskLists+0x68>)
 80070d0:	f7fe fb20 	bl	8005714 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80070d4:	480c      	ldr	r0, [pc, #48]	; (8007108 <prvInitialiseTaskLists+0x6c>)
 80070d6:	f7fe fb1d 	bl	8005714 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80070da:	480c      	ldr	r0, [pc, #48]	; (800710c <prvInitialiseTaskLists+0x70>)
 80070dc:	f7fe fb1a 	bl	8005714 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80070e0:	480b      	ldr	r0, [pc, #44]	; (8007110 <prvInitialiseTaskLists+0x74>)
 80070e2:	f7fe fb17 	bl	8005714 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80070e6:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <prvInitialiseTaskLists+0x78>)
 80070e8:	4a05      	ldr	r2, [pc, #20]	; (8007100 <prvInitialiseTaskLists+0x64>)
 80070ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070ec:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <prvInitialiseTaskLists+0x7c>)
 80070ee:	4a05      	ldr	r2, [pc, #20]	; (8007104 <prvInitialiseTaskLists+0x68>)
 80070f0:	601a      	str	r2, [r3, #0]
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000108 	.word	0x20000108
 8007100:	2000016c 	.word	0x2000016c
 8007104:	20000180 	.word	0x20000180
 8007108:	2000019c 	.word	0x2000019c
 800710c:	200001b0 	.word	0x200001b0
 8007110:	200001c8 	.word	0x200001c8
 8007114:	20000194 	.word	0x20000194
 8007118:	20000198 	.word	0x20000198

0800711c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007122:	e019      	b.n	8007158 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007124:	f001 f938 	bl	8008398 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007128:	4b10      	ldr	r3, [pc, #64]	; (800716c <prvCheckTasksWaitingTermination+0x50>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3304      	adds	r3, #4
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe fb53 	bl	80057e0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800713a:	4b0d      	ldr	r3, [pc, #52]	; (8007170 <prvCheckTasksWaitingTermination+0x54>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3b01      	subs	r3, #1
 8007140:	4a0b      	ldr	r2, [pc, #44]	; (8007170 <prvCheckTasksWaitingTermination+0x54>)
 8007142:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007144:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <prvCheckTasksWaitingTermination+0x58>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3b01      	subs	r3, #1
 800714a:	4a0a      	ldr	r2, [pc, #40]	; (8007174 <prvCheckTasksWaitingTermination+0x58>)
 800714c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800714e:	f001 f953 	bl	80083f8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f810 	bl	8007178 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007158:	4b06      	ldr	r3, [pc, #24]	; (8007174 <prvCheckTasksWaitingTermination+0x58>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e1      	bne.n	8007124 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	200001b0 	.word	0x200001b0
 8007170:	200001dc 	.word	0x200001dc
 8007174:	200001c4 	.word	0x200001c4

08007178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fae3 	bl	8008750 <vPortFree>
            vPortFree( pxTCB );
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fae0 	bl	8008750 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <prvResetNextTaskUnblockTime+0x30>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80071a6:	4b09      	ldr	r3, [pc, #36]	; (80071cc <prvResetNextTaskUnblockTime+0x34>)
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80071ae:	e005      	b.n	80071bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <prvResetNextTaskUnblockTime+0x30>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a04      	ldr	r2, [pc, #16]	; (80071cc <prvResetNextTaskUnblockTime+0x34>)
 80071ba:	6013      	str	r3, [r2, #0]
}
 80071bc:	bf00      	nop
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20000194 	.word	0x20000194
 80071cc:	200001fc 	.word	0x200001fc

080071d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80071d6:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <xTaskGetSchedulerState+0x34>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80071de:	2301      	movs	r3, #1
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	e008      	b.n	80071f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071e4:	4b08      	ldr	r3, [pc, #32]	; (8007208 <xTaskGetSchedulerState+0x38>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80071ec:	2302      	movs	r3, #2
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	e001      	b.n	80071f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80071f2:	2300      	movs	r3, #0
 80071f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80071f6:	687b      	ldr	r3, [r7, #4]
    }
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	200001e8 	.word	0x200001e8
 8007208:	20000204 	.word	0x20000204

0800720c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8007218:	2300      	movs	r3, #0
 800721a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 808c 	beq.w	800733c <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007224:	4b48      	ldr	r3, [pc, #288]	; (8007348 <xTaskPriorityDisinherit+0x13c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	429a      	cmp	r2, r3
 800722c:	d00a      	beq.n	8007244 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	613b      	str	r3, [r7, #16]
    }
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	60fb      	str	r3, [r7, #12]
    }
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007266:	1e5a      	subs	r2, r3, #1
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007274:	429a      	cmp	r2, r3
 8007276:	d061      	beq.n	800733c <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727c:	2b00      	cmp	r3, #0
 800727e:	d15d      	bne.n	800733c <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe faab 	bl	80057e0 <uxListRemove>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	2201      	movs	r2, #1
 8007296:	fa02 f303 	lsl.w	r3, r2, r3
 800729a:	43da      	mvns	r2, r3
 800729c:	4b2b      	ldr	r3, [pc, #172]	; (800734c <xTaskPriorityDisinherit+0x140>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4013      	ands	r3, r2
 80072a2:	4a2a      	ldr	r2, [pc, #168]	; (800734c <xTaskPriorityDisinherit+0x140>)
 80072a4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	f1c3 0205 	rsb	r2, r3, #5
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	2201      	movs	r2, #1
 80072c0:	409a      	lsls	r2, r3
 80072c2:	4b22      	ldr	r3, [pc, #136]	; (800734c <xTaskPriorityDisinherit+0x140>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	4a20      	ldr	r2, [pc, #128]	; (800734c <xTaskPriorityDisinherit+0x140>)
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	491f      	ldr	r1, [pc, #124]	; (8007350 <xTaskPriorityDisinherit+0x144>)
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	3304      	adds	r3, #4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	617b      	str	r3, [r7, #20]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	609a      	str	r2, [r3, #8]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	60da      	str	r2, [r3, #12]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	3204      	adds	r2, #4
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	1d1a      	adds	r2, r3, #4
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	609a      	str	r2, [r3, #8]
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4a10      	ldr	r2, [pc, #64]	; (8007350 <xTaskPriorityDisinherit+0x144>)
 8007310:	441a      	add	r2, r3
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	615a      	str	r2, [r3, #20]
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731a:	490d      	ldr	r1, [pc, #52]	; (8007350 <xTaskPriorityDisinherit+0x144>)
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	1c59      	adds	r1, r3, #1
 800732a:	4809      	ldr	r0, [pc, #36]	; (8007350 <xTaskPriorityDisinherit+0x144>)
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4403      	add	r3, r0
 8007336:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007338:	2301      	movs	r3, #1
 800733a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800733c:	69fb      	ldr	r3, [r7, #28]
    }
 800733e:	4618      	mov	r0, r3
 8007340:	3720      	adds	r7, #32
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000104 	.word	0x20000104
 800734c:	200001e4 	.word	0x200001e4
 8007350:	20000108 	.word	0x20000108

08007354 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	613b      	str	r3, [r7, #16]
    }
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800737e:	f001 f80b 	bl	8008398 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007382:	4b32      	ldr	r3, [pc, #200]	; (800744c <xTaskGenericNotifyWait+0xf8>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	3354      	adds	r3, #84	; 0x54
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d022      	beq.n	80073da <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8007394:	4b2d      	ldr	r3, [pc, #180]	; (800744c <xTaskGenericNotifyWait+0xf8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	3214      	adds	r2, #20
 800739c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	43d2      	mvns	r2, r2
 80073a4:	4011      	ands	r1, r2
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	3214      	adds	r2, #20
 80073aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80073ae:	4b27      	ldr	r3, [pc, #156]	; (800744c <xTaskGenericNotifyWait+0xf8>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	3354      	adds	r3, #84	; 0x54
 80073b8:	2201      	movs	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073c2:	2101      	movs	r1, #1
 80073c4:	6a38      	ldr	r0, [r7, #32]
 80073c6:	f000 fac3 	bl	8007950 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80073ca:	4b21      	ldr	r3, [pc, #132]	; (8007450 <xTaskGenericNotifyWait+0xfc>)
 80073cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80073da:	f001 f80d 	bl	80083f8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80073de:	f000 ffdb 	bl	8008398 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80073e8:	4b18      	ldr	r3, [pc, #96]	; (800744c <xTaskGenericNotifyWait+0xf8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	3214      	adds	r2, #20
 80073f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80073f8:	4b14      	ldr	r3, [pc, #80]	; (800744c <xTaskGenericNotifyWait+0xf8>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	3354      	adds	r3, #84	; 0x54
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d002      	beq.n	8007410 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	e00e      	b.n	800742e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8007410:	4b0e      	ldr	r3, [pc, #56]	; (800744c <xTaskGenericNotifyWait+0xf8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	3214      	adds	r2, #20
 8007418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	43d2      	mvns	r2, r2
 8007420:	4011      	ands	r1, r2
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	3214      	adds	r2, #20
 8007426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800742a:	2301      	movs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800742e:	4b07      	ldr	r3, [pc, #28]	; (800744c <xTaskGenericNotifyWait+0xf8>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	3354      	adds	r3, #84	; 0x54
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800743c:	f000 ffdc 	bl	80083f8 <vPortExitCritical>

        return xReturn;
 8007440:	697b      	ldr	r3, [r7, #20]
    }
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	20000104 	.word	0x20000104
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8007454:	b580      	push	{r7, lr}
 8007456:	b08e      	sub	sp, #56	; 0x38
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8007462:	2301      	movs	r3, #1
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <xTaskGenericNotify+0x2e>
        __asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	623b      	str	r3, [r7, #32]
    }
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <xTaskGenericNotify+0x4a>
        __asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	61fb      	str	r3, [r7, #28]
    }
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80074a2:	f000 ff79 	bl	8008398 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80074a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d006      	beq.n	80074ba <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	3214      	adds	r2, #20
 80074b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80074ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4413      	add	r3, r2
 80074c0:	3354      	adds	r3, #84	; 0x54
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80074c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	4413      	add	r3, r2
 80074ce:	3354      	adds	r3, #84	; 0x54
 80074d0:	2202      	movs	r2, #2
 80074d2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d83b      	bhi.n	8007552 <xTaskGenericNotify+0xfe>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <xTaskGenericNotify+0x8c>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007571 	.word	0x08007571
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	08007511 	.word	0x08007511
 80074ec:	08007529 	.word	0x08007529
 80074f0:	08007537 	.word	0x08007537
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	3214      	adds	r2, #20
 80074fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	ea42 0103 	orr.w	r1, r2, r3
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	3214      	adds	r2, #20
 800750a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800750e:	e032      	b.n	8007576 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	3214      	adds	r2, #20
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	1c59      	adds	r1, r3, #1
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	3214      	adds	r2, #20
 8007522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007526:	e026      	b.n	8007576 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	3214      	adds	r2, #20
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007534:	e01f      	b.n	8007576 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800753a:	2b02      	cmp	r3, #2
 800753c:	d006      	beq.n	800754c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	3214      	adds	r2, #20
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800754a:	e014      	b.n	8007576 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800754c:	2300      	movs	r3, #0
 800754e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8007550:	e011      	b.n	8007576 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007552:	4b4c      	ldr	r3, [pc, #304]	; (8007684 <xTaskGenericNotify+0x230>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00c      	beq.n	8007574 <xTaskGenericNotify+0x120>
        __asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	61bb      	str	r3, [r7, #24]
    }
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <xTaskGenericNotify+0x11a>
                    break;
 8007570:	bf00      	nop
 8007572:	e000      	b.n	8007576 <xTaskGenericNotify+0x122>

                    break;
 8007574:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800757a:	2b01      	cmp	r3, #1
 800757c:	d17b      	bne.n	8007676 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758a:	68d2      	ldr	r2, [r2, #12]
 800758c:	609a      	str	r2, [r3, #8]
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007594:	6892      	ldr	r2, [r2, #8]
 8007596:	605a      	str	r2, [r3, #4]
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	3304      	adds	r3, #4
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d103      	bne.n	80075ac <xTaskGenericNotify+0x158>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	605a      	str	r2, [r3, #4]
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	2200      	movs	r2, #0
 80075b0:	615a      	str	r2, [r3, #20]
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	1e5a      	subs	r2, r3, #1
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	2201      	movs	r2, #1
 80075c2:	409a      	lsls	r2, r3
 80075c4:	4b30      	ldr	r3, [pc, #192]	; (8007688 <xTaskGenericNotify+0x234>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	4a2f      	ldr	r2, [pc, #188]	; (8007688 <xTaskGenericNotify+0x234>)
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d2:	492e      	ldr	r1, [pc, #184]	; (800768c <xTaskGenericNotify+0x238>)
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	3304      	adds	r3, #4
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e8:	609a      	str	r2, [r3, #8]
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	60da      	str	r2, [r3, #12]
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f8:	3204      	adds	r2, #4
 80075fa:	605a      	str	r2, [r3, #4]
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	1d1a      	adds	r2, r3, #4
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	609a      	str	r2, [r3, #8]
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4a1e      	ldr	r2, [pc, #120]	; (800768c <xTaskGenericNotify+0x238>)
 8007612:	441a      	add	r2, r3
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	615a      	str	r2, [r3, #20]
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761c:	491b      	ldr	r1, [pc, #108]	; (800768c <xTaskGenericNotify+0x238>)
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	1c59      	adds	r1, r3, #1
 800762c:	4817      	ldr	r0, [pc, #92]	; (800768c <xTaskGenericNotify+0x238>)
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4403      	add	r3, r0
 8007638:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <xTaskGenericNotify+0x204>
        __asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	617b      	str	r3, [r7, #20]
    }
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4b0c      	ldr	r3, [pc, #48]	; (8007690 <xTaskGenericNotify+0x23c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	429a      	cmp	r2, r3
 8007664:	d907      	bls.n	8007676 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <xTaskGenericNotify+0x240>)
 8007668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007676:	f000 febf 	bl	80083f8 <vPortExitCritical>

        return xReturn;
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800767c:	4618      	mov	r0, r3
 800767e:	3738      	adds	r7, #56	; 0x38
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	200001e0 	.word	0x200001e0
 8007688:	200001e4 	.word	0x200001e4
 800768c:	20000108 	.word	0x20000108
 8007690:	20000104 	.word	0x20000104
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8007698:	b580      	push	{r7, lr}
 800769a:	b092      	sub	sp, #72	; 0x48
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80076a6:	2301      	movs	r3, #1
 80076a8:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10a      	bne.n	80076c6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076e2:	f000 ff3b 	bl	800855c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 80076ea:	f3ef 8211 	mrs	r2, BASEPRI
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	623a      	str	r2, [r7, #32]
 8007700:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8007702:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8007706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007708:	2b00      	cmp	r3, #0
 800770a:	d006      	beq.n	800771a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800770c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	3214      	adds	r2, #20
 8007712:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007718:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800771a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4413      	add	r3, r2
 8007720:	3354      	adds	r3, #84	; 0x54
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	3354      	adds	r3, #84	; 0x54
 8007730:	2202      	movs	r2, #2
 8007732:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	2b04      	cmp	r3, #4
 8007738:	d83b      	bhi.n	80077b2 <xTaskGenericNotifyFromISR+0x11a>
 800773a:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <xTaskGenericNotifyFromISR+0xa8>)
 800773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007740:	080077d1 	.word	0x080077d1
 8007744:	08007755 	.word	0x08007755
 8007748:	08007771 	.word	0x08007771
 800774c:	08007789 	.word	0x08007789
 8007750:	08007797 	.word	0x08007797
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	3214      	adds	r2, #20
 800775a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	ea42 0103 	orr.w	r1, r2, r3
 8007764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	3214      	adds	r2, #20
 800776a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800776e:	e032      	b.n	80077d6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	3214      	adds	r2, #20
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	1c59      	adds	r1, r3, #1
 800777c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	3214      	adds	r2, #20
 8007782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007786:	e026      	b.n	80077d6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	3214      	adds	r2, #20
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007794:	e01f      	b.n	80077d6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007796:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800779a:	2b02      	cmp	r3, #2
 800779c:	d006      	beq.n	80077ac <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800779e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	3214      	adds	r2, #20
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80077aa:	e014      	b.n	80077d6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80077ac:	2300      	movs	r3, #0
 80077ae:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80077b0:	e011      	b.n	80077d6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80077b2:	4b60      	ldr	r3, [pc, #384]	; (8007934 <xTaskGenericNotifyFromISR+0x29c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00c      	beq.n	80077d4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	61bb      	str	r3, [r7, #24]
    }
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <xTaskGenericNotifyFromISR+0x136>
                    break;
 80077d0:	bf00      	nop
 80077d2:	e000      	b.n	80077d6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80077d4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80077d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80077da:	2b01      	cmp	r3, #1
 80077dc:	f040 809e 	bne.w	800791c <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80077e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	617b      	str	r3, [r7, #20]
    }
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077fe:	4b4e      	ldr	r3, [pc, #312]	; (8007938 <xTaskGenericNotifyFromISR+0x2a0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d15e      	bne.n	80078c4 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	633b      	str	r3, [r7, #48]	; 0x30
 800780c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007812:	68d2      	ldr	r2, [r2, #12]
 8007814:	609a      	str	r2, [r3, #8]
 8007816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800781c:	6892      	ldr	r2, [r2, #8]
 800781e:	605a      	str	r2, [r3, #4]
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007826:	3304      	adds	r3, #4
 8007828:	429a      	cmp	r2, r3
 800782a:	d103      	bne.n	8007834 <xTaskGenericNotifyFromISR+0x19c>
 800782c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	605a      	str	r2, [r3, #4]
 8007834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007836:	2200      	movs	r2, #0
 8007838:	615a      	str	r2, [r3, #20]
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	1e5a      	subs	r2, r3, #1
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	2201      	movs	r2, #1
 800784a:	409a      	lsls	r2, r3
 800784c:	4b3b      	ldr	r3, [pc, #236]	; (800793c <xTaskGenericNotifyFromISR+0x2a4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4313      	orrs	r3, r2
 8007852:	4a3a      	ldr	r2, [pc, #232]	; (800793c <xTaskGenericNotifyFromISR+0x2a4>)
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785a:	4939      	ldr	r1, [pc, #228]	; (8007940 <xTaskGenericNotifyFromISR+0x2a8>)
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	3304      	adds	r3, #4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800786c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800786e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007870:	609a      	str	r2, [r3, #8]
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007878:	60da      	str	r2, [r3, #12]
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007880:	3204      	adds	r2, #4
 8007882:	605a      	str	r2, [r3, #4]
 8007884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007886:	1d1a      	adds	r2, r3, #4
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	609a      	str	r2, [r3, #8]
 800788c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4a29      	ldr	r2, [pc, #164]	; (8007940 <xTaskGenericNotifyFromISR+0x2a8>)
 800789a:	441a      	add	r2, r3
 800789c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800789e:	615a      	str	r2, [r3, #20]
 80078a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	4926      	ldr	r1, [pc, #152]	; (8007940 <xTaskGenericNotifyFromISR+0x2a8>)
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	1c59      	adds	r1, r3, #1
 80078b4:	4822      	ldr	r0, [pc, #136]	; (8007940 <xTaskGenericNotifyFromISR+0x2a8>)
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4403      	add	r3, r0
 80078c0:	6019      	str	r1, [r3, #0]
 80078c2:	e01b      	b.n	80078fc <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80078c4:	4b1f      	ldr	r3, [pc, #124]	; (8007944 <xTaskGenericNotifyFromISR+0x2ac>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
 80078ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ce:	61da      	str	r2, [r3, #28]
 80078d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078d6:	621a      	str	r2, [r3, #32]
 80078d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078de:	3218      	adds	r2, #24
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e4:	f103 0218 	add.w	r2, r3, #24
 80078e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ee:	4a15      	ldr	r2, [pc, #84]	; (8007944 <xTaskGenericNotifyFromISR+0x2ac>)
 80078f0:	629a      	str	r2, [r3, #40]	; 0x28
 80078f2:	4b14      	ldr	r3, [pc, #80]	; (8007944 <xTaskGenericNotifyFromISR+0x2ac>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3301      	adds	r3, #1
 80078f8:	4a12      	ldr	r2, [pc, #72]	; (8007944 <xTaskGenericNotifyFromISR+0x2ac>)
 80078fa:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4b11      	ldr	r3, [pc, #68]	; (8007948 <xTaskGenericNotifyFromISR+0x2b0>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	429a      	cmp	r2, r3
 8007908:	d908      	bls.n	800791c <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800790a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007912:	2201      	movs	r2, #1
 8007914:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007916:	4b0d      	ldr	r3, [pc, #52]	; (800794c <xTaskGenericNotifyFromISR+0x2b4>)
 8007918:	2201      	movs	r2, #1
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791e:	613b      	str	r3, [r7, #16]
        __asm volatile
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f383 8811 	msr	BASEPRI, r3
    }
 8007926:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800792a:	4618      	mov	r0, r3
 800792c:	3748      	adds	r7, #72	; 0x48
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	200001e0 	.word	0x200001e0
 8007938:	20000204 	.word	0x20000204
 800793c:	200001e4 	.word	0x200001e4
 8007940:	20000108 	.word	0x20000108
 8007944:	2000019c 	.word	0x2000019c
 8007948:	20000104 	.word	0x20000104
 800794c:	200001f0 	.word	0x200001f0

08007950 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800795a:	4b36      	ldr	r3, [pc, #216]	; (8007a34 <prvAddCurrentTaskToDelayedList+0xe4>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007960:	4b35      	ldr	r3, [pc, #212]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3304      	adds	r3, #4
 8007966:	4618      	mov	r0, r3
 8007968:	f7fd ff3a 	bl	80057e0 <uxListRemove>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007972:	4b31      	ldr	r3, [pc, #196]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	2201      	movs	r2, #1
 800797a:	fa02 f303 	lsl.w	r3, r2, r3
 800797e:	43da      	mvns	r2, r3
 8007980:	4b2e      	ldr	r3, [pc, #184]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xec>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4013      	ands	r3, r2
 8007986:	4a2d      	ldr	r2, [pc, #180]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xec>)
 8007988:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007990:	d124      	bne.n	80079dc <prvAddCurrentTaskToDelayedList+0x8c>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d021      	beq.n	80079dc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007998:	4b29      	ldr	r3, [pc, #164]	; (8007a40 <prvAddCurrentTaskToDelayedList+0xf0>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	613b      	str	r3, [r7, #16]
 800799e:	4b26      	ldr	r3, [pc, #152]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	609a      	str	r2, [r3, #8]
 80079a6:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	6892      	ldr	r2, [r2, #8]
 80079ae:	60da      	str	r2, [r3, #12]
 80079b0:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	3204      	adds	r2, #4
 80079ba:	605a      	str	r2, [r3, #4]
 80079bc:	4b1e      	ldr	r3, [pc, #120]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	1d1a      	adds	r2, r3, #4
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	609a      	str	r2, [r3, #8]
 80079c6:	4b1c      	ldr	r3, [pc, #112]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1d      	ldr	r2, [pc, #116]	; (8007a40 <prvAddCurrentTaskToDelayedList+0xf0>)
 80079cc:	615a      	str	r2, [r3, #20]
 80079ce:	4b1c      	ldr	r3, [pc, #112]	; (8007a40 <prvAddCurrentTaskToDelayedList+0xf0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <prvAddCurrentTaskToDelayedList+0xf0>)
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80079da:	e026      	b.n	8007a2a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4413      	add	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079e4:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d209      	bcs.n	8007a08 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079f4:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <prvAddCurrentTaskToDelayedList+0xf4>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4619      	mov	r1, r3
 8007a00:	4610      	mov	r0, r2
 8007a02:	f7fd feb4 	bl	800576e <vListInsert>
}
 8007a06:	e010      	b.n	8007a2a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xf8>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3304      	adds	r3, #4
 8007a12:	4619      	mov	r1, r3
 8007a14:	4610      	mov	r0, r2
 8007a16:	f7fd feaa 	bl	800576e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <prvAddCurrentTaskToDelayedList+0xfc>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d202      	bcs.n	8007a2a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007a24:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <prvAddCurrentTaskToDelayedList+0xfc>)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6013      	str	r3, [r2, #0]
}
 8007a2a:	bf00      	nop
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	200001e0 	.word	0x200001e0
 8007a38:	20000104 	.word	0x20000104
 8007a3c:	200001e4 	.word	0x200001e4
 8007a40:	200001c8 	.word	0x200001c8
 8007a44:	20000198 	.word	0x20000198
 8007a48:	20000194 	.word	0x20000194
 8007a4c:	200001fc 	.word	0x200001fc

08007a50 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007a5a:	f000 faef 	bl	800803c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <xTimerCreateTimerTask+0x54>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <xTimerCreateTimerTask+0x58>)
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007a74:	490d      	ldr	r1, [pc, #52]	; (8007aac <xTimerCreateTimerTask+0x5c>)
 8007a76:	480e      	ldr	r0, [pc, #56]	; (8007ab0 <xTimerCreateTimerTask+0x60>)
 8007a78:	f7fe fcdc 	bl	8006434 <xTaskCreate>
 8007a7c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	603b      	str	r3, [r7, #0]
    }
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007a9a:	687b      	ldr	r3, [r7, #4]
    }
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000238 	.word	0x20000238
 8007aa8:	2000023c 	.word	0x2000023c
 8007aac:	08009fd4 	.word	0x08009fd4
 8007ab0:	08007ca9 	.word	0x08007ca9

08007ab4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007ac2:	202c      	movs	r0, #44	; 0x2c
 8007ac4:	f000 fd8a 	bl	80085dc <pvPortMalloc>
 8007ac8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00d      	beq.n	8007aec <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68b9      	ldr	r1, [r7, #8]
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 f805 	bl	8007af6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8007aec:	697b      	ldr	r3, [r7, #20]
        }
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10a      	bne.n	8007b20 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	617b      	str	r3, [r7, #20]
    }
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8007b20:	f000 fa8c 	bl	800803c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	6a3a      	ldr	r2, [r7, #32]
 8007b3a:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fd fe07 	bl	8005754 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d008      	beq.n	8007b5e <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b52:	f043 0304 	orr.w	r3, r3, #4
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8007b5e:	bf00      	nop
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <xTimerGenericCommand+0x2e>
        __asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	623b      	str	r3, [r7, #32]
    }
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007b96:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <xTimerGenericCommand+0x98>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d02a      	beq.n	8007bf4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b05      	cmp	r3, #5
 8007bae:	dc18      	bgt.n	8007be2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007bb0:	f7ff fb0e 	bl	80071d0 <xTaskGetSchedulerState>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d109      	bne.n	8007bce <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bba:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <xTimerGenericCommand+0x98>)
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	f107 0114 	add.w	r1, r7, #20
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc6:	f7fd ff37 	bl	8005a38 <xQueueGenericSend>
 8007bca:	6278      	str	r0, [r7, #36]	; 0x24
 8007bcc:	e012      	b.n	8007bf4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007bce:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <xTimerGenericCommand+0x98>)
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	f107 0114 	add.w	r1, r7, #20
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f7fd ff2d 	bl	8005a38 <xQueueGenericSend>
 8007bde:	6278      	str	r0, [r7, #36]	; 0x24
 8007be0:	e008      	b.n	8007bf4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <xTimerGenericCommand+0x98>)
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	f107 0114 	add.w	r1, r7, #20
 8007bea:	2300      	movs	r3, #0
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	f7fe f821 	bl	8005c34 <xQueueGenericSendFromISR>
 8007bf2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3728      	adds	r7, #40	; 0x28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000238 	.word	0x20000238

08007c04 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007c10:	e008      	b.n	8007c24 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	4413      	add	r3, r2
 8007c1a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	699a      	ldr	r2, [r3, #24]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	18d1      	adds	r1, r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f8dd 	bl	8007df0 <prvInsertTimerInActiveList>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1ea      	bne.n	8007c12 <prvReloadTimer+0xe>
        }
    }
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c52:	4b14      	ldr	r3, [pc, #80]	; (8007ca4 <prvProcessExpiredTimer+0x5c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fd fdbd 	bl	80057e0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7ff ffc3 	bl	8007c04 <prvReloadTimer>
 8007c7e:	e008      	b.n	8007c92 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	4798      	blx	r3
    }
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000230 	.word	0x20000230

08007ca8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cb0:	f107 0308 	add.w	r3, r7, #8
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 f857 	bl	8007d68 <prvGetNextExpireTime>
 8007cba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f803 	bl	8007ccc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007cc6:	f000 f8d5 	bl	8007e74 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cca:	e7f1      	b.n	8007cb0 <prvTimerTask+0x8>

08007ccc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007cd6:	f7fe fd69 	bl	80067ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cda:	f107 0308 	add.w	r3, r7, #8
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 f866 	bl	8007db0 <prvSampleTimeNow>
 8007ce4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d130      	bne.n	8007d4e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <prvProcessTimerOrBlockTask+0x3c>
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d806      	bhi.n	8007d08 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007cfa:	f7fe fd65 	bl	80067c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007cfe:	68f9      	ldr	r1, [r7, #12]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff ffa1 	bl	8007c48 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007d06:	e024      	b.n	8007d52 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d008      	beq.n	8007d20 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <prvProcessTimerOrBlockTask+0x90>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <prvProcessTimerOrBlockTask+0x50>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <prvProcessTimerOrBlockTask+0x52>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d20:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <prvProcessTimerOrBlockTask+0x94>)
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	f7fe fb4d 	bl	80063cc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007d32:	f7fe fd49 	bl	80067c8 <xTaskResumeAll>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007d3c:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <prvProcessTimerOrBlockTask+0x98>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	f3bf 8f6f 	isb	sy
    }
 8007d4c:	e001      	b.n	8007d52 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007d4e:	f7fe fd3b 	bl	80067c8 <xTaskResumeAll>
    }
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000234 	.word	0x20000234
 8007d60:	20000238 	.word	0x20000238
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d70:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <prvGetNextExpireTime+0x44>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <prvGetNextExpireTime+0x16>
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	e000      	b.n	8007d80 <prvGetNextExpireTime+0x18>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d105      	bne.n	8007d98 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d8c:	4b07      	ldr	r3, [pc, #28]	; (8007dac <prvGetNextExpireTime+0x44>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	e001      	b.n	8007d9c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
    }
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000230 	.word	0x20000230

08007db0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007db8:	f7fe fe02 	bl	80069c0 <xTaskGetTickCount>
 8007dbc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007dbe:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <prvSampleTimeNow+0x3c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d205      	bcs.n	8007dd4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007dc8:	f000 f912 	bl	8007ff0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e002      	b.n	8007dda <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007dda:	4a04      	ldr	r2, [pc, #16]	; (8007dec <prvSampleTimeNow+0x3c>)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007de0:	68fb      	ldr	r3, [r7, #12]
    }
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20000240 	.word	0x20000240

08007df0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d812      	bhi.n	8007e3c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d302      	bcc.n	8007e2a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e01b      	b.n	8007e62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <prvInsertTimerInActiveList+0x7c>)
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3304      	adds	r3, #4
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7fd fc9a 	bl	800576e <vListInsert>
 8007e3a:	e012      	b.n	8007e62 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d206      	bcs.n	8007e52 <prvInsertTimerInActiveList+0x62>
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d302      	bcc.n	8007e52 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	e007      	b.n	8007e62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e52:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <prvInsertTimerInActiveList+0x80>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	f7fd fc86 	bl	800576e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007e62:	697b      	ldr	r3, [r7, #20]
    }
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	20000234 	.word	0x20000234
 8007e70:	20000230 	.word	0x20000230

08007e74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e7a:	e0a6      	b.n	8007fca <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f2c0 80a2 	blt.w	8007fc8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	3304      	adds	r3, #4
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fd fca3 	bl	80057e0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e9a:	1d3b      	adds	r3, r7, #4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff ff87 	bl	8007db0 <prvSampleTimeNow>
 8007ea2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	f200 808e 	bhi.w	8007fca <prvProcessReceivedCommands+0x156>
 8007eae:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <prvProcessReceivedCommands+0x40>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007ed9 	.word	0x08007ed9
 8007eb8:	08007ed9 	.word	0x08007ed9
 8007ebc:	08007f41 	.word	0x08007f41
 8007ec0:	08007f55 	.word	0x08007f55
 8007ec4:	08007f9f 	.word	0x08007f9f
 8007ec8:	08007ed9 	.word	0x08007ed9
 8007ecc:	08007ed9 	.word	0x08007ed9
 8007ed0:	08007f41 	.word	0x08007f41
 8007ed4:	08007f55 	.word	0x08007f55
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	18d1      	adds	r1, r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	69f8      	ldr	r0, [r7, #28]
 8007ef8:	f7ff ff7a 	bl	8007df0 <prvInsertTimerInActiveList>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d063      	beq.n	8007fca <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d009      	beq.n	8007f24 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	4413      	add	r3, r2
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	69f8      	ldr	r0, [r7, #28]
 8007f1e:	f7ff fe71 	bl	8007c04 <prvReloadTimer>
 8007f22:	e008      	b.n	8007f36 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f2a:	f023 0301 	bic.w	r3, r3, #1
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	69f8      	ldr	r0, [r7, #28]
 8007f3c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007f3e:	e044      	b.n	8007fca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f46:	f023 0301 	bic.w	r3, r3, #1
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007f52:	e03a      	b.n	8007fca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	617b      	str	r3, [r7, #20]
    }
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	699a      	ldr	r2, [r3, #24]
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	18d1      	adds	r1, r2, r3
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	69f8      	ldr	r0, [r7, #28]
 8007f98:	f7ff ff2a 	bl	8007df0 <prvInsertTimerInActiveList>
                        break;
 8007f9c:	e015      	b.n	8007fca <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d103      	bne.n	8007fb4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007fac:	69f8      	ldr	r0, [r7, #28]
 8007fae:	f000 fbcf 	bl	8008750 <vPortFree>
 8007fb2:	e00a      	b.n	8007fca <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fba:	f023 0301 	bic.w	r3, r3, #1
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007fc6:	e000      	b.n	8007fca <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007fc8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fca:	4b08      	ldr	r3, [pc, #32]	; (8007fec <prvProcessReceivedCommands+0x178>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f107 0108 	add.w	r1, r7, #8
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fd fedf 	bl	8005d98 <xQueueReceive>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f af4d 	bne.w	8007e7c <prvProcessReceivedCommands+0x8>
        }
    }
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	3720      	adds	r7, #32
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20000238 	.word	0x20000238

08007ff0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ff6:	e009      	b.n	800800c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ff8:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <prvSwitchTimerLists+0x44>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008002:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008006:	6838      	ldr	r0, [r7, #0]
 8008008:	f7ff fe1e 	bl	8007c48 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <prvSwitchTimerLists+0x44>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f0      	bne.n	8007ff8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008016:	4b07      	ldr	r3, [pc, #28]	; (8008034 <prvSwitchTimerLists+0x44>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800801c:	4b06      	ldr	r3, [pc, #24]	; (8008038 <prvSwitchTimerLists+0x48>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a04      	ldr	r2, [pc, #16]	; (8008034 <prvSwitchTimerLists+0x44>)
 8008022:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008024:	4a04      	ldr	r2, [pc, #16]	; (8008038 <prvSwitchTimerLists+0x48>)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6013      	str	r3, [r2, #0]
    }
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000230 	.word	0x20000230
 8008038:	20000234 	.word	0x20000234

0800803c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800803c:	b580      	push	{r7, lr}
 800803e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008040:	f000 f9aa 	bl	8008398 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008044:	4b12      	ldr	r3, [pc, #72]	; (8008090 <prvCheckForValidListAndQueue+0x54>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d11d      	bne.n	8008088 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800804c:	4811      	ldr	r0, [pc, #68]	; (8008094 <prvCheckForValidListAndQueue+0x58>)
 800804e:	f7fd fb61 	bl	8005714 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008052:	4811      	ldr	r0, [pc, #68]	; (8008098 <prvCheckForValidListAndQueue+0x5c>)
 8008054:	f7fd fb5e 	bl	8005714 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008058:	4b10      	ldr	r3, [pc, #64]	; (800809c <prvCheckForValidListAndQueue+0x60>)
 800805a:	4a0e      	ldr	r2, [pc, #56]	; (8008094 <prvCheckForValidListAndQueue+0x58>)
 800805c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800805e:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <prvCheckForValidListAndQueue+0x64>)
 8008060:	4a0d      	ldr	r2, [pc, #52]	; (8008098 <prvCheckForValidListAndQueue+0x5c>)
 8008062:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008064:	2200      	movs	r2, #0
 8008066:	210c      	movs	r1, #12
 8008068:	200a      	movs	r0, #10
 800806a:	f7fd fc73 	bl	8005954 <xQueueGenericCreate>
 800806e:	4603      	mov	r3, r0
 8008070:	4a07      	ldr	r2, [pc, #28]	; (8008090 <prvCheckForValidListAndQueue+0x54>)
 8008072:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008074:	4b06      	ldr	r3, [pc, #24]	; (8008090 <prvCheckForValidListAndQueue+0x54>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d005      	beq.n	8008088 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800807c:	4b04      	ldr	r3, [pc, #16]	; (8008090 <prvCheckForValidListAndQueue+0x54>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4908      	ldr	r1, [pc, #32]	; (80080a4 <prvCheckForValidListAndQueue+0x68>)
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe f954 	bl	8006330 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008088:	f000 f9b6 	bl	80083f8 <vPortExitCritical>
    }
 800808c:	bf00      	nop
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20000238 	.word	0x20000238
 8008094:	20000208 	.word	0x20000208
 8008098:	2000021c 	.word	0x2000021c
 800809c:	20000230 	.word	0x20000230
 80080a0:	20000234 	.word	0x20000234
 80080a4:	08009fdc 	.word	0x08009fdc

080080a8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <xTimerIsTimerActive+0x28>
        __asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	60fb      	str	r3, [r7, #12]
    }
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 80080d0:	f000 f962 	bl	8008398 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d102      	bne.n	80080e8 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	e001      	b.n	80080ec <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80080ec:	f000 f984 	bl	80083f8 <vPortExitCritical>

        return xReturn;
 80080f0:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b086      	sub	sp, #24
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <pvTimerGetTimerID+0x28>
        __asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60fb      	str	r3, [r7, #12]
    }
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8008122:	f000 f939 	bl	8008398 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 800812c:	f000 f964 	bl	80083f8 <vPortExitCritical>

        return pvReturn;
 8008130:	693b      	ldr	r3, [r7, #16]
    }
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3b04      	subs	r3, #4
 800814c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008154:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3b04      	subs	r3, #4
 800815a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f023 0201 	bic.w	r2, r3, #1
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3b04      	subs	r3, #4
 800816a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800816c:	4a0c      	ldr	r2, [pc, #48]	; (80081a0 <pxPortInitialiseStack+0x64>)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3b14      	subs	r3, #20
 8008176:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3b04      	subs	r3, #4
 8008182:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f06f 0202 	mvn.w	r2, #2
 800818a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3b20      	subs	r3, #32
 8008190:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008192:	68fb      	ldr	r3, [r7, #12]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	080081a5 	.word	0x080081a5

080081a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <prvTaskExitError+0x54>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b6:	d00a      	beq.n	80081ce <prvTaskExitError+0x2a>
        __asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	60fb      	str	r3, [r7, #12]
    }
 80081ca:	bf00      	nop
 80081cc:	e7fe      	b.n	80081cc <prvTaskExitError+0x28>
        __asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	60bb      	str	r3, [r7, #8]
    }
 80081e0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80081e2:	bf00      	nop
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0fc      	beq.n	80081e4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	20000024 	.word	0x20000024
 80081fc:	00000000 	.word	0x00000000

08008200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <pxCurrentTCBConst2>)
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	6808      	ldr	r0, [r1, #0]
 8008206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820a:	f380 8809 	msr	PSP, r0
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f04f 0000 	mov.w	r0, #0
 8008216:	f380 8811 	msr	BASEPRI, r0
 800821a:	4770      	bx	lr
 800821c:	f3af 8000 	nop.w

08008220 <pxCurrentTCBConst2>:
 8008220:	20000104 	.word	0x20000104
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008228:	4808      	ldr	r0, [pc, #32]	; (800824c <prvPortStartFirstTask+0x24>)
 800822a:	6800      	ldr	r0, [r0, #0]
 800822c:	6800      	ldr	r0, [r0, #0]
 800822e:	f380 8808 	msr	MSP, r0
 8008232:	f04f 0000 	mov.w	r0, #0
 8008236:	f380 8814 	msr	CONTROL, r0
 800823a:	b662      	cpsie	i
 800823c:	b661      	cpsie	f
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	df00      	svc	0
 8008248:	bf00      	nop
 800824a:	0000      	.short	0x0000
 800824c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008250:	bf00      	nop
 8008252:	bf00      	nop

08008254 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800825a:	4b46      	ldr	r3, [pc, #280]	; (8008374 <xPortStartScheduler+0x120>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a46      	ldr	r2, [pc, #280]	; (8008378 <xPortStartScheduler+0x124>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d10a      	bne.n	800827a <xPortStartScheduler+0x26>
        __asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	613b      	str	r3, [r7, #16]
    }
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800827a:	4b3e      	ldr	r3, [pc, #248]	; (8008374 <xPortStartScheduler+0x120>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a3f      	ldr	r2, [pc, #252]	; (800837c <xPortStartScheduler+0x128>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d10a      	bne.n	800829a <xPortStartScheduler+0x46>
        __asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	60fb      	str	r3, [r7, #12]
    }
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800829a:	4b39      	ldr	r3, [pc, #228]	; (8008380 <xPortStartScheduler+0x12c>)
 800829c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	22ff      	movs	r2, #255	; 0xff
 80082aa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	4b31      	ldr	r3, [pc, #196]	; (8008384 <xPortStartScheduler+0x130>)
 80082c0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082c2:	4b31      	ldr	r3, [pc, #196]	; (8008388 <xPortStartScheduler+0x134>)
 80082c4:	2207      	movs	r2, #7
 80082c6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082c8:	e009      	b.n	80082de <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80082ca:	4b2f      	ldr	r3, [pc, #188]	; (8008388 <xPortStartScheduler+0x134>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	4a2d      	ldr	r2, [pc, #180]	; (8008388 <xPortStartScheduler+0x134>)
 80082d2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e6:	2b80      	cmp	r3, #128	; 0x80
 80082e8:	d0ef      	beq.n	80082ca <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082ea:	4b27      	ldr	r3, [pc, #156]	; (8008388 <xPortStartScheduler+0x134>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f1c3 0307 	rsb	r3, r3, #7
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d00a      	beq.n	800830c <xPortStartScheduler+0xb8>
        __asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	60bb      	str	r3, [r7, #8]
    }
 8008308:	bf00      	nop
 800830a:	e7fe      	b.n	800830a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800830c:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <xPortStartScheduler+0x134>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	4a1d      	ldr	r2, [pc, #116]	; (8008388 <xPortStartScheduler+0x134>)
 8008314:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008316:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <xPortStartScheduler+0x134>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800831e:	4a1a      	ldr	r2, [pc, #104]	; (8008388 <xPortStartScheduler+0x134>)
 8008320:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	b2da      	uxtb	r2, r3
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800832a:	4b18      	ldr	r3, [pc, #96]	; (800838c <xPortStartScheduler+0x138>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a17      	ldr	r2, [pc, #92]	; (800838c <xPortStartScheduler+0x138>)
 8008330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008334:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008336:	4b15      	ldr	r3, [pc, #84]	; (800838c <xPortStartScheduler+0x138>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a14      	ldr	r2, [pc, #80]	; (800838c <xPortStartScheduler+0x138>)
 800833c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008340:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008342:	f000 f8db 	bl	80084fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008346:	4b12      	ldr	r3, [pc, #72]	; (8008390 <xPortStartScheduler+0x13c>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800834c:	f000 f8fa 	bl	8008544 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008350:	4b10      	ldr	r3, [pc, #64]	; (8008394 <xPortStartScheduler+0x140>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a0f      	ldr	r2, [pc, #60]	; (8008394 <xPortStartScheduler+0x140>)
 8008356:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800835a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800835c:	f7ff ff64 	bl	8008228 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008360:	f7fe fc60 	bl	8006c24 <vTaskSwitchContext>
    prvTaskExitError();
 8008364:	f7ff ff1e 	bl	80081a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	e000ed00 	.word	0xe000ed00
 8008378:	410fc271 	.word	0x410fc271
 800837c:	410fc270 	.word	0x410fc270
 8008380:	e000e400 	.word	0xe000e400
 8008384:	20000244 	.word	0x20000244
 8008388:	20000248 	.word	0x20000248
 800838c:	e000ed20 	.word	0xe000ed20
 8008390:	20000024 	.word	0x20000024
 8008394:	e000ef34 	.word	0xe000ef34

08008398 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
        __asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	607b      	str	r3, [r7, #4]
    }
 80083b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80083b2:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <vPortEnterCritical+0x58>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3301      	adds	r3, #1
 80083b8:	4a0d      	ldr	r2, [pc, #52]	; (80083f0 <vPortEnterCritical+0x58>)
 80083ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80083bc:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <vPortEnterCritical+0x58>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d10f      	bne.n	80083e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083c4:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <vPortEnterCritical+0x5c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	603b      	str	r3, [r7, #0]
    }
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <vPortEnterCritical+0x4a>
    }
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	20000024 	.word	0x20000024
 80083f4:	e000ed04 	.word	0xe000ed04

080083f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80083fe:	4b12      	ldr	r3, [pc, #72]	; (8008448 <vPortExitCritical+0x50>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <vPortExitCritical+0x24>
        __asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	607b      	str	r3, [r7, #4]
    }
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <vPortExitCritical+0x50>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3b01      	subs	r3, #1
 8008422:	4a09      	ldr	r2, [pc, #36]	; (8008448 <vPortExitCritical+0x50>)
 8008424:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008426:	4b08      	ldr	r3, [pc, #32]	; (8008448 <vPortExitCritical+0x50>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <vPortExitCritical+0x42>
 800842e:	2300      	movs	r3, #0
 8008430:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	f383 8811 	msr	BASEPRI, r3
    }
 8008438:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	20000024 	.word	0x20000024
 800844c:	00000000 	.word	0x00000000

08008450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008450:	f3ef 8009 	mrs	r0, PSP
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	4b15      	ldr	r3, [pc, #84]	; (80084b0 <pxCurrentTCBConst>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	f01e 0f10 	tst.w	lr, #16
 8008460:	bf08      	it	eq
 8008462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846a:	6010      	str	r0, [r2, #0]
 800846c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008474:	f380 8811 	msr	BASEPRI, r0
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f7fe fbd0 	bl	8006c24 <vTaskSwitchContext>
 8008484:	f04f 0000 	mov.w	r0, #0
 8008488:	f380 8811 	msr	BASEPRI, r0
 800848c:	bc09      	pop	{r0, r3}
 800848e:	6819      	ldr	r1, [r3, #0]
 8008490:	6808      	ldr	r0, [r1, #0]
 8008492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008496:	f01e 0f10 	tst.w	lr, #16
 800849a:	bf08      	it	eq
 800849c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084a0:	f380 8809 	msr	PSP, r0
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	f3af 8000 	nop.w

080084b0 <pxCurrentTCBConst>:
 80084b0:	20000104 	.word	0x20000104
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop

080084b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
        __asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	607b      	str	r3, [r7, #4]
    }
 80084d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80084d2:	f7fe fa91 	bl	80069f8 <xTaskIncrementTick>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084dc:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <SysTick_Handler+0x40>)
 80084de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	2300      	movs	r3, #0
 80084e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	f383 8811 	msr	BASEPRI, r3
    }
 80084ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	e000ed04 	.word	0xe000ed04

080084fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008500:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <vPortSetupTimerInterrupt+0x34>)
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008506:	4b0b      	ldr	r3, [pc, #44]	; (8008534 <vPortSetupTimerInterrupt+0x38>)
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800850c:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <vPortSetupTimerInterrupt+0x3c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a0a      	ldr	r2, [pc, #40]	; (800853c <vPortSetupTimerInterrupt+0x40>)
 8008512:	fba2 2303 	umull	r2, r3, r2, r3
 8008516:	08db      	lsrs	r3, r3, #3
 8008518:	4a09      	ldr	r2, [pc, #36]	; (8008540 <vPortSetupTimerInterrupt+0x44>)
 800851a:	3b01      	subs	r3, #1
 800851c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800851e:	4b04      	ldr	r3, [pc, #16]	; (8008530 <vPortSetupTimerInterrupt+0x34>)
 8008520:	2207      	movs	r2, #7
 8008522:	601a      	str	r2, [r3, #0]
}
 8008524:	bf00      	nop
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	e000e010 	.word	0xe000e010
 8008534:	e000e018 	.word	0xe000e018
 8008538:	20000010 	.word	0x20000010
 800853c:	cccccccd 	.word	0xcccccccd
 8008540:	e000e014 	.word	0xe000e014

08008544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008554 <vPortEnableVFP+0x10>
 8008548:	6801      	ldr	r1, [r0, #0]
 800854a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800854e:	6001      	str	r1, [r0, #0]
 8008550:	4770      	bx	lr
 8008552:	0000      	.short	0x0000
 8008554:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop

0800855c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008562:	f3ef 8305 	mrs	r3, IPSR
 8008566:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b0f      	cmp	r3, #15
 800856c:	d914      	bls.n	8008598 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800856e:	4a17      	ldr	r2, [pc, #92]	; (80085cc <vPortValidateInterruptPriority+0x70>)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008578:	4b15      	ldr	r3, [pc, #84]	; (80085d0 <vPortValidateInterruptPriority+0x74>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	7afa      	ldrb	r2, [r7, #11]
 800857e:	429a      	cmp	r2, r3
 8008580:	d20a      	bcs.n	8008598 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	607b      	str	r3, [r7, #4]
    }
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008598:	4b0e      	ldr	r3, [pc, #56]	; (80085d4 <vPortValidateInterruptPriority+0x78>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085a0:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <vPortValidateInterruptPriority+0x7c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d90a      	bls.n	80085be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	603b      	str	r3, [r7, #0]
    }
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <vPortValidateInterruptPriority+0x60>
    }
 80085be:	bf00      	nop
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	e000e3f0 	.word	0xe000e3f0
 80085d0:	20000244 	.word	0x20000244
 80085d4:	e000ed0c 	.word	0xe000ed0c
 80085d8:	20000248 	.word	0x20000248

080085dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80085e8:	f7fe f8e0 	bl	80067ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80085ec:	4b53      	ldr	r3, [pc, #332]	; (800873c <pvPortMalloc+0x160>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80085f4:	f000 f908 	bl	8008808 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d012      	beq.n	8008624 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80085fe:	2208      	movs	r2, #8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	3308      	adds	r3, #8
 800860a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	43db      	mvns	r3, r3
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	429a      	cmp	r2, r3
 8008614:	d804      	bhi.n	8008620 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	4413      	add	r3, r2
 800861c:	607b      	str	r3, [r7, #4]
 800861e:	e001      	b.n	8008624 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	db70      	blt.n	800870c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d06d      	beq.n	800870c <pvPortMalloc+0x130>
 8008630:	4b43      	ldr	r3, [pc, #268]	; (8008740 <pvPortMalloc+0x164>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	429a      	cmp	r2, r3
 8008638:	d868      	bhi.n	800870c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800863a:	4b42      	ldr	r3, [pc, #264]	; (8008744 <pvPortMalloc+0x168>)
 800863c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800863e:	4b41      	ldr	r3, [pc, #260]	; (8008744 <pvPortMalloc+0x168>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008644:	e004      	b.n	8008650 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	429a      	cmp	r2, r3
 8008658:	d903      	bls.n	8008662 <pvPortMalloc+0x86>
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f1      	bne.n	8008646 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008662:	4b36      	ldr	r3, [pc, #216]	; (800873c <pvPortMalloc+0x160>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008668:	429a      	cmp	r2, r3
 800866a:	d04f      	beq.n	800870c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2208      	movs	r2, #8
 8008672:	4413      	add	r3, r2
 8008674:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	1ad2      	subs	r2, r2, r3
 8008686:	2308      	movs	r3, #8
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	429a      	cmp	r2, r3
 800868c:	d91f      	bls.n	80086ce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800868e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4413      	add	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <pvPortMalloc+0xda>
        __asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	613b      	str	r3, [r7, #16]
    }
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	1ad2      	subs	r2, r2, r3
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086c8:	6978      	ldr	r0, [r7, #20]
 80086ca:	f000 f8f9 	bl	80088c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086ce:	4b1c      	ldr	r3, [pc, #112]	; (8008740 <pvPortMalloc+0x164>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	4a19      	ldr	r2, [pc, #100]	; (8008740 <pvPortMalloc+0x164>)
 80086da:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086dc:	4b18      	ldr	r3, [pc, #96]	; (8008740 <pvPortMalloc+0x164>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	4b19      	ldr	r3, [pc, #100]	; (8008748 <pvPortMalloc+0x16c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d203      	bcs.n	80086f0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086e8:	4b15      	ldr	r3, [pc, #84]	; (8008740 <pvPortMalloc+0x164>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a16      	ldr	r2, [pc, #88]	; (8008748 <pvPortMalloc+0x16c>)
 80086ee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008702:	4b12      	ldr	r3, [pc, #72]	; (800874c <pvPortMalloc+0x170>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	4a10      	ldr	r2, [pc, #64]	; (800874c <pvPortMalloc+0x170>)
 800870a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800870c:	f7fe f85c 	bl	80067c8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <pvPortMalloc+0x154>
        __asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	60fb      	str	r3, [r7, #12]
    }
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <pvPortMalloc+0x152>
    return pvReturn;
 8008730:	69fb      	ldr	r3, [r7, #28]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3728      	adds	r7, #40	; 0x28
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20012e54 	.word	0x20012e54
 8008740:	20012e58 	.word	0x20012e58
 8008744:	20012e4c 	.word	0x20012e4c
 8008748:	20012e5c 	.word	0x20012e5c
 800874c:	20012e60 	.word	0x20012e60

08008750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d049      	beq.n	80087f6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008762:	2308      	movs	r3, #8
 8008764:	425b      	negs	r3, r3
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	4413      	add	r3, r2
 800876a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	db0a      	blt.n	800878e <vPortFree+0x3e>
        __asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	60fb      	str	r3, [r7, #12]
    }
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <vPortFree+0x5c>
        __asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	60bb      	str	r3, [r7, #8]
    }
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	0fdb      	lsrs	r3, r3, #31
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d01c      	beq.n	80087f6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d118      	bne.n	80087f6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80087d0:	f7fd ffec 	bl	80067ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	4b09      	ldr	r3, [pc, #36]	; (8008800 <vPortFree+0xb0>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4413      	add	r3, r2
 80087de:	4a08      	ldr	r2, [pc, #32]	; (8008800 <vPortFree+0xb0>)
 80087e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087e2:	6938      	ldr	r0, [r7, #16]
 80087e4:	f000 f86c 	bl	80088c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80087e8:	4b06      	ldr	r3, [pc, #24]	; (8008804 <vPortFree+0xb4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3301      	adds	r3, #1
 80087ee:	4a05      	ldr	r2, [pc, #20]	; (8008804 <vPortFree+0xb4>)
 80087f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80087f2:	f7fd ffe9 	bl	80067c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80087f6:	bf00      	nop
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20012e58 	.word	0x20012e58
 8008804:	20012e64 	.word	0x20012e64

08008808 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800880e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008812:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008814:	4b25      	ldr	r3, [pc, #148]	; (80088ac <prvHeapInit+0xa4>)
 8008816:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f003 0307 	and.w	r3, r3, #7
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00c      	beq.n	800883c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3307      	adds	r3, #7
 8008826:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0307 	bic.w	r3, r3, #7
 800882e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	4a1d      	ldr	r2, [pc, #116]	; (80088ac <prvHeapInit+0xa4>)
 8008838:	4413      	add	r3, r2
 800883a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008840:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <prvHeapInit+0xa8>)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008846:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <prvHeapInit+0xa8>)
 8008848:	2200      	movs	r2, #0
 800884a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4413      	add	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008854:	2208      	movs	r2, #8
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	1a9b      	subs	r3, r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f023 0307 	bic.w	r3, r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <prvHeapInit+0xac>)
 8008868:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800886a:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <prvHeapInit+0xac>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2200      	movs	r2, #0
 8008870:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008872:	4b10      	ldr	r3, [pc, #64]	; (80088b4 <prvHeapInit+0xac>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	1ad2      	subs	r2, r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <prvHeapInit+0xac>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	4a08      	ldr	r2, [pc, #32]	; (80088b8 <prvHeapInit+0xb0>)
 8008896:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	4a07      	ldr	r2, [pc, #28]	; (80088bc <prvHeapInit+0xb4>)
 800889e:	6013      	str	r3, [r2, #0]
}
 80088a0:	bf00      	nop
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	2000024c 	.word	0x2000024c
 80088b0:	20012e4c 	.word	0x20012e4c
 80088b4:	20012e54 	.word	0x20012e54
 80088b8:	20012e5c 	.word	0x20012e5c
 80088bc:	20012e58 	.word	0x20012e58

080088c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088c8:	4b28      	ldr	r3, [pc, #160]	; (800896c <prvInsertBlockIntoFreeList+0xac>)
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	e002      	b.n	80088d4 <prvInsertBlockIntoFreeList+0x14>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d8f7      	bhi.n	80088ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d108      	bne.n	8008902 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	441a      	add	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	441a      	add	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d118      	bne.n	8008948 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	4b15      	ldr	r3, [pc, #84]	; (8008970 <prvInsertBlockIntoFreeList+0xb0>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	429a      	cmp	r2, r3
 8008920:	d00d      	beq.n	800893e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	441a      	add	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	e008      	b.n	8008950 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800893e:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <prvInsertBlockIntoFreeList+0xb0>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	e003      	b.n	8008950 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d002      	beq.n	800895e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800895e:	bf00      	nop
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	20012e4c 	.word	0x20012e4c
 8008970:	20012e54 	.word	0x20012e54

08008974 <__libc_init_array>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4d0d      	ldr	r5, [pc, #52]	; (80089ac <__libc_init_array+0x38>)
 8008978:	4c0d      	ldr	r4, [pc, #52]	; (80089b0 <__libc_init_array+0x3c>)
 800897a:	1b64      	subs	r4, r4, r5
 800897c:	10a4      	asrs	r4, r4, #2
 800897e:	2600      	movs	r6, #0
 8008980:	42a6      	cmp	r6, r4
 8008982:	d109      	bne.n	8008998 <__libc_init_array+0x24>
 8008984:	4d0b      	ldr	r5, [pc, #44]	; (80089b4 <__libc_init_array+0x40>)
 8008986:	4c0c      	ldr	r4, [pc, #48]	; (80089b8 <__libc_init_array+0x44>)
 8008988:	f001 f956 	bl	8009c38 <_init>
 800898c:	1b64      	subs	r4, r4, r5
 800898e:	10a4      	asrs	r4, r4, #2
 8008990:	2600      	movs	r6, #0
 8008992:	42a6      	cmp	r6, r4
 8008994:	d105      	bne.n	80089a2 <__libc_init_array+0x2e>
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	f855 3b04 	ldr.w	r3, [r5], #4
 800899c:	4798      	blx	r3
 800899e:	3601      	adds	r6, #1
 80089a0:	e7ee      	b.n	8008980 <__libc_init_array+0xc>
 80089a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a6:	4798      	blx	r3
 80089a8:	3601      	adds	r6, #1
 80089aa:	e7f2      	b.n	8008992 <__libc_init_array+0x1e>
 80089ac:	0800a09c 	.word	0x0800a09c
 80089b0:	0800a09c 	.word	0x0800a09c
 80089b4:	0800a09c 	.word	0x0800a09c
 80089b8:	0800a0a0 	.word	0x0800a0a0

080089bc <memcpy>:
 80089bc:	440a      	add	r2, r1
 80089be:	4291      	cmp	r1, r2
 80089c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80089c4:	d100      	bne.n	80089c8 <memcpy+0xc>
 80089c6:	4770      	bx	lr
 80089c8:	b510      	push	{r4, lr}
 80089ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089d2:	4291      	cmp	r1, r2
 80089d4:	d1f9      	bne.n	80089ca <memcpy+0xe>
 80089d6:	bd10      	pop	{r4, pc}

080089d8 <memset>:
 80089d8:	4402      	add	r2, r0
 80089da:	4603      	mov	r3, r0
 80089dc:	4293      	cmp	r3, r2
 80089de:	d100      	bne.n	80089e2 <memset+0xa>
 80089e0:	4770      	bx	lr
 80089e2:	f803 1b01 	strb.w	r1, [r3], #1
 80089e6:	e7f9      	b.n	80089dc <memset+0x4>

080089e8 <iprintf>:
 80089e8:	b40f      	push	{r0, r1, r2, r3}
 80089ea:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <iprintf+0x2c>)
 80089ec:	b513      	push	{r0, r1, r4, lr}
 80089ee:	681c      	ldr	r4, [r3, #0]
 80089f0:	b124      	cbz	r4, 80089fc <iprintf+0x14>
 80089f2:	69a3      	ldr	r3, [r4, #24]
 80089f4:	b913      	cbnz	r3, 80089fc <iprintf+0x14>
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 f886 	bl	8008b08 <__sinit>
 80089fc:	ab05      	add	r3, sp, #20
 80089fe:	9a04      	ldr	r2, [sp, #16]
 8008a00:	68a1      	ldr	r1, [r4, #8]
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	4620      	mov	r0, r4
 8008a06:	f000 faff 	bl	8009008 <_vfiprintf_r>
 8008a0a:	b002      	add	sp, #8
 8008a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a10:	b004      	add	sp, #16
 8008a12:	4770      	bx	lr
 8008a14:	20000028 	.word	0x20000028

08008a18 <siprintf>:
 8008a18:	b40e      	push	{r1, r2, r3}
 8008a1a:	b500      	push	{lr}
 8008a1c:	b09c      	sub	sp, #112	; 0x70
 8008a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8008a20:	9002      	str	r0, [sp, #8]
 8008a22:	9006      	str	r0, [sp, #24]
 8008a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a28:	4809      	ldr	r0, [pc, #36]	; (8008a50 <siprintf+0x38>)
 8008a2a:	9107      	str	r1, [sp, #28]
 8008a2c:	9104      	str	r1, [sp, #16]
 8008a2e:	4909      	ldr	r1, [pc, #36]	; (8008a54 <siprintf+0x3c>)
 8008a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a34:	9105      	str	r1, [sp, #20]
 8008a36:	6800      	ldr	r0, [r0, #0]
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	a902      	add	r1, sp, #8
 8008a3c:	f000 f9ba 	bl	8008db4 <_svfiprintf_r>
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	2200      	movs	r2, #0
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	b01c      	add	sp, #112	; 0x70
 8008a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a4c:	b003      	add	sp, #12
 8008a4e:	4770      	bx	lr
 8008a50:	20000028 	.word	0x20000028
 8008a54:	ffff0208 	.word	0xffff0208

08008a58 <std>:
 8008a58:	2300      	movs	r3, #0
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a66:	6083      	str	r3, [r0, #8]
 8008a68:	8181      	strh	r1, [r0, #12]
 8008a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a6c:	81c2      	strh	r2, [r0, #14]
 8008a6e:	6183      	str	r3, [r0, #24]
 8008a70:	4619      	mov	r1, r3
 8008a72:	2208      	movs	r2, #8
 8008a74:	305c      	adds	r0, #92	; 0x5c
 8008a76:	f7ff ffaf 	bl	80089d8 <memset>
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <std+0x38>)
 8008a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <std+0x3c>)
 8008a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <std+0x40>)
 8008a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a86:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <std+0x44>)
 8008a88:	6224      	str	r4, [r4, #32]
 8008a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a8c:	bd10      	pop	{r4, pc}
 8008a8e:	bf00      	nop
 8008a90:	080095b1 	.word	0x080095b1
 8008a94:	080095d3 	.word	0x080095d3
 8008a98:	0800960b 	.word	0x0800960b
 8008a9c:	0800962f 	.word	0x0800962f

08008aa0 <_cleanup_r>:
 8008aa0:	4901      	ldr	r1, [pc, #4]	; (8008aa8 <_cleanup_r+0x8>)
 8008aa2:	f000 b8af 	b.w	8008c04 <_fwalk_reent>
 8008aa6:	bf00      	nop
 8008aa8:	08009909 	.word	0x08009909

08008aac <__sfmoreglue>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	1e4a      	subs	r2, r1, #1
 8008ab0:	2568      	movs	r5, #104	; 0x68
 8008ab2:	4355      	muls	r5, r2
 8008ab4:	460e      	mov	r6, r1
 8008ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008aba:	f000 f8c5 	bl	8008c48 <_malloc_r>
 8008abe:	4604      	mov	r4, r0
 8008ac0:	b140      	cbz	r0, 8008ad4 <__sfmoreglue+0x28>
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ac8:	300c      	adds	r0, #12
 8008aca:	60a0      	str	r0, [r4, #8]
 8008acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ad0:	f7ff ff82 	bl	80089d8 <memset>
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}

08008ad8 <__sfp_lock_acquire>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	; (8008ae0 <__sfp_lock_acquire+0x8>)
 8008ada:	f000 b8b3 	b.w	8008c44 <__retarget_lock_acquire_recursive>
 8008ade:	bf00      	nop
 8008ae0:	200133a4 	.word	0x200133a4

08008ae4 <__sfp_lock_release>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	; (8008aec <__sfp_lock_release+0x8>)
 8008ae6:	f000 b8ae 	b.w	8008c46 <__retarget_lock_release_recursive>
 8008aea:	bf00      	nop
 8008aec:	200133a4 	.word	0x200133a4

08008af0 <__sinit_lock_acquire>:
 8008af0:	4801      	ldr	r0, [pc, #4]	; (8008af8 <__sinit_lock_acquire+0x8>)
 8008af2:	f000 b8a7 	b.w	8008c44 <__retarget_lock_acquire_recursive>
 8008af6:	bf00      	nop
 8008af8:	2001339f 	.word	0x2001339f

08008afc <__sinit_lock_release>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__sinit_lock_release+0x8>)
 8008afe:	f000 b8a2 	b.w	8008c46 <__retarget_lock_release_recursive>
 8008b02:	bf00      	nop
 8008b04:	2001339f 	.word	0x2001339f

08008b08 <__sinit>:
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	f7ff fff0 	bl	8008af0 <__sinit_lock_acquire>
 8008b10:	69a3      	ldr	r3, [r4, #24]
 8008b12:	b11b      	cbz	r3, 8008b1c <__sinit+0x14>
 8008b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b18:	f7ff bff0 	b.w	8008afc <__sinit_lock_release>
 8008b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b20:	6523      	str	r3, [r4, #80]	; 0x50
 8008b22:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <__sinit+0x68>)
 8008b24:	4a13      	ldr	r2, [pc, #76]	; (8008b74 <__sinit+0x6c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	bf04      	itt	eq
 8008b2e:	2301      	moveq	r3, #1
 8008b30:	61a3      	streq	r3, [r4, #24]
 8008b32:	4620      	mov	r0, r4
 8008b34:	f000 f820 	bl	8008b78 <__sfp>
 8008b38:	6060      	str	r0, [r4, #4]
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 f81c 	bl	8008b78 <__sfp>
 8008b40:	60a0      	str	r0, [r4, #8]
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 f818 	bl	8008b78 <__sfp>
 8008b48:	2200      	movs	r2, #0
 8008b4a:	60e0      	str	r0, [r4, #12]
 8008b4c:	2104      	movs	r1, #4
 8008b4e:	6860      	ldr	r0, [r4, #4]
 8008b50:	f7ff ff82 	bl	8008a58 <std>
 8008b54:	68a0      	ldr	r0, [r4, #8]
 8008b56:	2201      	movs	r2, #1
 8008b58:	2109      	movs	r1, #9
 8008b5a:	f7ff ff7d 	bl	8008a58 <std>
 8008b5e:	68e0      	ldr	r0, [r4, #12]
 8008b60:	2202      	movs	r2, #2
 8008b62:	2112      	movs	r1, #18
 8008b64:	f7ff ff78 	bl	8008a58 <std>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	61a3      	str	r3, [r4, #24]
 8008b6c:	e7d2      	b.n	8008b14 <__sinit+0xc>
 8008b6e:	bf00      	nop
 8008b70:	08009ffc 	.word	0x08009ffc
 8008b74:	08008aa1 	.word	0x08008aa1

08008b78 <__sfp>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	4607      	mov	r7, r0
 8008b7c:	f7ff ffac 	bl	8008ad8 <__sfp_lock_acquire>
 8008b80:	4b1e      	ldr	r3, [pc, #120]	; (8008bfc <__sfp+0x84>)
 8008b82:	681e      	ldr	r6, [r3, #0]
 8008b84:	69b3      	ldr	r3, [r6, #24]
 8008b86:	b913      	cbnz	r3, 8008b8e <__sfp+0x16>
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f7ff ffbd 	bl	8008b08 <__sinit>
 8008b8e:	3648      	adds	r6, #72	; 0x48
 8008b90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	d503      	bpl.n	8008ba0 <__sfp+0x28>
 8008b98:	6833      	ldr	r3, [r6, #0]
 8008b9a:	b30b      	cbz	r3, 8008be0 <__sfp+0x68>
 8008b9c:	6836      	ldr	r6, [r6, #0]
 8008b9e:	e7f7      	b.n	8008b90 <__sfp+0x18>
 8008ba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ba4:	b9d5      	cbnz	r5, 8008bdc <__sfp+0x64>
 8008ba6:	4b16      	ldr	r3, [pc, #88]	; (8008c00 <__sfp+0x88>)
 8008ba8:	60e3      	str	r3, [r4, #12]
 8008baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bae:	6665      	str	r5, [r4, #100]	; 0x64
 8008bb0:	f000 f847 	bl	8008c42 <__retarget_lock_init_recursive>
 8008bb4:	f7ff ff96 	bl	8008ae4 <__sfp_lock_release>
 8008bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bc0:	6025      	str	r5, [r4, #0]
 8008bc2:	61a5      	str	r5, [r4, #24]
 8008bc4:	2208      	movs	r2, #8
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bcc:	f7ff ff04 	bl	80089d8 <memset>
 8008bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bd8:	4620      	mov	r0, r4
 8008bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bdc:	3468      	adds	r4, #104	; 0x68
 8008bde:	e7d9      	b.n	8008b94 <__sfp+0x1c>
 8008be0:	2104      	movs	r1, #4
 8008be2:	4638      	mov	r0, r7
 8008be4:	f7ff ff62 	bl	8008aac <__sfmoreglue>
 8008be8:	4604      	mov	r4, r0
 8008bea:	6030      	str	r0, [r6, #0]
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d1d5      	bne.n	8008b9c <__sfp+0x24>
 8008bf0:	f7ff ff78 	bl	8008ae4 <__sfp_lock_release>
 8008bf4:	230c      	movs	r3, #12
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	e7ee      	b.n	8008bd8 <__sfp+0x60>
 8008bfa:	bf00      	nop
 8008bfc:	08009ffc 	.word	0x08009ffc
 8008c00:	ffff0001 	.word	0xffff0001

08008c04 <_fwalk_reent>:
 8008c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c08:	4606      	mov	r6, r0
 8008c0a:	4688      	mov	r8, r1
 8008c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c10:	2700      	movs	r7, #0
 8008c12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c16:	f1b9 0901 	subs.w	r9, r9, #1
 8008c1a:	d505      	bpl.n	8008c28 <_fwalk_reent+0x24>
 8008c1c:	6824      	ldr	r4, [r4, #0]
 8008c1e:	2c00      	cmp	r4, #0
 8008c20:	d1f7      	bne.n	8008c12 <_fwalk_reent+0xe>
 8008c22:	4638      	mov	r0, r7
 8008c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c28:	89ab      	ldrh	r3, [r5, #12]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d907      	bls.n	8008c3e <_fwalk_reent+0x3a>
 8008c2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c32:	3301      	adds	r3, #1
 8008c34:	d003      	beq.n	8008c3e <_fwalk_reent+0x3a>
 8008c36:	4629      	mov	r1, r5
 8008c38:	4630      	mov	r0, r6
 8008c3a:	47c0      	blx	r8
 8008c3c:	4307      	orrs	r7, r0
 8008c3e:	3568      	adds	r5, #104	; 0x68
 8008c40:	e7e9      	b.n	8008c16 <_fwalk_reent+0x12>

08008c42 <__retarget_lock_init_recursive>:
 8008c42:	4770      	bx	lr

08008c44 <__retarget_lock_acquire_recursive>:
 8008c44:	4770      	bx	lr

08008c46 <__retarget_lock_release_recursive>:
 8008c46:	4770      	bx	lr

08008c48 <_malloc_r>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	1ccd      	adds	r5, r1, #3
 8008c4c:	f025 0503 	bic.w	r5, r5, #3
 8008c50:	3508      	adds	r5, #8
 8008c52:	2d0c      	cmp	r5, #12
 8008c54:	bf38      	it	cc
 8008c56:	250c      	movcc	r5, #12
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	db01      	blt.n	8008c62 <_malloc_r+0x1a>
 8008c5e:	42a9      	cmp	r1, r5
 8008c60:	d903      	bls.n	8008c6a <_malloc_r+0x22>
 8008c62:	230c      	movs	r3, #12
 8008c64:	6033      	str	r3, [r6, #0]
 8008c66:	2000      	movs	r0, #0
 8008c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c6a:	f000 ff19 	bl	8009aa0 <__malloc_lock>
 8008c6e:	4921      	ldr	r1, [pc, #132]	; (8008cf4 <_malloc_r+0xac>)
 8008c70:	680a      	ldr	r2, [r1, #0]
 8008c72:	4614      	mov	r4, r2
 8008c74:	b99c      	cbnz	r4, 8008c9e <_malloc_r+0x56>
 8008c76:	4f20      	ldr	r7, [pc, #128]	; (8008cf8 <_malloc_r+0xb0>)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	b923      	cbnz	r3, 8008c86 <_malloc_r+0x3e>
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f000 fc86 	bl	8009590 <_sbrk_r>
 8008c84:	6038      	str	r0, [r7, #0]
 8008c86:	4629      	mov	r1, r5
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f000 fc81 	bl	8009590 <_sbrk_r>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d123      	bne.n	8008cda <_malloc_r+0x92>
 8008c92:	230c      	movs	r3, #12
 8008c94:	6033      	str	r3, [r6, #0]
 8008c96:	4630      	mov	r0, r6
 8008c98:	f000 ff08 	bl	8009aac <__malloc_unlock>
 8008c9c:	e7e3      	b.n	8008c66 <_malloc_r+0x1e>
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	1b5b      	subs	r3, r3, r5
 8008ca2:	d417      	bmi.n	8008cd4 <_malloc_r+0x8c>
 8008ca4:	2b0b      	cmp	r3, #11
 8008ca6:	d903      	bls.n	8008cb0 <_malloc_r+0x68>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	441c      	add	r4, r3
 8008cac:	6025      	str	r5, [r4, #0]
 8008cae:	e004      	b.n	8008cba <_malloc_r+0x72>
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	42a2      	cmp	r2, r4
 8008cb4:	bf0c      	ite	eq
 8008cb6:	600b      	streq	r3, [r1, #0]
 8008cb8:	6053      	strne	r3, [r2, #4]
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f000 fef6 	bl	8009aac <__malloc_unlock>
 8008cc0:	f104 000b 	add.w	r0, r4, #11
 8008cc4:	1d23      	adds	r3, r4, #4
 8008cc6:	f020 0007 	bic.w	r0, r0, #7
 8008cca:	1ac2      	subs	r2, r0, r3
 8008ccc:	d0cc      	beq.n	8008c68 <_malloc_r+0x20>
 8008cce:	1a1b      	subs	r3, r3, r0
 8008cd0:	50a3      	str	r3, [r4, r2]
 8008cd2:	e7c9      	b.n	8008c68 <_malloc_r+0x20>
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	6864      	ldr	r4, [r4, #4]
 8008cd8:	e7cc      	b.n	8008c74 <_malloc_r+0x2c>
 8008cda:	1cc4      	adds	r4, r0, #3
 8008cdc:	f024 0403 	bic.w	r4, r4, #3
 8008ce0:	42a0      	cmp	r0, r4
 8008ce2:	d0e3      	beq.n	8008cac <_malloc_r+0x64>
 8008ce4:	1a21      	subs	r1, r4, r0
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f000 fc52 	bl	8009590 <_sbrk_r>
 8008cec:	3001      	adds	r0, #1
 8008cee:	d1dd      	bne.n	8008cac <_malloc_r+0x64>
 8008cf0:	e7cf      	b.n	8008c92 <_malloc_r+0x4a>
 8008cf2:	bf00      	nop
 8008cf4:	20012e68 	.word	0x20012e68
 8008cf8:	20012e6c 	.word	0x20012e6c

08008cfc <__ssputs_r>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	688e      	ldr	r6, [r1, #8]
 8008d02:	429e      	cmp	r6, r3
 8008d04:	4682      	mov	sl, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	4690      	mov	r8, r2
 8008d0a:	461f      	mov	r7, r3
 8008d0c:	d838      	bhi.n	8008d80 <__ssputs_r+0x84>
 8008d0e:	898a      	ldrh	r2, [r1, #12]
 8008d10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d14:	d032      	beq.n	8008d7c <__ssputs_r+0x80>
 8008d16:	6825      	ldr	r5, [r4, #0]
 8008d18:	6909      	ldr	r1, [r1, #16]
 8008d1a:	eba5 0901 	sub.w	r9, r5, r1
 8008d1e:	6965      	ldr	r5, [r4, #20]
 8008d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d28:	3301      	adds	r3, #1
 8008d2a:	444b      	add	r3, r9
 8008d2c:	106d      	asrs	r5, r5, #1
 8008d2e:	429d      	cmp	r5, r3
 8008d30:	bf38      	it	cc
 8008d32:	461d      	movcc	r5, r3
 8008d34:	0553      	lsls	r3, r2, #21
 8008d36:	d531      	bpl.n	8008d9c <__ssputs_r+0xa0>
 8008d38:	4629      	mov	r1, r5
 8008d3a:	f7ff ff85 	bl	8008c48 <_malloc_r>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	b950      	cbnz	r0, 8008d58 <__ssputs_r+0x5c>
 8008d42:	230c      	movs	r3, #12
 8008d44:	f8ca 3000 	str.w	r3, [sl]
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d58:	6921      	ldr	r1, [r4, #16]
 8008d5a:	464a      	mov	r2, r9
 8008d5c:	f7ff fe2e 	bl	80089bc <memcpy>
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	6126      	str	r6, [r4, #16]
 8008d6e:	6165      	str	r5, [r4, #20]
 8008d70:	444e      	add	r6, r9
 8008d72:	eba5 0509 	sub.w	r5, r5, r9
 8008d76:	6026      	str	r6, [r4, #0]
 8008d78:	60a5      	str	r5, [r4, #8]
 8008d7a:	463e      	mov	r6, r7
 8008d7c:	42be      	cmp	r6, r7
 8008d7e:	d900      	bls.n	8008d82 <__ssputs_r+0x86>
 8008d80:	463e      	mov	r6, r7
 8008d82:	4632      	mov	r2, r6
 8008d84:	6820      	ldr	r0, [r4, #0]
 8008d86:	4641      	mov	r1, r8
 8008d88:	f000 fe70 	bl	8009a6c <memmove>
 8008d8c:	68a3      	ldr	r3, [r4, #8]
 8008d8e:	6822      	ldr	r2, [r4, #0]
 8008d90:	1b9b      	subs	r3, r3, r6
 8008d92:	4432      	add	r2, r6
 8008d94:	60a3      	str	r3, [r4, #8]
 8008d96:	6022      	str	r2, [r4, #0]
 8008d98:	2000      	movs	r0, #0
 8008d9a:	e7db      	b.n	8008d54 <__ssputs_r+0x58>
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	f000 fedb 	bl	8009b58 <_realloc_r>
 8008da2:	4606      	mov	r6, r0
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d1e1      	bne.n	8008d6c <__ssputs_r+0x70>
 8008da8:	6921      	ldr	r1, [r4, #16]
 8008daa:	4650      	mov	r0, sl
 8008dac:	f000 fe84 	bl	8009ab8 <_free_r>
 8008db0:	e7c7      	b.n	8008d42 <__ssputs_r+0x46>
	...

08008db4 <_svfiprintf_r>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	4698      	mov	r8, r3
 8008dba:	898b      	ldrh	r3, [r1, #12]
 8008dbc:	061b      	lsls	r3, r3, #24
 8008dbe:	b09d      	sub	sp, #116	; 0x74
 8008dc0:	4607      	mov	r7, r0
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	4614      	mov	r4, r2
 8008dc6:	d50e      	bpl.n	8008de6 <_svfiprintf_r+0x32>
 8008dc8:	690b      	ldr	r3, [r1, #16]
 8008dca:	b963      	cbnz	r3, 8008de6 <_svfiprintf_r+0x32>
 8008dcc:	2140      	movs	r1, #64	; 0x40
 8008dce:	f7ff ff3b 	bl	8008c48 <_malloc_r>
 8008dd2:	6028      	str	r0, [r5, #0]
 8008dd4:	6128      	str	r0, [r5, #16]
 8008dd6:	b920      	cbnz	r0, 8008de2 <_svfiprintf_r+0x2e>
 8008dd8:	230c      	movs	r3, #12
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008de0:	e0d1      	b.n	8008f86 <_svfiprintf_r+0x1d2>
 8008de2:	2340      	movs	r3, #64	; 0x40
 8008de4:	616b      	str	r3, [r5, #20]
 8008de6:	2300      	movs	r3, #0
 8008de8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dea:	2320      	movs	r3, #32
 8008dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008df4:	2330      	movs	r3, #48	; 0x30
 8008df6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008fa0 <_svfiprintf_r+0x1ec>
 8008dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dfe:	f04f 0901 	mov.w	r9, #1
 8008e02:	4623      	mov	r3, r4
 8008e04:	469a      	mov	sl, r3
 8008e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e0a:	b10a      	cbz	r2, 8008e10 <_svfiprintf_r+0x5c>
 8008e0c:	2a25      	cmp	r2, #37	; 0x25
 8008e0e:	d1f9      	bne.n	8008e04 <_svfiprintf_r+0x50>
 8008e10:	ebba 0b04 	subs.w	fp, sl, r4
 8008e14:	d00b      	beq.n	8008e2e <_svfiprintf_r+0x7a>
 8008e16:	465b      	mov	r3, fp
 8008e18:	4622      	mov	r2, r4
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f7ff ff6d 	bl	8008cfc <__ssputs_r>
 8008e22:	3001      	adds	r0, #1
 8008e24:	f000 80aa 	beq.w	8008f7c <_svfiprintf_r+0x1c8>
 8008e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e2a:	445a      	add	r2, fp
 8008e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 80a2 	beq.w	8008f7c <_svfiprintf_r+0x1c8>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e42:	f10a 0a01 	add.w	sl, sl, #1
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	9307      	str	r3, [sp, #28]
 8008e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8008e50:	4654      	mov	r4, sl
 8008e52:	2205      	movs	r2, #5
 8008e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e58:	4851      	ldr	r0, [pc, #324]	; (8008fa0 <_svfiprintf_r+0x1ec>)
 8008e5a:	f7f7 f9f9 	bl	8000250 <memchr>
 8008e5e:	9a04      	ldr	r2, [sp, #16]
 8008e60:	b9d8      	cbnz	r0, 8008e9a <_svfiprintf_r+0xe6>
 8008e62:	06d0      	lsls	r0, r2, #27
 8008e64:	bf44      	itt	mi
 8008e66:	2320      	movmi	r3, #32
 8008e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e6c:	0711      	lsls	r1, r2, #28
 8008e6e:	bf44      	itt	mi
 8008e70:	232b      	movmi	r3, #43	; 0x2b
 8008e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e76:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e7c:	d015      	beq.n	8008eaa <_svfiprintf_r+0xf6>
 8008e7e:	9a07      	ldr	r2, [sp, #28]
 8008e80:	4654      	mov	r4, sl
 8008e82:	2000      	movs	r0, #0
 8008e84:	f04f 0c0a 	mov.w	ip, #10
 8008e88:	4621      	mov	r1, r4
 8008e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e8e:	3b30      	subs	r3, #48	; 0x30
 8008e90:	2b09      	cmp	r3, #9
 8008e92:	d94e      	bls.n	8008f32 <_svfiprintf_r+0x17e>
 8008e94:	b1b0      	cbz	r0, 8008ec4 <_svfiprintf_r+0x110>
 8008e96:	9207      	str	r2, [sp, #28]
 8008e98:	e014      	b.n	8008ec4 <_svfiprintf_r+0x110>
 8008e9a:	eba0 0308 	sub.w	r3, r0, r8
 8008e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	46a2      	mov	sl, r4
 8008ea8:	e7d2      	b.n	8008e50 <_svfiprintf_r+0x9c>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	1d19      	adds	r1, r3, #4
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	9103      	str	r1, [sp, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfbb      	ittet	lt
 8008eb6:	425b      	neglt	r3, r3
 8008eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8008ebc:	9307      	strge	r3, [sp, #28]
 8008ebe:	9307      	strlt	r3, [sp, #28]
 8008ec0:	bfb8      	it	lt
 8008ec2:	9204      	strlt	r2, [sp, #16]
 8008ec4:	7823      	ldrb	r3, [r4, #0]
 8008ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ec8:	d10c      	bne.n	8008ee4 <_svfiprintf_r+0x130>
 8008eca:	7863      	ldrb	r3, [r4, #1]
 8008ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ece:	d135      	bne.n	8008f3c <_svfiprintf_r+0x188>
 8008ed0:	9b03      	ldr	r3, [sp, #12]
 8008ed2:	1d1a      	adds	r2, r3, #4
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	9203      	str	r2, [sp, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bfb8      	it	lt
 8008edc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ee0:	3402      	adds	r4, #2
 8008ee2:	9305      	str	r3, [sp, #20]
 8008ee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fb0 <_svfiprintf_r+0x1fc>
 8008ee8:	7821      	ldrb	r1, [r4, #0]
 8008eea:	2203      	movs	r2, #3
 8008eec:	4650      	mov	r0, sl
 8008eee:	f7f7 f9af 	bl	8000250 <memchr>
 8008ef2:	b140      	cbz	r0, 8008f06 <_svfiprintf_r+0x152>
 8008ef4:	2340      	movs	r3, #64	; 0x40
 8008ef6:	eba0 000a 	sub.w	r0, r0, sl
 8008efa:	fa03 f000 	lsl.w	r0, r3, r0
 8008efe:	9b04      	ldr	r3, [sp, #16]
 8008f00:	4303      	orrs	r3, r0
 8008f02:	3401      	adds	r4, #1
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0a:	4826      	ldr	r0, [pc, #152]	; (8008fa4 <_svfiprintf_r+0x1f0>)
 8008f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f10:	2206      	movs	r2, #6
 8008f12:	f7f7 f99d 	bl	8000250 <memchr>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d038      	beq.n	8008f8c <_svfiprintf_r+0x1d8>
 8008f1a:	4b23      	ldr	r3, [pc, #140]	; (8008fa8 <_svfiprintf_r+0x1f4>)
 8008f1c:	bb1b      	cbnz	r3, 8008f66 <_svfiprintf_r+0x1b2>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	3307      	adds	r3, #7
 8008f22:	f023 0307 	bic.w	r3, r3, #7
 8008f26:	3308      	adds	r3, #8
 8008f28:	9303      	str	r3, [sp, #12]
 8008f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2c:	4433      	add	r3, r6
 8008f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f30:	e767      	b.n	8008e02 <_svfiprintf_r+0x4e>
 8008f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f36:	460c      	mov	r4, r1
 8008f38:	2001      	movs	r0, #1
 8008f3a:	e7a5      	b.n	8008e88 <_svfiprintf_r+0xd4>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	3401      	adds	r4, #1
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	4619      	mov	r1, r3
 8008f44:	f04f 0c0a 	mov.w	ip, #10
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f4e:	3a30      	subs	r2, #48	; 0x30
 8008f50:	2a09      	cmp	r2, #9
 8008f52:	d903      	bls.n	8008f5c <_svfiprintf_r+0x1a8>
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0c5      	beq.n	8008ee4 <_svfiprintf_r+0x130>
 8008f58:	9105      	str	r1, [sp, #20]
 8008f5a:	e7c3      	b.n	8008ee4 <_svfiprintf_r+0x130>
 8008f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f60:	4604      	mov	r4, r0
 8008f62:	2301      	movs	r3, #1
 8008f64:	e7f0      	b.n	8008f48 <_svfiprintf_r+0x194>
 8008f66:	ab03      	add	r3, sp, #12
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	4b0f      	ldr	r3, [pc, #60]	; (8008fac <_svfiprintf_r+0x1f8>)
 8008f6e:	a904      	add	r1, sp, #16
 8008f70:	4638      	mov	r0, r7
 8008f72:	f3af 8000 	nop.w
 8008f76:	1c42      	adds	r2, r0, #1
 8008f78:	4606      	mov	r6, r0
 8008f7a:	d1d6      	bne.n	8008f2a <_svfiprintf_r+0x176>
 8008f7c:	89ab      	ldrh	r3, [r5, #12]
 8008f7e:	065b      	lsls	r3, r3, #25
 8008f80:	f53f af2c 	bmi.w	8008ddc <_svfiprintf_r+0x28>
 8008f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f86:	b01d      	add	sp, #116	; 0x74
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	ab03      	add	r3, sp, #12
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	462a      	mov	r2, r5
 8008f92:	4b06      	ldr	r3, [pc, #24]	; (8008fac <_svfiprintf_r+0x1f8>)
 8008f94:	a904      	add	r1, sp, #16
 8008f96:	4638      	mov	r0, r7
 8008f98:	f000 f9d4 	bl	8009344 <_printf_i>
 8008f9c:	e7eb      	b.n	8008f76 <_svfiprintf_r+0x1c2>
 8008f9e:	bf00      	nop
 8008fa0:	0800a060 	.word	0x0800a060
 8008fa4:	0800a06a 	.word	0x0800a06a
 8008fa8:	00000000 	.word	0x00000000
 8008fac:	08008cfd 	.word	0x08008cfd
 8008fb0:	0800a066 	.word	0x0800a066

08008fb4 <__sfputc_r>:
 8008fb4:	6893      	ldr	r3, [r2, #8]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	b410      	push	{r4}
 8008fbc:	6093      	str	r3, [r2, #8]
 8008fbe:	da08      	bge.n	8008fd2 <__sfputc_r+0x1e>
 8008fc0:	6994      	ldr	r4, [r2, #24]
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	db01      	blt.n	8008fca <__sfputc_r+0x16>
 8008fc6:	290a      	cmp	r1, #10
 8008fc8:	d103      	bne.n	8008fd2 <__sfputc_r+0x1e>
 8008fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fce:	f000 bb33 	b.w	8009638 <__swbuf_r>
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	1c58      	adds	r0, r3, #1
 8008fd6:	6010      	str	r0, [r2, #0]
 8008fd8:	7019      	strb	r1, [r3, #0]
 8008fda:	4608      	mov	r0, r1
 8008fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <__sfputs_r>:
 8008fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	460f      	mov	r7, r1
 8008fe8:	4614      	mov	r4, r2
 8008fea:	18d5      	adds	r5, r2, r3
 8008fec:	42ac      	cmp	r4, r5
 8008fee:	d101      	bne.n	8008ff4 <__sfputs_r+0x12>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e007      	b.n	8009004 <__sfputs_r+0x22>
 8008ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff8:	463a      	mov	r2, r7
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ffda 	bl	8008fb4 <__sfputc_r>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d1f3      	bne.n	8008fec <__sfputs_r+0xa>
 8009004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009008 <_vfiprintf_r>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	460d      	mov	r5, r1
 800900e:	b09d      	sub	sp, #116	; 0x74
 8009010:	4614      	mov	r4, r2
 8009012:	4698      	mov	r8, r3
 8009014:	4606      	mov	r6, r0
 8009016:	b118      	cbz	r0, 8009020 <_vfiprintf_r+0x18>
 8009018:	6983      	ldr	r3, [r0, #24]
 800901a:	b90b      	cbnz	r3, 8009020 <_vfiprintf_r+0x18>
 800901c:	f7ff fd74 	bl	8008b08 <__sinit>
 8009020:	4b89      	ldr	r3, [pc, #548]	; (8009248 <_vfiprintf_r+0x240>)
 8009022:	429d      	cmp	r5, r3
 8009024:	d11b      	bne.n	800905e <_vfiprintf_r+0x56>
 8009026:	6875      	ldr	r5, [r6, #4]
 8009028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800902a:	07d9      	lsls	r1, r3, #31
 800902c:	d405      	bmi.n	800903a <_vfiprintf_r+0x32>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	059a      	lsls	r2, r3, #22
 8009032:	d402      	bmi.n	800903a <_vfiprintf_r+0x32>
 8009034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009036:	f7ff fe05 	bl	8008c44 <__retarget_lock_acquire_recursive>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	071b      	lsls	r3, r3, #28
 800903e:	d501      	bpl.n	8009044 <_vfiprintf_r+0x3c>
 8009040:	692b      	ldr	r3, [r5, #16]
 8009042:	b9eb      	cbnz	r3, 8009080 <_vfiprintf_r+0x78>
 8009044:	4629      	mov	r1, r5
 8009046:	4630      	mov	r0, r6
 8009048:	f000 fb5a 	bl	8009700 <__swsetup_r>
 800904c:	b1c0      	cbz	r0, 8009080 <_vfiprintf_r+0x78>
 800904e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009050:	07dc      	lsls	r4, r3, #31
 8009052:	d50e      	bpl.n	8009072 <_vfiprintf_r+0x6a>
 8009054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009058:	b01d      	add	sp, #116	; 0x74
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	4b7b      	ldr	r3, [pc, #492]	; (800924c <_vfiprintf_r+0x244>)
 8009060:	429d      	cmp	r5, r3
 8009062:	d101      	bne.n	8009068 <_vfiprintf_r+0x60>
 8009064:	68b5      	ldr	r5, [r6, #8]
 8009066:	e7df      	b.n	8009028 <_vfiprintf_r+0x20>
 8009068:	4b79      	ldr	r3, [pc, #484]	; (8009250 <_vfiprintf_r+0x248>)
 800906a:	429d      	cmp	r5, r3
 800906c:	bf08      	it	eq
 800906e:	68f5      	ldreq	r5, [r6, #12]
 8009070:	e7da      	b.n	8009028 <_vfiprintf_r+0x20>
 8009072:	89ab      	ldrh	r3, [r5, #12]
 8009074:	0598      	lsls	r0, r3, #22
 8009076:	d4ed      	bmi.n	8009054 <_vfiprintf_r+0x4c>
 8009078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800907a:	f7ff fde4 	bl	8008c46 <__retarget_lock_release_recursive>
 800907e:	e7e9      	b.n	8009054 <_vfiprintf_r+0x4c>
 8009080:	2300      	movs	r3, #0
 8009082:	9309      	str	r3, [sp, #36]	; 0x24
 8009084:	2320      	movs	r3, #32
 8009086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800908a:	f8cd 800c 	str.w	r8, [sp, #12]
 800908e:	2330      	movs	r3, #48	; 0x30
 8009090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009254 <_vfiprintf_r+0x24c>
 8009094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009098:	f04f 0901 	mov.w	r9, #1
 800909c:	4623      	mov	r3, r4
 800909e:	469a      	mov	sl, r3
 80090a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a4:	b10a      	cbz	r2, 80090aa <_vfiprintf_r+0xa2>
 80090a6:	2a25      	cmp	r2, #37	; 0x25
 80090a8:	d1f9      	bne.n	800909e <_vfiprintf_r+0x96>
 80090aa:	ebba 0b04 	subs.w	fp, sl, r4
 80090ae:	d00b      	beq.n	80090c8 <_vfiprintf_r+0xc0>
 80090b0:	465b      	mov	r3, fp
 80090b2:	4622      	mov	r2, r4
 80090b4:	4629      	mov	r1, r5
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7ff ff93 	bl	8008fe2 <__sfputs_r>
 80090bc:	3001      	adds	r0, #1
 80090be:	f000 80aa 	beq.w	8009216 <_vfiprintf_r+0x20e>
 80090c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c4:	445a      	add	r2, fp
 80090c6:	9209      	str	r2, [sp, #36]	; 0x24
 80090c8:	f89a 3000 	ldrb.w	r3, [sl]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 80a2 	beq.w	8009216 <_vfiprintf_r+0x20e>
 80090d2:	2300      	movs	r3, #0
 80090d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090dc:	f10a 0a01 	add.w	sl, sl, #1
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	9307      	str	r3, [sp, #28]
 80090e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090e8:	931a      	str	r3, [sp, #104]	; 0x68
 80090ea:	4654      	mov	r4, sl
 80090ec:	2205      	movs	r2, #5
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	4858      	ldr	r0, [pc, #352]	; (8009254 <_vfiprintf_r+0x24c>)
 80090f4:	f7f7 f8ac 	bl	8000250 <memchr>
 80090f8:	9a04      	ldr	r2, [sp, #16]
 80090fa:	b9d8      	cbnz	r0, 8009134 <_vfiprintf_r+0x12c>
 80090fc:	06d1      	lsls	r1, r2, #27
 80090fe:	bf44      	itt	mi
 8009100:	2320      	movmi	r3, #32
 8009102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009106:	0713      	lsls	r3, r2, #28
 8009108:	bf44      	itt	mi
 800910a:	232b      	movmi	r3, #43	; 0x2b
 800910c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009110:	f89a 3000 	ldrb.w	r3, [sl]
 8009114:	2b2a      	cmp	r3, #42	; 0x2a
 8009116:	d015      	beq.n	8009144 <_vfiprintf_r+0x13c>
 8009118:	9a07      	ldr	r2, [sp, #28]
 800911a:	4654      	mov	r4, sl
 800911c:	2000      	movs	r0, #0
 800911e:	f04f 0c0a 	mov.w	ip, #10
 8009122:	4621      	mov	r1, r4
 8009124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009128:	3b30      	subs	r3, #48	; 0x30
 800912a:	2b09      	cmp	r3, #9
 800912c:	d94e      	bls.n	80091cc <_vfiprintf_r+0x1c4>
 800912e:	b1b0      	cbz	r0, 800915e <_vfiprintf_r+0x156>
 8009130:	9207      	str	r2, [sp, #28]
 8009132:	e014      	b.n	800915e <_vfiprintf_r+0x156>
 8009134:	eba0 0308 	sub.w	r3, r0, r8
 8009138:	fa09 f303 	lsl.w	r3, r9, r3
 800913c:	4313      	orrs	r3, r2
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	46a2      	mov	sl, r4
 8009142:	e7d2      	b.n	80090ea <_vfiprintf_r+0xe2>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	1d19      	adds	r1, r3, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	9103      	str	r1, [sp, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfbb      	ittet	lt
 8009150:	425b      	neglt	r3, r3
 8009152:	f042 0202 	orrlt.w	r2, r2, #2
 8009156:	9307      	strge	r3, [sp, #28]
 8009158:	9307      	strlt	r3, [sp, #28]
 800915a:	bfb8      	it	lt
 800915c:	9204      	strlt	r2, [sp, #16]
 800915e:	7823      	ldrb	r3, [r4, #0]
 8009160:	2b2e      	cmp	r3, #46	; 0x2e
 8009162:	d10c      	bne.n	800917e <_vfiprintf_r+0x176>
 8009164:	7863      	ldrb	r3, [r4, #1]
 8009166:	2b2a      	cmp	r3, #42	; 0x2a
 8009168:	d135      	bne.n	80091d6 <_vfiprintf_r+0x1ce>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	1d1a      	adds	r2, r3, #4
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	9203      	str	r2, [sp, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfb8      	it	lt
 8009176:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800917a:	3402      	adds	r4, #2
 800917c:	9305      	str	r3, [sp, #20]
 800917e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009264 <_vfiprintf_r+0x25c>
 8009182:	7821      	ldrb	r1, [r4, #0]
 8009184:	2203      	movs	r2, #3
 8009186:	4650      	mov	r0, sl
 8009188:	f7f7 f862 	bl	8000250 <memchr>
 800918c:	b140      	cbz	r0, 80091a0 <_vfiprintf_r+0x198>
 800918e:	2340      	movs	r3, #64	; 0x40
 8009190:	eba0 000a 	sub.w	r0, r0, sl
 8009194:	fa03 f000 	lsl.w	r0, r3, r0
 8009198:	9b04      	ldr	r3, [sp, #16]
 800919a:	4303      	orrs	r3, r0
 800919c:	3401      	adds	r4, #1
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a4:	482c      	ldr	r0, [pc, #176]	; (8009258 <_vfiprintf_r+0x250>)
 80091a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091aa:	2206      	movs	r2, #6
 80091ac:	f7f7 f850 	bl	8000250 <memchr>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d03f      	beq.n	8009234 <_vfiprintf_r+0x22c>
 80091b4:	4b29      	ldr	r3, [pc, #164]	; (800925c <_vfiprintf_r+0x254>)
 80091b6:	bb1b      	cbnz	r3, 8009200 <_vfiprintf_r+0x1f8>
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	3307      	adds	r3, #7
 80091bc:	f023 0307 	bic.w	r3, r3, #7
 80091c0:	3308      	adds	r3, #8
 80091c2:	9303      	str	r3, [sp, #12]
 80091c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c6:	443b      	add	r3, r7
 80091c8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ca:	e767      	b.n	800909c <_vfiprintf_r+0x94>
 80091cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d0:	460c      	mov	r4, r1
 80091d2:	2001      	movs	r0, #1
 80091d4:	e7a5      	b.n	8009122 <_vfiprintf_r+0x11a>
 80091d6:	2300      	movs	r3, #0
 80091d8:	3401      	adds	r4, #1
 80091da:	9305      	str	r3, [sp, #20]
 80091dc:	4619      	mov	r1, r3
 80091de:	f04f 0c0a 	mov.w	ip, #10
 80091e2:	4620      	mov	r0, r4
 80091e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e8:	3a30      	subs	r2, #48	; 0x30
 80091ea:	2a09      	cmp	r2, #9
 80091ec:	d903      	bls.n	80091f6 <_vfiprintf_r+0x1ee>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0c5      	beq.n	800917e <_vfiprintf_r+0x176>
 80091f2:	9105      	str	r1, [sp, #20]
 80091f4:	e7c3      	b.n	800917e <_vfiprintf_r+0x176>
 80091f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fa:	4604      	mov	r4, r0
 80091fc:	2301      	movs	r3, #1
 80091fe:	e7f0      	b.n	80091e2 <_vfiprintf_r+0x1da>
 8009200:	ab03      	add	r3, sp, #12
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	462a      	mov	r2, r5
 8009206:	4b16      	ldr	r3, [pc, #88]	; (8009260 <_vfiprintf_r+0x258>)
 8009208:	a904      	add	r1, sp, #16
 800920a:	4630      	mov	r0, r6
 800920c:	f3af 8000 	nop.w
 8009210:	4607      	mov	r7, r0
 8009212:	1c78      	adds	r0, r7, #1
 8009214:	d1d6      	bne.n	80091c4 <_vfiprintf_r+0x1bc>
 8009216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009218:	07d9      	lsls	r1, r3, #31
 800921a:	d405      	bmi.n	8009228 <_vfiprintf_r+0x220>
 800921c:	89ab      	ldrh	r3, [r5, #12]
 800921e:	059a      	lsls	r2, r3, #22
 8009220:	d402      	bmi.n	8009228 <_vfiprintf_r+0x220>
 8009222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009224:	f7ff fd0f 	bl	8008c46 <__retarget_lock_release_recursive>
 8009228:	89ab      	ldrh	r3, [r5, #12]
 800922a:	065b      	lsls	r3, r3, #25
 800922c:	f53f af12 	bmi.w	8009054 <_vfiprintf_r+0x4c>
 8009230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009232:	e711      	b.n	8009058 <_vfiprintf_r+0x50>
 8009234:	ab03      	add	r3, sp, #12
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	462a      	mov	r2, r5
 800923a:	4b09      	ldr	r3, [pc, #36]	; (8009260 <_vfiprintf_r+0x258>)
 800923c:	a904      	add	r1, sp, #16
 800923e:	4630      	mov	r0, r6
 8009240:	f000 f880 	bl	8009344 <_printf_i>
 8009244:	e7e4      	b.n	8009210 <_vfiprintf_r+0x208>
 8009246:	bf00      	nop
 8009248:	0800a020 	.word	0x0800a020
 800924c:	0800a040 	.word	0x0800a040
 8009250:	0800a000 	.word	0x0800a000
 8009254:	0800a060 	.word	0x0800a060
 8009258:	0800a06a 	.word	0x0800a06a
 800925c:	00000000 	.word	0x00000000
 8009260:	08008fe3 	.word	0x08008fe3
 8009264:	0800a066 	.word	0x0800a066

08009268 <_printf_common>:
 8009268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	4616      	mov	r6, r2
 800926e:	4699      	mov	r9, r3
 8009270:	688a      	ldr	r2, [r1, #8]
 8009272:	690b      	ldr	r3, [r1, #16]
 8009274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009278:	4293      	cmp	r3, r2
 800927a:	bfb8      	it	lt
 800927c:	4613      	movlt	r3, r2
 800927e:	6033      	str	r3, [r6, #0]
 8009280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009284:	4607      	mov	r7, r0
 8009286:	460c      	mov	r4, r1
 8009288:	b10a      	cbz	r2, 800928e <_printf_common+0x26>
 800928a:	3301      	adds	r3, #1
 800928c:	6033      	str	r3, [r6, #0]
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	0699      	lsls	r1, r3, #26
 8009292:	bf42      	ittt	mi
 8009294:	6833      	ldrmi	r3, [r6, #0]
 8009296:	3302      	addmi	r3, #2
 8009298:	6033      	strmi	r3, [r6, #0]
 800929a:	6825      	ldr	r5, [r4, #0]
 800929c:	f015 0506 	ands.w	r5, r5, #6
 80092a0:	d106      	bne.n	80092b0 <_printf_common+0x48>
 80092a2:	f104 0a19 	add.w	sl, r4, #25
 80092a6:	68e3      	ldr	r3, [r4, #12]
 80092a8:	6832      	ldr	r2, [r6, #0]
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	42ab      	cmp	r3, r5
 80092ae:	dc26      	bgt.n	80092fe <_printf_common+0x96>
 80092b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092b4:	1e13      	subs	r3, r2, #0
 80092b6:	6822      	ldr	r2, [r4, #0]
 80092b8:	bf18      	it	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	0692      	lsls	r2, r2, #26
 80092be:	d42b      	bmi.n	8009318 <_printf_common+0xb0>
 80092c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092c4:	4649      	mov	r1, r9
 80092c6:	4638      	mov	r0, r7
 80092c8:	47c0      	blx	r8
 80092ca:	3001      	adds	r0, #1
 80092cc:	d01e      	beq.n	800930c <_printf_common+0xa4>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	68e5      	ldr	r5, [r4, #12]
 80092d2:	6832      	ldr	r2, [r6, #0]
 80092d4:	f003 0306 	and.w	r3, r3, #6
 80092d8:	2b04      	cmp	r3, #4
 80092da:	bf08      	it	eq
 80092dc:	1aad      	subeq	r5, r5, r2
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	6922      	ldr	r2, [r4, #16]
 80092e2:	bf0c      	ite	eq
 80092e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092e8:	2500      	movne	r5, #0
 80092ea:	4293      	cmp	r3, r2
 80092ec:	bfc4      	itt	gt
 80092ee:	1a9b      	subgt	r3, r3, r2
 80092f0:	18ed      	addgt	r5, r5, r3
 80092f2:	2600      	movs	r6, #0
 80092f4:	341a      	adds	r4, #26
 80092f6:	42b5      	cmp	r5, r6
 80092f8:	d11a      	bne.n	8009330 <_printf_common+0xc8>
 80092fa:	2000      	movs	r0, #0
 80092fc:	e008      	b.n	8009310 <_printf_common+0xa8>
 80092fe:	2301      	movs	r3, #1
 8009300:	4652      	mov	r2, sl
 8009302:	4649      	mov	r1, r9
 8009304:	4638      	mov	r0, r7
 8009306:	47c0      	blx	r8
 8009308:	3001      	adds	r0, #1
 800930a:	d103      	bne.n	8009314 <_printf_common+0xac>
 800930c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009314:	3501      	adds	r5, #1
 8009316:	e7c6      	b.n	80092a6 <_printf_common+0x3e>
 8009318:	18e1      	adds	r1, r4, r3
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	2030      	movs	r0, #48	; 0x30
 800931e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009322:	4422      	add	r2, r4
 8009324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800932c:	3302      	adds	r3, #2
 800932e:	e7c7      	b.n	80092c0 <_printf_common+0x58>
 8009330:	2301      	movs	r3, #1
 8009332:	4622      	mov	r2, r4
 8009334:	4649      	mov	r1, r9
 8009336:	4638      	mov	r0, r7
 8009338:	47c0      	blx	r8
 800933a:	3001      	adds	r0, #1
 800933c:	d0e6      	beq.n	800930c <_printf_common+0xa4>
 800933e:	3601      	adds	r6, #1
 8009340:	e7d9      	b.n	80092f6 <_printf_common+0x8e>
	...

08009344 <_printf_i>:
 8009344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009348:	460c      	mov	r4, r1
 800934a:	4691      	mov	r9, r2
 800934c:	7e27      	ldrb	r7, [r4, #24]
 800934e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009350:	2f78      	cmp	r7, #120	; 0x78
 8009352:	4680      	mov	r8, r0
 8009354:	469a      	mov	sl, r3
 8009356:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800935a:	d807      	bhi.n	800936c <_printf_i+0x28>
 800935c:	2f62      	cmp	r7, #98	; 0x62
 800935e:	d80a      	bhi.n	8009376 <_printf_i+0x32>
 8009360:	2f00      	cmp	r7, #0
 8009362:	f000 80d8 	beq.w	8009516 <_printf_i+0x1d2>
 8009366:	2f58      	cmp	r7, #88	; 0x58
 8009368:	f000 80a3 	beq.w	80094b2 <_printf_i+0x16e>
 800936c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009374:	e03a      	b.n	80093ec <_printf_i+0xa8>
 8009376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800937a:	2b15      	cmp	r3, #21
 800937c:	d8f6      	bhi.n	800936c <_printf_i+0x28>
 800937e:	a001      	add	r0, pc, #4	; (adr r0, 8009384 <_printf_i+0x40>)
 8009380:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009384:	080093dd 	.word	0x080093dd
 8009388:	080093f1 	.word	0x080093f1
 800938c:	0800936d 	.word	0x0800936d
 8009390:	0800936d 	.word	0x0800936d
 8009394:	0800936d 	.word	0x0800936d
 8009398:	0800936d 	.word	0x0800936d
 800939c:	080093f1 	.word	0x080093f1
 80093a0:	0800936d 	.word	0x0800936d
 80093a4:	0800936d 	.word	0x0800936d
 80093a8:	0800936d 	.word	0x0800936d
 80093ac:	0800936d 	.word	0x0800936d
 80093b0:	080094fd 	.word	0x080094fd
 80093b4:	08009421 	.word	0x08009421
 80093b8:	080094df 	.word	0x080094df
 80093bc:	0800936d 	.word	0x0800936d
 80093c0:	0800936d 	.word	0x0800936d
 80093c4:	0800951f 	.word	0x0800951f
 80093c8:	0800936d 	.word	0x0800936d
 80093cc:	08009421 	.word	0x08009421
 80093d0:	0800936d 	.word	0x0800936d
 80093d4:	0800936d 	.word	0x0800936d
 80093d8:	080094e7 	.word	0x080094e7
 80093dc:	680b      	ldr	r3, [r1, #0]
 80093de:	1d1a      	adds	r2, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	600a      	str	r2, [r1, #0]
 80093e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0a3      	b.n	8009538 <_printf_i+0x1f4>
 80093f0:	6825      	ldr	r5, [r4, #0]
 80093f2:	6808      	ldr	r0, [r1, #0]
 80093f4:	062e      	lsls	r6, r5, #24
 80093f6:	f100 0304 	add.w	r3, r0, #4
 80093fa:	d50a      	bpl.n	8009412 <_printf_i+0xce>
 80093fc:	6805      	ldr	r5, [r0, #0]
 80093fe:	600b      	str	r3, [r1, #0]
 8009400:	2d00      	cmp	r5, #0
 8009402:	da03      	bge.n	800940c <_printf_i+0xc8>
 8009404:	232d      	movs	r3, #45	; 0x2d
 8009406:	426d      	negs	r5, r5
 8009408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800940c:	485e      	ldr	r0, [pc, #376]	; (8009588 <_printf_i+0x244>)
 800940e:	230a      	movs	r3, #10
 8009410:	e019      	b.n	8009446 <_printf_i+0x102>
 8009412:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009416:	6805      	ldr	r5, [r0, #0]
 8009418:	600b      	str	r3, [r1, #0]
 800941a:	bf18      	it	ne
 800941c:	b22d      	sxthne	r5, r5
 800941e:	e7ef      	b.n	8009400 <_printf_i+0xbc>
 8009420:	680b      	ldr	r3, [r1, #0]
 8009422:	6825      	ldr	r5, [r4, #0]
 8009424:	1d18      	adds	r0, r3, #4
 8009426:	6008      	str	r0, [r1, #0]
 8009428:	0628      	lsls	r0, r5, #24
 800942a:	d501      	bpl.n	8009430 <_printf_i+0xec>
 800942c:	681d      	ldr	r5, [r3, #0]
 800942e:	e002      	b.n	8009436 <_printf_i+0xf2>
 8009430:	0669      	lsls	r1, r5, #25
 8009432:	d5fb      	bpl.n	800942c <_printf_i+0xe8>
 8009434:	881d      	ldrh	r5, [r3, #0]
 8009436:	4854      	ldr	r0, [pc, #336]	; (8009588 <_printf_i+0x244>)
 8009438:	2f6f      	cmp	r7, #111	; 0x6f
 800943a:	bf0c      	ite	eq
 800943c:	2308      	moveq	r3, #8
 800943e:	230a      	movne	r3, #10
 8009440:	2100      	movs	r1, #0
 8009442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009446:	6866      	ldr	r6, [r4, #4]
 8009448:	60a6      	str	r6, [r4, #8]
 800944a:	2e00      	cmp	r6, #0
 800944c:	bfa2      	ittt	ge
 800944e:	6821      	ldrge	r1, [r4, #0]
 8009450:	f021 0104 	bicge.w	r1, r1, #4
 8009454:	6021      	strge	r1, [r4, #0]
 8009456:	b90d      	cbnz	r5, 800945c <_printf_i+0x118>
 8009458:	2e00      	cmp	r6, #0
 800945a:	d04d      	beq.n	80094f8 <_printf_i+0x1b4>
 800945c:	4616      	mov	r6, r2
 800945e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009462:	fb03 5711 	mls	r7, r3, r1, r5
 8009466:	5dc7      	ldrb	r7, [r0, r7]
 8009468:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800946c:	462f      	mov	r7, r5
 800946e:	42bb      	cmp	r3, r7
 8009470:	460d      	mov	r5, r1
 8009472:	d9f4      	bls.n	800945e <_printf_i+0x11a>
 8009474:	2b08      	cmp	r3, #8
 8009476:	d10b      	bne.n	8009490 <_printf_i+0x14c>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	07df      	lsls	r7, r3, #31
 800947c:	d508      	bpl.n	8009490 <_printf_i+0x14c>
 800947e:	6923      	ldr	r3, [r4, #16]
 8009480:	6861      	ldr	r1, [r4, #4]
 8009482:	4299      	cmp	r1, r3
 8009484:	bfde      	ittt	le
 8009486:	2330      	movle	r3, #48	; 0x30
 8009488:	f806 3c01 	strble.w	r3, [r6, #-1]
 800948c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009490:	1b92      	subs	r2, r2, r6
 8009492:	6122      	str	r2, [r4, #16]
 8009494:	f8cd a000 	str.w	sl, [sp]
 8009498:	464b      	mov	r3, r9
 800949a:	aa03      	add	r2, sp, #12
 800949c:	4621      	mov	r1, r4
 800949e:	4640      	mov	r0, r8
 80094a0:	f7ff fee2 	bl	8009268 <_printf_common>
 80094a4:	3001      	adds	r0, #1
 80094a6:	d14c      	bne.n	8009542 <_printf_i+0x1fe>
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ac:	b004      	add	sp, #16
 80094ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b2:	4835      	ldr	r0, [pc, #212]	; (8009588 <_printf_i+0x244>)
 80094b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	680e      	ldr	r6, [r1, #0]
 80094bc:	061f      	lsls	r7, r3, #24
 80094be:	f856 5b04 	ldr.w	r5, [r6], #4
 80094c2:	600e      	str	r6, [r1, #0]
 80094c4:	d514      	bpl.n	80094f0 <_printf_i+0x1ac>
 80094c6:	07d9      	lsls	r1, r3, #31
 80094c8:	bf44      	itt	mi
 80094ca:	f043 0320 	orrmi.w	r3, r3, #32
 80094ce:	6023      	strmi	r3, [r4, #0]
 80094d0:	b91d      	cbnz	r5, 80094da <_printf_i+0x196>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	f023 0320 	bic.w	r3, r3, #32
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	2310      	movs	r3, #16
 80094dc:	e7b0      	b.n	8009440 <_printf_i+0xfc>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	f043 0320 	orr.w	r3, r3, #32
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	2378      	movs	r3, #120	; 0x78
 80094e8:	4828      	ldr	r0, [pc, #160]	; (800958c <_printf_i+0x248>)
 80094ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094ee:	e7e3      	b.n	80094b8 <_printf_i+0x174>
 80094f0:	065e      	lsls	r6, r3, #25
 80094f2:	bf48      	it	mi
 80094f4:	b2ad      	uxthmi	r5, r5
 80094f6:	e7e6      	b.n	80094c6 <_printf_i+0x182>
 80094f8:	4616      	mov	r6, r2
 80094fa:	e7bb      	b.n	8009474 <_printf_i+0x130>
 80094fc:	680b      	ldr	r3, [r1, #0]
 80094fe:	6826      	ldr	r6, [r4, #0]
 8009500:	6960      	ldr	r0, [r4, #20]
 8009502:	1d1d      	adds	r5, r3, #4
 8009504:	600d      	str	r5, [r1, #0]
 8009506:	0635      	lsls	r5, r6, #24
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	d501      	bpl.n	8009510 <_printf_i+0x1cc>
 800950c:	6018      	str	r0, [r3, #0]
 800950e:	e002      	b.n	8009516 <_printf_i+0x1d2>
 8009510:	0671      	lsls	r1, r6, #25
 8009512:	d5fb      	bpl.n	800950c <_printf_i+0x1c8>
 8009514:	8018      	strh	r0, [r3, #0]
 8009516:	2300      	movs	r3, #0
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	4616      	mov	r6, r2
 800951c:	e7ba      	b.n	8009494 <_printf_i+0x150>
 800951e:	680b      	ldr	r3, [r1, #0]
 8009520:	1d1a      	adds	r2, r3, #4
 8009522:	600a      	str	r2, [r1, #0]
 8009524:	681e      	ldr	r6, [r3, #0]
 8009526:	6862      	ldr	r2, [r4, #4]
 8009528:	2100      	movs	r1, #0
 800952a:	4630      	mov	r0, r6
 800952c:	f7f6 fe90 	bl	8000250 <memchr>
 8009530:	b108      	cbz	r0, 8009536 <_printf_i+0x1f2>
 8009532:	1b80      	subs	r0, r0, r6
 8009534:	6060      	str	r0, [r4, #4]
 8009536:	6863      	ldr	r3, [r4, #4]
 8009538:	6123      	str	r3, [r4, #16]
 800953a:	2300      	movs	r3, #0
 800953c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009540:	e7a8      	b.n	8009494 <_printf_i+0x150>
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	4632      	mov	r2, r6
 8009546:	4649      	mov	r1, r9
 8009548:	4640      	mov	r0, r8
 800954a:	47d0      	blx	sl
 800954c:	3001      	adds	r0, #1
 800954e:	d0ab      	beq.n	80094a8 <_printf_i+0x164>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	079b      	lsls	r3, r3, #30
 8009554:	d413      	bmi.n	800957e <_printf_i+0x23a>
 8009556:	68e0      	ldr	r0, [r4, #12]
 8009558:	9b03      	ldr	r3, [sp, #12]
 800955a:	4298      	cmp	r0, r3
 800955c:	bfb8      	it	lt
 800955e:	4618      	movlt	r0, r3
 8009560:	e7a4      	b.n	80094ac <_printf_i+0x168>
 8009562:	2301      	movs	r3, #1
 8009564:	4632      	mov	r2, r6
 8009566:	4649      	mov	r1, r9
 8009568:	4640      	mov	r0, r8
 800956a:	47d0      	blx	sl
 800956c:	3001      	adds	r0, #1
 800956e:	d09b      	beq.n	80094a8 <_printf_i+0x164>
 8009570:	3501      	adds	r5, #1
 8009572:	68e3      	ldr	r3, [r4, #12]
 8009574:	9903      	ldr	r1, [sp, #12]
 8009576:	1a5b      	subs	r3, r3, r1
 8009578:	42ab      	cmp	r3, r5
 800957a:	dcf2      	bgt.n	8009562 <_printf_i+0x21e>
 800957c:	e7eb      	b.n	8009556 <_printf_i+0x212>
 800957e:	2500      	movs	r5, #0
 8009580:	f104 0619 	add.w	r6, r4, #25
 8009584:	e7f5      	b.n	8009572 <_printf_i+0x22e>
 8009586:	bf00      	nop
 8009588:	0800a071 	.word	0x0800a071
 800958c:	0800a082 	.word	0x0800a082

08009590 <_sbrk_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d06      	ldr	r5, [pc, #24]	; (80095ac <_sbrk_r+0x1c>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	602b      	str	r3, [r5, #0]
 800959c:	f000 fb3e 	bl	8009c1c <_sbrk>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_sbrk_r+0x1a>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_sbrk_r+0x1a>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	200133a8 	.word	0x200133a8

080095b0 <__sread>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	460c      	mov	r4, r1
 80095b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b8:	f000 faf4 	bl	8009ba4 <_read_r>
 80095bc:	2800      	cmp	r0, #0
 80095be:	bfab      	itete	ge
 80095c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095c2:	89a3      	ldrhlt	r3, [r4, #12]
 80095c4:	181b      	addge	r3, r3, r0
 80095c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095ca:	bfac      	ite	ge
 80095cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80095ce:	81a3      	strhlt	r3, [r4, #12]
 80095d0:	bd10      	pop	{r4, pc}

080095d2 <__swrite>:
 80095d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	461f      	mov	r7, r3
 80095d8:	898b      	ldrh	r3, [r1, #12]
 80095da:	05db      	lsls	r3, r3, #23
 80095dc:	4605      	mov	r5, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	4616      	mov	r6, r2
 80095e2:	d505      	bpl.n	80095f0 <__swrite+0x1e>
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	2302      	movs	r3, #2
 80095ea:	2200      	movs	r2, #0
 80095ec:	f000 f9c8 	bl	8009980 <_lseek_r>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	4632      	mov	r2, r6
 80095fe:	463b      	mov	r3, r7
 8009600:	4628      	mov	r0, r5
 8009602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	f000 b869 	b.w	80096dc <_write_r>

0800960a <__sseek>:
 800960a:	b510      	push	{r4, lr}
 800960c:	460c      	mov	r4, r1
 800960e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009612:	f000 f9b5 	bl	8009980 <_lseek_r>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	bf15      	itete	ne
 800961c:	6560      	strne	r0, [r4, #84]	; 0x54
 800961e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009626:	81a3      	strheq	r3, [r4, #12]
 8009628:	bf18      	it	ne
 800962a:	81a3      	strhne	r3, [r4, #12]
 800962c:	bd10      	pop	{r4, pc}

0800962e <__sclose>:
 800962e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009632:	f000 b8d3 	b.w	80097dc <_close_r>
	...

08009638 <__swbuf_r>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	460e      	mov	r6, r1
 800963c:	4614      	mov	r4, r2
 800963e:	4605      	mov	r5, r0
 8009640:	b118      	cbz	r0, 800964a <__swbuf_r+0x12>
 8009642:	6983      	ldr	r3, [r0, #24]
 8009644:	b90b      	cbnz	r3, 800964a <__swbuf_r+0x12>
 8009646:	f7ff fa5f 	bl	8008b08 <__sinit>
 800964a:	4b21      	ldr	r3, [pc, #132]	; (80096d0 <__swbuf_r+0x98>)
 800964c:	429c      	cmp	r4, r3
 800964e:	d12b      	bne.n	80096a8 <__swbuf_r+0x70>
 8009650:	686c      	ldr	r4, [r5, #4]
 8009652:	69a3      	ldr	r3, [r4, #24]
 8009654:	60a3      	str	r3, [r4, #8]
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	071a      	lsls	r2, r3, #28
 800965a:	d52f      	bpl.n	80096bc <__swbuf_r+0x84>
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	b36b      	cbz	r3, 80096bc <__swbuf_r+0x84>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	6820      	ldr	r0, [r4, #0]
 8009664:	1ac0      	subs	r0, r0, r3
 8009666:	6963      	ldr	r3, [r4, #20]
 8009668:	b2f6      	uxtb	r6, r6
 800966a:	4283      	cmp	r3, r0
 800966c:	4637      	mov	r7, r6
 800966e:	dc04      	bgt.n	800967a <__swbuf_r+0x42>
 8009670:	4621      	mov	r1, r4
 8009672:	4628      	mov	r0, r5
 8009674:	f000 f948 	bl	8009908 <_fflush_r>
 8009678:	bb30      	cbnz	r0, 80096c8 <__swbuf_r+0x90>
 800967a:	68a3      	ldr	r3, [r4, #8]
 800967c:	3b01      	subs	r3, #1
 800967e:	60a3      	str	r3, [r4, #8]
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	6022      	str	r2, [r4, #0]
 8009686:	701e      	strb	r6, [r3, #0]
 8009688:	6963      	ldr	r3, [r4, #20]
 800968a:	3001      	adds	r0, #1
 800968c:	4283      	cmp	r3, r0
 800968e:	d004      	beq.n	800969a <__swbuf_r+0x62>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	07db      	lsls	r3, r3, #31
 8009694:	d506      	bpl.n	80096a4 <__swbuf_r+0x6c>
 8009696:	2e0a      	cmp	r6, #10
 8009698:	d104      	bne.n	80096a4 <__swbuf_r+0x6c>
 800969a:	4621      	mov	r1, r4
 800969c:	4628      	mov	r0, r5
 800969e:	f000 f933 	bl	8009908 <_fflush_r>
 80096a2:	b988      	cbnz	r0, 80096c8 <__swbuf_r+0x90>
 80096a4:	4638      	mov	r0, r7
 80096a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a8:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <__swbuf_r+0x9c>)
 80096aa:	429c      	cmp	r4, r3
 80096ac:	d101      	bne.n	80096b2 <__swbuf_r+0x7a>
 80096ae:	68ac      	ldr	r4, [r5, #8]
 80096b0:	e7cf      	b.n	8009652 <__swbuf_r+0x1a>
 80096b2:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <__swbuf_r+0xa0>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	bf08      	it	eq
 80096b8:	68ec      	ldreq	r4, [r5, #12]
 80096ba:	e7ca      	b.n	8009652 <__swbuf_r+0x1a>
 80096bc:	4621      	mov	r1, r4
 80096be:	4628      	mov	r0, r5
 80096c0:	f000 f81e 	bl	8009700 <__swsetup_r>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d0cb      	beq.n	8009660 <__swbuf_r+0x28>
 80096c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80096cc:	e7ea      	b.n	80096a4 <__swbuf_r+0x6c>
 80096ce:	bf00      	nop
 80096d0:	0800a020 	.word	0x0800a020
 80096d4:	0800a040 	.word	0x0800a040
 80096d8:	0800a000 	.word	0x0800a000

080096dc <_write_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d07      	ldr	r5, [pc, #28]	; (80096fc <_write_r+0x20>)
 80096e0:	4604      	mov	r4, r0
 80096e2:	4608      	mov	r0, r1
 80096e4:	4611      	mov	r1, r2
 80096e6:	2200      	movs	r2, #0
 80096e8:	602a      	str	r2, [r5, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	f7f7 fe9f 	bl	800142e <_write>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_write_r+0x1e>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_write_r+0x1e>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	200133a8 	.word	0x200133a8

08009700 <__swsetup_r>:
 8009700:	4b32      	ldr	r3, [pc, #200]	; (80097cc <__swsetup_r+0xcc>)
 8009702:	b570      	push	{r4, r5, r6, lr}
 8009704:	681d      	ldr	r5, [r3, #0]
 8009706:	4606      	mov	r6, r0
 8009708:	460c      	mov	r4, r1
 800970a:	b125      	cbz	r5, 8009716 <__swsetup_r+0x16>
 800970c:	69ab      	ldr	r3, [r5, #24]
 800970e:	b913      	cbnz	r3, 8009716 <__swsetup_r+0x16>
 8009710:	4628      	mov	r0, r5
 8009712:	f7ff f9f9 	bl	8008b08 <__sinit>
 8009716:	4b2e      	ldr	r3, [pc, #184]	; (80097d0 <__swsetup_r+0xd0>)
 8009718:	429c      	cmp	r4, r3
 800971a:	d10f      	bne.n	800973c <__swsetup_r+0x3c>
 800971c:	686c      	ldr	r4, [r5, #4]
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009724:	0719      	lsls	r1, r3, #28
 8009726:	d42c      	bmi.n	8009782 <__swsetup_r+0x82>
 8009728:	06dd      	lsls	r5, r3, #27
 800972a:	d411      	bmi.n	8009750 <__swsetup_r+0x50>
 800972c:	2309      	movs	r3, #9
 800972e:	6033      	str	r3, [r6, #0]
 8009730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800973a:	e03e      	b.n	80097ba <__swsetup_r+0xba>
 800973c:	4b25      	ldr	r3, [pc, #148]	; (80097d4 <__swsetup_r+0xd4>)
 800973e:	429c      	cmp	r4, r3
 8009740:	d101      	bne.n	8009746 <__swsetup_r+0x46>
 8009742:	68ac      	ldr	r4, [r5, #8]
 8009744:	e7eb      	b.n	800971e <__swsetup_r+0x1e>
 8009746:	4b24      	ldr	r3, [pc, #144]	; (80097d8 <__swsetup_r+0xd8>)
 8009748:	429c      	cmp	r4, r3
 800974a:	bf08      	it	eq
 800974c:	68ec      	ldreq	r4, [r5, #12]
 800974e:	e7e6      	b.n	800971e <__swsetup_r+0x1e>
 8009750:	0758      	lsls	r0, r3, #29
 8009752:	d512      	bpl.n	800977a <__swsetup_r+0x7a>
 8009754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009756:	b141      	cbz	r1, 800976a <__swsetup_r+0x6a>
 8009758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800975c:	4299      	cmp	r1, r3
 800975e:	d002      	beq.n	8009766 <__swsetup_r+0x66>
 8009760:	4630      	mov	r0, r6
 8009762:	f000 f9a9 	bl	8009ab8 <_free_r>
 8009766:	2300      	movs	r3, #0
 8009768:	6363      	str	r3, [r4, #52]	; 0x34
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	2300      	movs	r3, #0
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f043 0308 	orr.w	r3, r3, #8
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	b94b      	cbnz	r3, 800979a <__swsetup_r+0x9a>
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800978c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009790:	d003      	beq.n	800979a <__swsetup_r+0x9a>
 8009792:	4621      	mov	r1, r4
 8009794:	4630      	mov	r0, r6
 8009796:	f000 f929 	bl	80099ec <__smakebuf_r>
 800979a:	89a0      	ldrh	r0, [r4, #12]
 800979c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a0:	f010 0301 	ands.w	r3, r0, #1
 80097a4:	d00a      	beq.n	80097bc <__swsetup_r+0xbc>
 80097a6:	2300      	movs	r3, #0
 80097a8:	60a3      	str	r3, [r4, #8]
 80097aa:	6963      	ldr	r3, [r4, #20]
 80097ac:	425b      	negs	r3, r3
 80097ae:	61a3      	str	r3, [r4, #24]
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	b943      	cbnz	r3, 80097c6 <__swsetup_r+0xc6>
 80097b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b8:	d1ba      	bne.n	8009730 <__swsetup_r+0x30>
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	0781      	lsls	r1, r0, #30
 80097be:	bf58      	it	pl
 80097c0:	6963      	ldrpl	r3, [r4, #20]
 80097c2:	60a3      	str	r3, [r4, #8]
 80097c4:	e7f4      	b.n	80097b0 <__swsetup_r+0xb0>
 80097c6:	2000      	movs	r0, #0
 80097c8:	e7f7      	b.n	80097ba <__swsetup_r+0xba>
 80097ca:	bf00      	nop
 80097cc:	20000028 	.word	0x20000028
 80097d0:	0800a020 	.word	0x0800a020
 80097d4:	0800a040 	.word	0x0800a040
 80097d8:	0800a000 	.word	0x0800a000

080097dc <_close_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4d06      	ldr	r5, [pc, #24]	; (80097f8 <_close_r+0x1c>)
 80097e0:	2300      	movs	r3, #0
 80097e2:	4604      	mov	r4, r0
 80097e4:	4608      	mov	r0, r1
 80097e6:	602b      	str	r3, [r5, #0]
 80097e8:	f7f7 fe3d 	bl	8001466 <_close>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_close_r+0x1a>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_close_r+0x1a>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	200133a8 	.word	0x200133a8

080097fc <__sflush_r>:
 80097fc:	898a      	ldrh	r2, [r1, #12]
 80097fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009802:	4605      	mov	r5, r0
 8009804:	0710      	lsls	r0, r2, #28
 8009806:	460c      	mov	r4, r1
 8009808:	d458      	bmi.n	80098bc <__sflush_r+0xc0>
 800980a:	684b      	ldr	r3, [r1, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	dc05      	bgt.n	800981c <__sflush_r+0x20>
 8009810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009812:	2b00      	cmp	r3, #0
 8009814:	dc02      	bgt.n	800981c <__sflush_r+0x20>
 8009816:	2000      	movs	r0, #0
 8009818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800981e:	2e00      	cmp	r6, #0
 8009820:	d0f9      	beq.n	8009816 <__sflush_r+0x1a>
 8009822:	2300      	movs	r3, #0
 8009824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009828:	682f      	ldr	r7, [r5, #0]
 800982a:	602b      	str	r3, [r5, #0]
 800982c:	d032      	beq.n	8009894 <__sflush_r+0x98>
 800982e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	075a      	lsls	r2, r3, #29
 8009834:	d505      	bpl.n	8009842 <__sflush_r+0x46>
 8009836:	6863      	ldr	r3, [r4, #4]
 8009838:	1ac0      	subs	r0, r0, r3
 800983a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800983c:	b10b      	cbz	r3, 8009842 <__sflush_r+0x46>
 800983e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009840:	1ac0      	subs	r0, r0, r3
 8009842:	2300      	movs	r3, #0
 8009844:	4602      	mov	r2, r0
 8009846:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009848:	6a21      	ldr	r1, [r4, #32]
 800984a:	4628      	mov	r0, r5
 800984c:	47b0      	blx	r6
 800984e:	1c43      	adds	r3, r0, #1
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	d106      	bne.n	8009862 <__sflush_r+0x66>
 8009854:	6829      	ldr	r1, [r5, #0]
 8009856:	291d      	cmp	r1, #29
 8009858:	d82c      	bhi.n	80098b4 <__sflush_r+0xb8>
 800985a:	4a2a      	ldr	r2, [pc, #168]	; (8009904 <__sflush_r+0x108>)
 800985c:	40ca      	lsrs	r2, r1
 800985e:	07d6      	lsls	r6, r2, #31
 8009860:	d528      	bpl.n	80098b4 <__sflush_r+0xb8>
 8009862:	2200      	movs	r2, #0
 8009864:	6062      	str	r2, [r4, #4]
 8009866:	04d9      	lsls	r1, r3, #19
 8009868:	6922      	ldr	r2, [r4, #16]
 800986a:	6022      	str	r2, [r4, #0]
 800986c:	d504      	bpl.n	8009878 <__sflush_r+0x7c>
 800986e:	1c42      	adds	r2, r0, #1
 8009870:	d101      	bne.n	8009876 <__sflush_r+0x7a>
 8009872:	682b      	ldr	r3, [r5, #0]
 8009874:	b903      	cbnz	r3, 8009878 <__sflush_r+0x7c>
 8009876:	6560      	str	r0, [r4, #84]	; 0x54
 8009878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800987a:	602f      	str	r7, [r5, #0]
 800987c:	2900      	cmp	r1, #0
 800987e:	d0ca      	beq.n	8009816 <__sflush_r+0x1a>
 8009880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009884:	4299      	cmp	r1, r3
 8009886:	d002      	beq.n	800988e <__sflush_r+0x92>
 8009888:	4628      	mov	r0, r5
 800988a:	f000 f915 	bl	8009ab8 <_free_r>
 800988e:	2000      	movs	r0, #0
 8009890:	6360      	str	r0, [r4, #52]	; 0x34
 8009892:	e7c1      	b.n	8009818 <__sflush_r+0x1c>
 8009894:	6a21      	ldr	r1, [r4, #32]
 8009896:	2301      	movs	r3, #1
 8009898:	4628      	mov	r0, r5
 800989a:	47b0      	blx	r6
 800989c:	1c41      	adds	r1, r0, #1
 800989e:	d1c7      	bne.n	8009830 <__sflush_r+0x34>
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d0c4      	beq.n	8009830 <__sflush_r+0x34>
 80098a6:	2b1d      	cmp	r3, #29
 80098a8:	d001      	beq.n	80098ae <__sflush_r+0xb2>
 80098aa:	2b16      	cmp	r3, #22
 80098ac:	d101      	bne.n	80098b2 <__sflush_r+0xb6>
 80098ae:	602f      	str	r7, [r5, #0]
 80098b0:	e7b1      	b.n	8009816 <__sflush_r+0x1a>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	e7ad      	b.n	8009818 <__sflush_r+0x1c>
 80098bc:	690f      	ldr	r7, [r1, #16]
 80098be:	2f00      	cmp	r7, #0
 80098c0:	d0a9      	beq.n	8009816 <__sflush_r+0x1a>
 80098c2:	0793      	lsls	r3, r2, #30
 80098c4:	680e      	ldr	r6, [r1, #0]
 80098c6:	bf08      	it	eq
 80098c8:	694b      	ldreq	r3, [r1, #20]
 80098ca:	600f      	str	r7, [r1, #0]
 80098cc:	bf18      	it	ne
 80098ce:	2300      	movne	r3, #0
 80098d0:	eba6 0807 	sub.w	r8, r6, r7
 80098d4:	608b      	str	r3, [r1, #8]
 80098d6:	f1b8 0f00 	cmp.w	r8, #0
 80098da:	dd9c      	ble.n	8009816 <__sflush_r+0x1a>
 80098dc:	6a21      	ldr	r1, [r4, #32]
 80098de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098e0:	4643      	mov	r3, r8
 80098e2:	463a      	mov	r2, r7
 80098e4:	4628      	mov	r0, r5
 80098e6:	47b0      	blx	r6
 80098e8:	2800      	cmp	r0, #0
 80098ea:	dc06      	bgt.n	80098fa <__sflush_r+0xfe>
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098f8:	e78e      	b.n	8009818 <__sflush_r+0x1c>
 80098fa:	4407      	add	r7, r0
 80098fc:	eba8 0800 	sub.w	r8, r8, r0
 8009900:	e7e9      	b.n	80098d6 <__sflush_r+0xda>
 8009902:	bf00      	nop
 8009904:	20400001 	.word	0x20400001

08009908 <_fflush_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	690b      	ldr	r3, [r1, #16]
 800990c:	4605      	mov	r5, r0
 800990e:	460c      	mov	r4, r1
 8009910:	b913      	cbnz	r3, 8009918 <_fflush_r+0x10>
 8009912:	2500      	movs	r5, #0
 8009914:	4628      	mov	r0, r5
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	b118      	cbz	r0, 8009922 <_fflush_r+0x1a>
 800991a:	6983      	ldr	r3, [r0, #24]
 800991c:	b90b      	cbnz	r3, 8009922 <_fflush_r+0x1a>
 800991e:	f7ff f8f3 	bl	8008b08 <__sinit>
 8009922:	4b14      	ldr	r3, [pc, #80]	; (8009974 <_fflush_r+0x6c>)
 8009924:	429c      	cmp	r4, r3
 8009926:	d11b      	bne.n	8009960 <_fflush_r+0x58>
 8009928:	686c      	ldr	r4, [r5, #4]
 800992a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0ef      	beq.n	8009912 <_fflush_r+0xa>
 8009932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009934:	07d0      	lsls	r0, r2, #31
 8009936:	d404      	bmi.n	8009942 <_fflush_r+0x3a>
 8009938:	0599      	lsls	r1, r3, #22
 800993a:	d402      	bmi.n	8009942 <_fflush_r+0x3a>
 800993c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800993e:	f7ff f981 	bl	8008c44 <__retarget_lock_acquire_recursive>
 8009942:	4628      	mov	r0, r5
 8009944:	4621      	mov	r1, r4
 8009946:	f7ff ff59 	bl	80097fc <__sflush_r>
 800994a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800994c:	07da      	lsls	r2, r3, #31
 800994e:	4605      	mov	r5, r0
 8009950:	d4e0      	bmi.n	8009914 <_fflush_r+0xc>
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	059b      	lsls	r3, r3, #22
 8009956:	d4dd      	bmi.n	8009914 <_fflush_r+0xc>
 8009958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800995a:	f7ff f974 	bl	8008c46 <__retarget_lock_release_recursive>
 800995e:	e7d9      	b.n	8009914 <_fflush_r+0xc>
 8009960:	4b05      	ldr	r3, [pc, #20]	; (8009978 <_fflush_r+0x70>)
 8009962:	429c      	cmp	r4, r3
 8009964:	d101      	bne.n	800996a <_fflush_r+0x62>
 8009966:	68ac      	ldr	r4, [r5, #8]
 8009968:	e7df      	b.n	800992a <_fflush_r+0x22>
 800996a:	4b04      	ldr	r3, [pc, #16]	; (800997c <_fflush_r+0x74>)
 800996c:	429c      	cmp	r4, r3
 800996e:	bf08      	it	eq
 8009970:	68ec      	ldreq	r4, [r5, #12]
 8009972:	e7da      	b.n	800992a <_fflush_r+0x22>
 8009974:	0800a020 	.word	0x0800a020
 8009978:	0800a040 	.word	0x0800a040
 800997c:	0800a000 	.word	0x0800a000

08009980 <_lseek_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	; (80099a0 <_lseek_r+0x20>)
 8009984:	4604      	mov	r4, r0
 8009986:	4608      	mov	r0, r1
 8009988:	4611      	mov	r1, r2
 800998a:	2200      	movs	r2, #0
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7f7 fd90 	bl	80014b4 <_lseek>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_lseek_r+0x1e>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_lseek_r+0x1e>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	200133a8 	.word	0x200133a8

080099a4 <__swhatbuf_r>:
 80099a4:	b570      	push	{r4, r5, r6, lr}
 80099a6:	460e      	mov	r6, r1
 80099a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ac:	2900      	cmp	r1, #0
 80099ae:	b096      	sub	sp, #88	; 0x58
 80099b0:	4614      	mov	r4, r2
 80099b2:	461d      	mov	r5, r3
 80099b4:	da07      	bge.n	80099c6 <__swhatbuf_r+0x22>
 80099b6:	2300      	movs	r3, #0
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	89b3      	ldrh	r3, [r6, #12]
 80099bc:	061a      	lsls	r2, r3, #24
 80099be:	d410      	bmi.n	80099e2 <__swhatbuf_r+0x3e>
 80099c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c4:	e00e      	b.n	80099e4 <__swhatbuf_r+0x40>
 80099c6:	466a      	mov	r2, sp
 80099c8:	f000 f8fe 	bl	8009bc8 <_fstat_r>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	dbf2      	blt.n	80099b6 <__swhatbuf_r+0x12>
 80099d0:	9a01      	ldr	r2, [sp, #4]
 80099d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099da:	425a      	negs	r2, r3
 80099dc:	415a      	adcs	r2, r3
 80099de:	602a      	str	r2, [r5, #0]
 80099e0:	e7ee      	b.n	80099c0 <__swhatbuf_r+0x1c>
 80099e2:	2340      	movs	r3, #64	; 0x40
 80099e4:	2000      	movs	r0, #0
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	b016      	add	sp, #88	; 0x58
 80099ea:	bd70      	pop	{r4, r5, r6, pc}

080099ec <__smakebuf_r>:
 80099ec:	898b      	ldrh	r3, [r1, #12]
 80099ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099f0:	079d      	lsls	r5, r3, #30
 80099f2:	4606      	mov	r6, r0
 80099f4:	460c      	mov	r4, r1
 80099f6:	d507      	bpl.n	8009a08 <__smakebuf_r+0x1c>
 80099f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	6123      	str	r3, [r4, #16]
 8009a00:	2301      	movs	r3, #1
 8009a02:	6163      	str	r3, [r4, #20]
 8009a04:	b002      	add	sp, #8
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
 8009a08:	ab01      	add	r3, sp, #4
 8009a0a:	466a      	mov	r2, sp
 8009a0c:	f7ff ffca 	bl	80099a4 <__swhatbuf_r>
 8009a10:	9900      	ldr	r1, [sp, #0]
 8009a12:	4605      	mov	r5, r0
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7ff f917 	bl	8008c48 <_malloc_r>
 8009a1a:	b948      	cbnz	r0, 8009a30 <__smakebuf_r+0x44>
 8009a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a20:	059a      	lsls	r2, r3, #22
 8009a22:	d4ef      	bmi.n	8009a04 <__smakebuf_r+0x18>
 8009a24:	f023 0303 	bic.w	r3, r3, #3
 8009a28:	f043 0302 	orr.w	r3, r3, #2
 8009a2c:	81a3      	strh	r3, [r4, #12]
 8009a2e:	e7e3      	b.n	80099f8 <__smakebuf_r+0xc>
 8009a30:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <__smakebuf_r+0x7c>)
 8009a32:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	6020      	str	r0, [r4, #0]
 8009a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	9b00      	ldr	r3, [sp, #0]
 8009a40:	6163      	str	r3, [r4, #20]
 8009a42:	9b01      	ldr	r3, [sp, #4]
 8009a44:	6120      	str	r0, [r4, #16]
 8009a46:	b15b      	cbz	r3, 8009a60 <__smakebuf_r+0x74>
 8009a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f000 f8cd 	bl	8009bec <_isatty_r>
 8009a52:	b128      	cbz	r0, 8009a60 <__smakebuf_r+0x74>
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f023 0303 	bic.w	r3, r3, #3
 8009a5a:	f043 0301 	orr.w	r3, r3, #1
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	89a0      	ldrh	r0, [r4, #12]
 8009a62:	4305      	orrs	r5, r0
 8009a64:	81a5      	strh	r5, [r4, #12]
 8009a66:	e7cd      	b.n	8009a04 <__smakebuf_r+0x18>
 8009a68:	08008aa1 	.word	0x08008aa1

08009a6c <memmove>:
 8009a6c:	4288      	cmp	r0, r1
 8009a6e:	b510      	push	{r4, lr}
 8009a70:	eb01 0402 	add.w	r4, r1, r2
 8009a74:	d902      	bls.n	8009a7c <memmove+0x10>
 8009a76:	4284      	cmp	r4, r0
 8009a78:	4623      	mov	r3, r4
 8009a7a:	d807      	bhi.n	8009a8c <memmove+0x20>
 8009a7c:	1e43      	subs	r3, r0, #1
 8009a7e:	42a1      	cmp	r1, r4
 8009a80:	d008      	beq.n	8009a94 <memmove+0x28>
 8009a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a8a:	e7f8      	b.n	8009a7e <memmove+0x12>
 8009a8c:	4402      	add	r2, r0
 8009a8e:	4601      	mov	r1, r0
 8009a90:	428a      	cmp	r2, r1
 8009a92:	d100      	bne.n	8009a96 <memmove+0x2a>
 8009a94:	bd10      	pop	{r4, pc}
 8009a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a9e:	e7f7      	b.n	8009a90 <memmove+0x24>

08009aa0 <__malloc_lock>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	; (8009aa8 <__malloc_lock+0x8>)
 8009aa2:	f7ff b8cf 	b.w	8008c44 <__retarget_lock_acquire_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	200133a0 	.word	0x200133a0

08009aac <__malloc_unlock>:
 8009aac:	4801      	ldr	r0, [pc, #4]	; (8009ab4 <__malloc_unlock+0x8>)
 8009aae:	f7ff b8ca 	b.w	8008c46 <__retarget_lock_release_recursive>
 8009ab2:	bf00      	nop
 8009ab4:	200133a0 	.word	0x200133a0

08009ab8 <_free_r>:
 8009ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aba:	2900      	cmp	r1, #0
 8009abc:	d048      	beq.n	8009b50 <_free_r+0x98>
 8009abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac2:	9001      	str	r0, [sp, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8009aca:	bfb8      	it	lt
 8009acc:	18e4      	addlt	r4, r4, r3
 8009ace:	f7ff ffe7 	bl	8009aa0 <__malloc_lock>
 8009ad2:	4a20      	ldr	r2, [pc, #128]	; (8009b54 <_free_r+0x9c>)
 8009ad4:	9801      	ldr	r0, [sp, #4]
 8009ad6:	6813      	ldr	r3, [r2, #0]
 8009ad8:	4615      	mov	r5, r2
 8009ada:	b933      	cbnz	r3, 8009aea <_free_r+0x32>
 8009adc:	6063      	str	r3, [r4, #4]
 8009ade:	6014      	str	r4, [r2, #0]
 8009ae0:	b003      	add	sp, #12
 8009ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ae6:	f7ff bfe1 	b.w	8009aac <__malloc_unlock>
 8009aea:	42a3      	cmp	r3, r4
 8009aec:	d90b      	bls.n	8009b06 <_free_r+0x4e>
 8009aee:	6821      	ldr	r1, [r4, #0]
 8009af0:	1862      	adds	r2, r4, r1
 8009af2:	4293      	cmp	r3, r2
 8009af4:	bf04      	itt	eq
 8009af6:	681a      	ldreq	r2, [r3, #0]
 8009af8:	685b      	ldreq	r3, [r3, #4]
 8009afa:	6063      	str	r3, [r4, #4]
 8009afc:	bf04      	itt	eq
 8009afe:	1852      	addeq	r2, r2, r1
 8009b00:	6022      	streq	r2, [r4, #0]
 8009b02:	602c      	str	r4, [r5, #0]
 8009b04:	e7ec      	b.n	8009ae0 <_free_r+0x28>
 8009b06:	461a      	mov	r2, r3
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	b10b      	cbz	r3, 8009b10 <_free_r+0x58>
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	d9fa      	bls.n	8009b06 <_free_r+0x4e>
 8009b10:	6811      	ldr	r1, [r2, #0]
 8009b12:	1855      	adds	r5, r2, r1
 8009b14:	42a5      	cmp	r5, r4
 8009b16:	d10b      	bne.n	8009b30 <_free_r+0x78>
 8009b18:	6824      	ldr	r4, [r4, #0]
 8009b1a:	4421      	add	r1, r4
 8009b1c:	1854      	adds	r4, r2, r1
 8009b1e:	42a3      	cmp	r3, r4
 8009b20:	6011      	str	r1, [r2, #0]
 8009b22:	d1dd      	bne.n	8009ae0 <_free_r+0x28>
 8009b24:	681c      	ldr	r4, [r3, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	6053      	str	r3, [r2, #4]
 8009b2a:	4421      	add	r1, r4
 8009b2c:	6011      	str	r1, [r2, #0]
 8009b2e:	e7d7      	b.n	8009ae0 <_free_r+0x28>
 8009b30:	d902      	bls.n	8009b38 <_free_r+0x80>
 8009b32:	230c      	movs	r3, #12
 8009b34:	6003      	str	r3, [r0, #0]
 8009b36:	e7d3      	b.n	8009ae0 <_free_r+0x28>
 8009b38:	6825      	ldr	r5, [r4, #0]
 8009b3a:	1961      	adds	r1, r4, r5
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	bf04      	itt	eq
 8009b40:	6819      	ldreq	r1, [r3, #0]
 8009b42:	685b      	ldreq	r3, [r3, #4]
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	bf04      	itt	eq
 8009b48:	1949      	addeq	r1, r1, r5
 8009b4a:	6021      	streq	r1, [r4, #0]
 8009b4c:	6054      	str	r4, [r2, #4]
 8009b4e:	e7c7      	b.n	8009ae0 <_free_r+0x28>
 8009b50:	b003      	add	sp, #12
 8009b52:	bd30      	pop	{r4, r5, pc}
 8009b54:	20012e68 	.word	0x20012e68

08009b58 <_realloc_r>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	460e      	mov	r6, r1
 8009b60:	b921      	cbnz	r1, 8009b6c <_realloc_r+0x14>
 8009b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b66:	4611      	mov	r1, r2
 8009b68:	f7ff b86e 	b.w	8008c48 <_malloc_r>
 8009b6c:	b922      	cbnz	r2, 8009b78 <_realloc_r+0x20>
 8009b6e:	f7ff ffa3 	bl	8009ab8 <_free_r>
 8009b72:	4625      	mov	r5, r4
 8009b74:	4628      	mov	r0, r5
 8009b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b78:	f000 f848 	bl	8009c0c <_malloc_usable_size_r>
 8009b7c:	42a0      	cmp	r0, r4
 8009b7e:	d20f      	bcs.n	8009ba0 <_realloc_r+0x48>
 8009b80:	4621      	mov	r1, r4
 8009b82:	4638      	mov	r0, r7
 8009b84:	f7ff f860 	bl	8008c48 <_malloc_r>
 8009b88:	4605      	mov	r5, r0
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d0f2      	beq.n	8009b74 <_realloc_r+0x1c>
 8009b8e:	4631      	mov	r1, r6
 8009b90:	4622      	mov	r2, r4
 8009b92:	f7fe ff13 	bl	80089bc <memcpy>
 8009b96:	4631      	mov	r1, r6
 8009b98:	4638      	mov	r0, r7
 8009b9a:	f7ff ff8d 	bl	8009ab8 <_free_r>
 8009b9e:	e7e9      	b.n	8009b74 <_realloc_r+0x1c>
 8009ba0:	4635      	mov	r5, r6
 8009ba2:	e7e7      	b.n	8009b74 <_realloc_r+0x1c>

08009ba4 <_read_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d07      	ldr	r5, [pc, #28]	; (8009bc4 <_read_r+0x20>)
 8009ba8:	4604      	mov	r4, r0
 8009baa:	4608      	mov	r0, r1
 8009bac:	4611      	mov	r1, r2
 8009bae:	2200      	movs	r2, #0
 8009bb0:	602a      	str	r2, [r5, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f7f7 fc1e 	bl	80013f4 <_read>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	d102      	bne.n	8009bc2 <_read_r+0x1e>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	b103      	cbz	r3, 8009bc2 <_read_r+0x1e>
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	200133a8 	.word	0x200133a8

08009bc8 <_fstat_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4d07      	ldr	r5, [pc, #28]	; (8009be8 <_fstat_r+0x20>)
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4604      	mov	r4, r0
 8009bd0:	4608      	mov	r0, r1
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	602b      	str	r3, [r5, #0]
 8009bd6:	f7f7 fc52 	bl	800147e <_fstat>
 8009bda:	1c43      	adds	r3, r0, #1
 8009bdc:	d102      	bne.n	8009be4 <_fstat_r+0x1c>
 8009bde:	682b      	ldr	r3, [r5, #0]
 8009be0:	b103      	cbz	r3, 8009be4 <_fstat_r+0x1c>
 8009be2:	6023      	str	r3, [r4, #0]
 8009be4:	bd38      	pop	{r3, r4, r5, pc}
 8009be6:	bf00      	nop
 8009be8:	200133a8 	.word	0x200133a8

08009bec <_isatty_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4d06      	ldr	r5, [pc, #24]	; (8009c08 <_isatty_r+0x1c>)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	602b      	str	r3, [r5, #0]
 8009bf8:	f7f7 fc51 	bl	800149e <_isatty>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_isatty_r+0x1a>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_isatty_r+0x1a>
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	200133a8 	.word	0x200133a8

08009c0c <_malloc_usable_size_r>:
 8009c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c10:	1f18      	subs	r0, r3, #4
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bfbc      	itt	lt
 8009c16:	580b      	ldrlt	r3, [r1, r0]
 8009c18:	18c0      	addlt	r0, r0, r3
 8009c1a:	4770      	bx	lr

08009c1c <_sbrk>:
 8009c1c:	4b04      	ldr	r3, [pc, #16]	; (8009c30 <_sbrk+0x14>)
 8009c1e:	6819      	ldr	r1, [r3, #0]
 8009c20:	4602      	mov	r2, r0
 8009c22:	b909      	cbnz	r1, 8009c28 <_sbrk+0xc>
 8009c24:	4903      	ldr	r1, [pc, #12]	; (8009c34 <_sbrk+0x18>)
 8009c26:	6019      	str	r1, [r3, #0]
 8009c28:	6818      	ldr	r0, [r3, #0]
 8009c2a:	4402      	add	r2, r0
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	4770      	bx	lr
 8009c30:	20012e70 	.word	0x20012e70
 8009c34:	200133b0 	.word	0x200133b0

08009c38 <_init>:
 8009c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3a:	bf00      	nop
 8009c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c3e:	bc08      	pop	{r3}
 8009c40:	469e      	mov	lr, r3
 8009c42:	4770      	bx	lr

08009c44 <_fini>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	bf00      	nop
 8009c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4a:	bc08      	pop	{r3}
 8009c4c:	469e      	mov	lr, r3
 8009c4e:	4770      	bx	lr
